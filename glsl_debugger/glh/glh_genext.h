/* File generated by extgen.cpp -- do not modify */
#ifndef GLH_GENEXT_H
#define GLH_GENEXT_H

#ifdef __cplusplus
extern "C" {
#endif

#include <GL/gl.h>
#include <GL/glext.h>
#if defined(WIN32)
#  include <GL/wglext.h>
#  define GLH_EXT_GET_PROC_ADDRESS(p)   wglGetProcAddress(p) 
#elif defined(UNIX)
#  include <string.h>
#  include <GL/glx.h>
#  include <GL/glxext.h>
#  define GLH_EXT_GET_PROC_ADDRESS(p)   glXGetProcAddressARB( (const GLubyte *) p) 
#endif

#ifdef GLH_EXT_SINGLE_FILE
#  ifdef _WIN32
#      define GLH_EXTERN _declspec(dllexport)
#  else
#      define GLH_EXTERN
#  endif
#  define GLH_INITIALIZER = 0
#else
#  if defined(_WIN32) && defined(GLH_EXT_IMPORT)
#      define GLH_EXTERN _declspec(dllimport) extern
#  else
#      define GLH_EXTERN extern
#  endif
#  define GLH_INITIALIZER
#endif

#define GLH__PREPROCESSOR_GYMNASTICS2(a,b) a##b
#define GLH__PREPROCESSOR_GYMNASTICS(a,b) GLH__PREPROCESSOR_GYMNASTICS2(a,b)

#ifndef _WIN32
#define GLH_EXT_PREFIX _
#endif
#ifndef GLH_EXT_PREFIX
# define GLH_EXT_NAME(a) a
#else
# define GLH_EXT_NAME(a) GLH__PREPROCESSOR_GYMNASTICS(GLH_EXT_PREFIX,a)
#endif

#ifndef _WIN32
# ifndef GLH_CORE_PREFIX
#  define GLH_CORE_PREFIX _
# endif
#endif

#ifndef GLH_CORE_PREFIX
# define GLH_CORE_NAME(a) a
#else
# define GLH_CORE_NAME(a) GLH__PREPROCESSOR_GYMNASTICS(GLH_CORE_PREFIX,a)
#endif

#if defined(GL_VERSION_1_2) || defined(GL_VERSION_1_3) || defined(GL_VERSION_1_4) || defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    /* These routines are prefixed by the preprocessor constant
       GLH_CORE_PREFIX to avoid colliding with the OpenGL 1.1 namespace. */
    GLH_EXTERN PFNGLBLENDCOLORPROC GLH_CORE_NAME(glBlendColor) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBLENDEQUATIONPROC GLH_CORE_NAME(glBlendEquation) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDRAWRANGEELEMENTSPROC GLH_CORE_NAME(glDrawRangeElements) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORTABLEPROC GLH_CORE_NAME(glColorTable) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORTABLEPARAMETERFVPROC GLH_CORE_NAME(glColorTableParameterfv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORTABLEPARAMETERIVPROC GLH_CORE_NAME(glColorTableParameteriv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOPYCOLORTABLEPROC GLH_CORE_NAME(glCopyColorTable) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOLORTABLEPROC GLH_CORE_NAME(glGetColorTable) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOLORTABLEPARAMETERFVPROC GLH_CORE_NAME(glGetColorTableParameterfv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOLORTABLEPARAMETERIVPROC GLH_CORE_NAME(glGetColorTableParameteriv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORSUBTABLEPROC GLH_CORE_NAME(glColorSubTable) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOPYCOLORSUBTABLEPROC GLH_CORE_NAME(glCopyColorSubTable) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCONVOLUTIONFILTER1DPROC GLH_CORE_NAME(glConvolutionFilter1D) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCONVOLUTIONFILTER2DPROC GLH_CORE_NAME(glConvolutionFilter2D) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCONVOLUTIONPARAMETERFPROC GLH_CORE_NAME(glConvolutionParameterf) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCONVOLUTIONPARAMETERFVPROC GLH_CORE_NAME(glConvolutionParameterfv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCONVOLUTIONPARAMETERIPROC GLH_CORE_NAME(glConvolutionParameteri) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCONVOLUTIONPARAMETERIVPROC GLH_CORE_NAME(glConvolutionParameteriv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOPYCONVOLUTIONFILTER1DPROC GLH_CORE_NAME(glCopyConvolutionFilter1D) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOPYCONVOLUTIONFILTER2DPROC GLH_CORE_NAME(glCopyConvolutionFilter2D) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCONVOLUTIONFILTERPROC GLH_CORE_NAME(glGetConvolutionFilter) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCONVOLUTIONPARAMETERFVPROC GLH_CORE_NAME(glGetConvolutionParameterfv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCONVOLUTIONPARAMETERIVPROC GLH_CORE_NAME(glGetConvolutionParameteriv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETSEPARABLEFILTERPROC GLH_CORE_NAME(glGetSeparableFilter) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSEPARABLEFILTER2DPROC GLH_CORE_NAME(glSeparableFilter2D) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETHISTOGRAMPROC GLH_CORE_NAME(glGetHistogram) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETHISTOGRAMPARAMETERFVPROC GLH_CORE_NAME(glGetHistogramParameterfv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETHISTOGRAMPARAMETERIVPROC GLH_CORE_NAME(glGetHistogramParameteriv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMINMAXPROC GLH_CORE_NAME(glGetMinmax) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMINMAXPARAMETERFVPROC GLH_CORE_NAME(glGetMinmaxParameterfv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMINMAXPARAMETERIVPROC GLH_CORE_NAME(glGetMinmaxParameteriv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLHISTOGRAMPROC GLH_CORE_NAME(glHistogram) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMINMAXPROC GLH_CORE_NAME(glMinmax) GLH_INITIALIZER;
    GLH_EXTERN PFNGLRESETHISTOGRAMPROC GLH_CORE_NAME(glResetHistogram) GLH_INITIALIZER;
    GLH_EXTERN PFNGLRESETMINMAXPROC GLH_CORE_NAME(glResetMinmax) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXIMAGE3DPROC GLH_CORE_NAME(glTexImage3D) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXSUBIMAGE3DPROC GLH_CORE_NAME(glTexSubImage3D) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOPYTEXSUBIMAGE3DPROC GLH_CORE_NAME(glCopyTexSubImage3D) GLH_INITIALIZER;
#endif

#if defined(GL_VERSION_1_3) || defined(GL_VERSION_1_4) || defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    /* These routines are prefixed by the preprocessor constant
       GLH_CORE_PREFIX to avoid colliding with the OpenGL 1.1 namespace. */
    GLH_EXTERN PFNGLACTIVETEXTUREPROC GLH_CORE_NAME(glActiveTexture) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCLIENTACTIVETEXTUREPROC GLH_CORE_NAME(glClientActiveTexture) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1DPROC GLH_CORE_NAME(glMultiTexCoord1d) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1DVPROC GLH_CORE_NAME(glMultiTexCoord1dv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1FPROC GLH_CORE_NAME(glMultiTexCoord1f) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1FVPROC GLH_CORE_NAME(glMultiTexCoord1fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1IPROC GLH_CORE_NAME(glMultiTexCoord1i) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1IVPROC GLH_CORE_NAME(glMultiTexCoord1iv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1SPROC GLH_CORE_NAME(glMultiTexCoord1s) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1SVPROC GLH_CORE_NAME(glMultiTexCoord1sv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2DPROC GLH_CORE_NAME(glMultiTexCoord2d) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2DVPROC GLH_CORE_NAME(glMultiTexCoord2dv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2FPROC GLH_CORE_NAME(glMultiTexCoord2f) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2FVPROC GLH_CORE_NAME(glMultiTexCoord2fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2IPROC GLH_CORE_NAME(glMultiTexCoord2i) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2IVPROC GLH_CORE_NAME(glMultiTexCoord2iv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2SPROC GLH_CORE_NAME(glMultiTexCoord2s) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2SVPROC GLH_CORE_NAME(glMultiTexCoord2sv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3DPROC GLH_CORE_NAME(glMultiTexCoord3d) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3DVPROC GLH_CORE_NAME(glMultiTexCoord3dv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3FPROC GLH_CORE_NAME(glMultiTexCoord3f) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3FVPROC GLH_CORE_NAME(glMultiTexCoord3fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3IPROC GLH_CORE_NAME(glMultiTexCoord3i) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3IVPROC GLH_CORE_NAME(glMultiTexCoord3iv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3SPROC GLH_CORE_NAME(glMultiTexCoord3s) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3SVPROC GLH_CORE_NAME(glMultiTexCoord3sv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4DPROC GLH_CORE_NAME(glMultiTexCoord4d) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4DVPROC GLH_CORE_NAME(glMultiTexCoord4dv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4FPROC GLH_CORE_NAME(glMultiTexCoord4f) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4FVPROC GLH_CORE_NAME(glMultiTexCoord4fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4IPROC GLH_CORE_NAME(glMultiTexCoord4i) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4IVPROC GLH_CORE_NAME(glMultiTexCoord4iv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4SPROC GLH_CORE_NAME(glMultiTexCoord4s) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4SVPROC GLH_CORE_NAME(glMultiTexCoord4sv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLLOADTRANSPOSEMATRIXFPROC GLH_CORE_NAME(glLoadTransposeMatrixf) GLH_INITIALIZER;
    GLH_EXTERN PFNGLLOADTRANSPOSEMATRIXDPROC GLH_CORE_NAME(glLoadTransposeMatrixd) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTTRANSPOSEMATRIXFPROC GLH_CORE_NAME(glMultTransposeMatrixf) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTTRANSPOSEMATRIXDPROC GLH_CORE_NAME(glMultTransposeMatrixd) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSAMPLECOVERAGEPROC GLH_CORE_NAME(glSampleCoverage) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXIMAGE3DPROC GLH_CORE_NAME(glCompressedTexImage3D) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXIMAGE2DPROC GLH_CORE_NAME(glCompressedTexImage2D) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXIMAGE1DPROC GLH_CORE_NAME(glCompressedTexImage1D) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC GLH_CORE_NAME(glCompressedTexSubImage3D) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC GLH_CORE_NAME(glCompressedTexSubImage2D) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC GLH_CORE_NAME(glCompressedTexSubImage1D) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOMPRESSEDTEXIMAGEPROC GLH_CORE_NAME(glGetCompressedTexImage) GLH_INITIALIZER;
#endif

#if defined(GL_VERSION_1_4) || defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    /* These routines are prefixed by the preprocessor constant
       GLH_CORE_PREFIX to avoid colliding with the OpenGL 1.1 namespace. */
    GLH_EXTERN PFNGLBLENDFUNCSEPARATEPROC GLH_CORE_NAME(glBlendFuncSeparate) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDFPROC GLH_CORE_NAME(glFogCoordf) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDFVPROC GLH_CORE_NAME(glFogCoordfv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDDPROC GLH_CORE_NAME(glFogCoordd) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDDVPROC GLH_CORE_NAME(glFogCoorddv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDPOINTERPROC GLH_CORE_NAME(glFogCoordPointer) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTIDRAWARRAYSPROC GLH_CORE_NAME(glMultiDrawArrays) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTIDRAWELEMENTSPROC GLH_CORE_NAME(glMultiDrawElements) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPOINTPARAMETERFPROC GLH_CORE_NAME(glPointParameterf) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPOINTPARAMETERFVPROC GLH_CORE_NAME(glPointParameterfv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPOINTPARAMETERIPROC GLH_CORE_NAME(glPointParameteri) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPOINTPARAMETERIVPROC GLH_CORE_NAME(glPointParameteriv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3BPROC GLH_CORE_NAME(glSecondaryColor3b) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3BVPROC GLH_CORE_NAME(glSecondaryColor3bv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3DPROC GLH_CORE_NAME(glSecondaryColor3d) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3DVPROC GLH_CORE_NAME(glSecondaryColor3dv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3FPROC GLH_CORE_NAME(glSecondaryColor3f) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3FVPROC GLH_CORE_NAME(glSecondaryColor3fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3IPROC GLH_CORE_NAME(glSecondaryColor3i) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3IVPROC GLH_CORE_NAME(glSecondaryColor3iv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3SPROC GLH_CORE_NAME(glSecondaryColor3s) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3SVPROC GLH_CORE_NAME(glSecondaryColor3sv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UBPROC GLH_CORE_NAME(glSecondaryColor3ub) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UBVPROC GLH_CORE_NAME(glSecondaryColor3ubv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UIPROC GLH_CORE_NAME(glSecondaryColor3ui) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UIVPROC GLH_CORE_NAME(glSecondaryColor3uiv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3USPROC GLH_CORE_NAME(glSecondaryColor3us) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3USVPROC GLH_CORE_NAME(glSecondaryColor3usv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLORPOINTERPROC GLH_CORE_NAME(glSecondaryColorPointer) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2DPROC GLH_CORE_NAME(glWindowPos2d) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2DVPROC GLH_CORE_NAME(glWindowPos2dv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2FPROC GLH_CORE_NAME(glWindowPos2f) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2FVPROC GLH_CORE_NAME(glWindowPos2fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2IPROC GLH_CORE_NAME(glWindowPos2i) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2IVPROC GLH_CORE_NAME(glWindowPos2iv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2SPROC GLH_CORE_NAME(glWindowPos2s) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2SVPROC GLH_CORE_NAME(glWindowPos2sv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3DPROC GLH_CORE_NAME(glWindowPos3d) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3DVPROC GLH_CORE_NAME(glWindowPos3dv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3FPROC GLH_CORE_NAME(glWindowPos3f) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3FVPROC GLH_CORE_NAME(glWindowPos3fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3IPROC GLH_CORE_NAME(glWindowPos3i) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3IVPROC GLH_CORE_NAME(glWindowPos3iv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3SPROC GLH_CORE_NAME(glWindowPos3s) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3SVPROC GLH_CORE_NAME(glWindowPos3sv) GLH_INITIALIZER;
#endif

#if defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    /* These routines are prefixed by the preprocessor constant
       GLH_CORE_PREFIX to avoid colliding with the OpenGL 1.1 namespace. */
    GLH_EXTERN PFNGLGENQUERIESPROC GLH_CORE_NAME(glGenQueries) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEQUERIESPROC GLH_CORE_NAME(glDeleteQueries) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISQUERYPROC GLH_CORE_NAME(glIsQuery) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBEGINQUERYPROC GLH_CORE_NAME(glBeginQuery) GLH_INITIALIZER;
    GLH_EXTERN PFNGLENDQUERYPROC GLH_CORE_NAME(glEndQuery) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETQUERYIVPROC GLH_CORE_NAME(glGetQueryiv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETQUERYOBJECTIVPROC GLH_CORE_NAME(glGetQueryObjectiv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETQUERYOBJECTUIVPROC GLH_CORE_NAME(glGetQueryObjectuiv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDBUFFERPROC GLH_CORE_NAME(glBindBuffer) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEBUFFERSPROC GLH_CORE_NAME(glDeleteBuffers) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGENBUFFERSPROC GLH_CORE_NAME(glGenBuffers) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISBUFFERPROC GLH_CORE_NAME(glIsBuffer) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBUFFERDATAPROC GLH_CORE_NAME(glBufferData) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBUFFERSUBDATAPROC GLH_CORE_NAME(glBufferSubData) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETBUFFERSUBDATAPROC GLH_CORE_NAME(glGetBufferSubData) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMAPBUFFERPROC GLH_CORE_NAME(glMapBuffer) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNMAPBUFFERPROC GLH_CORE_NAME(glUnmapBuffer) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETBUFFERPARAMETERIVPROC GLH_CORE_NAME(glGetBufferParameteriv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETBUFFERPOINTERVPROC GLH_CORE_NAME(glGetBufferPointerv) GLH_INITIALIZER;
#endif

#if defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    /* These routines are prefixed by the preprocessor constant
       GLH_CORE_PREFIX to avoid colliding with the OpenGL 1.1 namespace. */
    GLH_EXTERN PFNGLBLENDEQUATIONSEPARATEPROC GLH_CORE_NAME(glBlendEquationSeparate) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDRAWBUFFERSPROC GLH_CORE_NAME(glDrawBuffers) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSTENCILOPSEPARATEPROC GLH_CORE_NAME(glStencilOpSeparate) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSTENCILFUNCSEPARATEPROC GLH_CORE_NAME(glStencilFuncSeparate) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSTENCILMASKSEPARATEPROC GLH_CORE_NAME(glStencilMaskSeparate) GLH_INITIALIZER;
    GLH_EXTERN PFNGLATTACHSHADERPROC GLH_CORE_NAME(glAttachShader) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDATTRIBLOCATIONPROC GLH_CORE_NAME(glBindAttribLocation) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPILESHADERPROC GLH_CORE_NAME(glCompileShader) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCREATEPROGRAMPROC GLH_CORE_NAME(glCreateProgram) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCREATESHADERPROC GLH_CORE_NAME(glCreateShader) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEPROGRAMPROC GLH_CORE_NAME(glDeleteProgram) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETESHADERPROC GLH_CORE_NAME(glDeleteShader) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDETACHSHADERPROC GLH_CORE_NAME(glDetachShader) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDISABLEVERTEXATTRIBARRAYPROC GLH_CORE_NAME(glDisableVertexAttribArray) GLH_INITIALIZER;
    GLH_EXTERN PFNGLENABLEVERTEXATTRIBARRAYPROC GLH_CORE_NAME(glEnableVertexAttribArray) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETACTIVEATTRIBPROC GLH_CORE_NAME(glGetActiveAttrib) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETACTIVEUNIFORMPROC GLH_CORE_NAME(glGetActiveUniform) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETATTACHEDSHADERSPROC GLH_CORE_NAME(glGetAttachedShaders) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETATTRIBLOCATIONPROC GLH_CORE_NAME(glGetAttribLocation) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMIVPROC GLH_CORE_NAME(glGetProgramiv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMINFOLOGPROC GLH_CORE_NAME(glGetProgramInfoLog) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETSHADERIVPROC GLH_CORE_NAME(glGetShaderiv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETSHADERINFOLOGPROC GLH_CORE_NAME(glGetShaderInfoLog) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETSHADERSOURCEPROC GLH_CORE_NAME(glGetShaderSource) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETUNIFORMLOCATIONPROC GLH_CORE_NAME(glGetUniformLocation) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETUNIFORMFVPROC GLH_CORE_NAME(glGetUniformfv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETUNIFORMIVPROC GLH_CORE_NAME(glGetUniformiv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBDVPROC GLH_CORE_NAME(glGetVertexAttribdv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBFVPROC GLH_CORE_NAME(glGetVertexAttribfv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBIVPROC GLH_CORE_NAME(glGetVertexAttribiv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBPOINTERVPROC GLH_CORE_NAME(glGetVertexAttribPointerv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISPROGRAMPROC GLH_CORE_NAME(glIsProgram) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISSHADERPROC GLH_CORE_NAME(glIsShader) GLH_INITIALIZER;
    GLH_EXTERN PFNGLLINKPROGRAMPROC GLH_CORE_NAME(glLinkProgram) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSHADERSOURCEPROC GLH_CORE_NAME(glShaderSource) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUSEPROGRAMPROC GLH_CORE_NAME(glUseProgram) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM1FPROC GLH_CORE_NAME(glUniform1f) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM2FPROC GLH_CORE_NAME(glUniform2f) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM3FPROC GLH_CORE_NAME(glUniform3f) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM4FPROC GLH_CORE_NAME(glUniform4f) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM1IPROC GLH_CORE_NAME(glUniform1i) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM2IPROC GLH_CORE_NAME(glUniform2i) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM3IPROC GLH_CORE_NAME(glUniform3i) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM4IPROC GLH_CORE_NAME(glUniform4i) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM1FVPROC GLH_CORE_NAME(glUniform1fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM2FVPROC GLH_CORE_NAME(glUniform2fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM3FVPROC GLH_CORE_NAME(glUniform3fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM4FVPROC GLH_CORE_NAME(glUniform4fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM1IVPROC GLH_CORE_NAME(glUniform1iv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM2IVPROC GLH_CORE_NAME(glUniform2iv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM3IVPROC GLH_CORE_NAME(glUniform3iv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM4IVPROC GLH_CORE_NAME(glUniform4iv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORMMATRIX2FVPROC GLH_CORE_NAME(glUniformMatrix2fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORMMATRIX3FVPROC GLH_CORE_NAME(glUniformMatrix3fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORMMATRIX4FVPROC GLH_CORE_NAME(glUniformMatrix4fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVALIDATEPROGRAMPROC GLH_CORE_NAME(glValidateProgram) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1DPROC GLH_CORE_NAME(glVertexAttrib1d) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1DVPROC GLH_CORE_NAME(glVertexAttrib1dv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1FPROC GLH_CORE_NAME(glVertexAttrib1f) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1FVPROC GLH_CORE_NAME(glVertexAttrib1fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1SPROC GLH_CORE_NAME(glVertexAttrib1s) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1SVPROC GLH_CORE_NAME(glVertexAttrib1sv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2DPROC GLH_CORE_NAME(glVertexAttrib2d) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2DVPROC GLH_CORE_NAME(glVertexAttrib2dv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2FPROC GLH_CORE_NAME(glVertexAttrib2f) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2FVPROC GLH_CORE_NAME(glVertexAttrib2fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2SPROC GLH_CORE_NAME(glVertexAttrib2s) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2SVPROC GLH_CORE_NAME(glVertexAttrib2sv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3DPROC GLH_CORE_NAME(glVertexAttrib3d) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3DVPROC GLH_CORE_NAME(glVertexAttrib3dv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3FPROC GLH_CORE_NAME(glVertexAttrib3f) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3FVPROC GLH_CORE_NAME(glVertexAttrib3fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3SPROC GLH_CORE_NAME(glVertexAttrib3s) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3SVPROC GLH_CORE_NAME(glVertexAttrib3sv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4NBVPROC GLH_CORE_NAME(glVertexAttrib4Nbv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4NIVPROC GLH_CORE_NAME(glVertexAttrib4Niv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4NSVPROC GLH_CORE_NAME(glVertexAttrib4Nsv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4NUBPROC GLH_CORE_NAME(glVertexAttrib4Nub) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4NUBVPROC GLH_CORE_NAME(glVertexAttrib4Nubv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4NUIVPROC GLH_CORE_NAME(glVertexAttrib4Nuiv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4NUSVPROC GLH_CORE_NAME(glVertexAttrib4Nusv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4BVPROC GLH_CORE_NAME(glVertexAttrib4bv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4DPROC GLH_CORE_NAME(glVertexAttrib4d) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4DVPROC GLH_CORE_NAME(glVertexAttrib4dv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4FPROC GLH_CORE_NAME(glVertexAttrib4f) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4FVPROC GLH_CORE_NAME(glVertexAttrib4fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4IVPROC GLH_CORE_NAME(glVertexAttrib4iv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4SPROC GLH_CORE_NAME(glVertexAttrib4s) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4SVPROC GLH_CORE_NAME(glVertexAttrib4sv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4UBVPROC GLH_CORE_NAME(glVertexAttrib4ubv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4UIVPROC GLH_CORE_NAME(glVertexAttrib4uiv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4USVPROC GLH_CORE_NAME(glVertexAttrib4usv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBPOINTERPROC GLH_CORE_NAME(glVertexAttribPointer) GLH_INITIALIZER;
#endif

#if defined(GL_VERSION_2_1)
    /* These routines are prefixed by the preprocessor constant
       GLH_CORE_PREFIX to avoid colliding with the OpenGL 1.1 namespace. */
    GLH_EXTERN PFNGLUNIFORMMATRIX2X3FVPROC GLH_CORE_NAME(glUniformMatrix2x3fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORMMATRIX3X2FVPROC GLH_CORE_NAME(glUniformMatrix3x2fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORMMATRIX2X4FVPROC GLH_CORE_NAME(glUniformMatrix2x4fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORMMATRIX4X2FVPROC GLH_CORE_NAME(glUniformMatrix4x2fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORMMATRIX3X4FVPROC GLH_CORE_NAME(glUniformMatrix3x4fv) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORMMATRIX4X3FVPROC GLH_CORE_NAME(glUniformMatrix4x3fv) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_multitexture
    GLH_EXTERN PFNGLACTIVETEXTUREARBPROC GLH_EXT_NAME(glActiveTextureARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCLIENTACTIVETEXTUREARBPROC GLH_EXT_NAME(glClientActiveTextureARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1DARBPROC GLH_EXT_NAME(glMultiTexCoord1dARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1DVARBPROC GLH_EXT_NAME(glMultiTexCoord1dvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1FARBPROC GLH_EXT_NAME(glMultiTexCoord1fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1FVARBPROC GLH_EXT_NAME(glMultiTexCoord1fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1IARBPROC GLH_EXT_NAME(glMultiTexCoord1iARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1IVARBPROC GLH_EXT_NAME(glMultiTexCoord1ivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1SARBPROC GLH_EXT_NAME(glMultiTexCoord1sARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1SVARBPROC GLH_EXT_NAME(glMultiTexCoord1svARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2DARBPROC GLH_EXT_NAME(glMultiTexCoord2dARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2DVARBPROC GLH_EXT_NAME(glMultiTexCoord2dvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2FARBPROC GLH_EXT_NAME(glMultiTexCoord2fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2FVARBPROC GLH_EXT_NAME(glMultiTexCoord2fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2IARBPROC GLH_EXT_NAME(glMultiTexCoord2iARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2IVARBPROC GLH_EXT_NAME(glMultiTexCoord2ivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2SARBPROC GLH_EXT_NAME(glMultiTexCoord2sARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2SVARBPROC GLH_EXT_NAME(glMultiTexCoord2svARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3DARBPROC GLH_EXT_NAME(glMultiTexCoord3dARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3DVARBPROC GLH_EXT_NAME(glMultiTexCoord3dvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3FARBPROC GLH_EXT_NAME(glMultiTexCoord3fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3FVARBPROC GLH_EXT_NAME(glMultiTexCoord3fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3IARBPROC GLH_EXT_NAME(glMultiTexCoord3iARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3IVARBPROC GLH_EXT_NAME(glMultiTexCoord3ivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3SARBPROC GLH_EXT_NAME(glMultiTexCoord3sARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3SVARBPROC GLH_EXT_NAME(glMultiTexCoord3svARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4DARBPROC GLH_EXT_NAME(glMultiTexCoord4dARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4DVARBPROC GLH_EXT_NAME(glMultiTexCoord4dvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4FARBPROC GLH_EXT_NAME(glMultiTexCoord4fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4FVARBPROC GLH_EXT_NAME(glMultiTexCoord4fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4IARBPROC GLH_EXT_NAME(glMultiTexCoord4iARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4IVARBPROC GLH_EXT_NAME(glMultiTexCoord4ivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4SARBPROC GLH_EXT_NAME(glMultiTexCoord4sARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4SVARBPROC GLH_EXT_NAME(glMultiTexCoord4svARB) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_transpose_matrix
    GLH_EXTERN PFNGLLOADTRANSPOSEMATRIXFARBPROC GLH_EXT_NAME(glLoadTransposeMatrixfARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLLOADTRANSPOSEMATRIXDARBPROC GLH_EXT_NAME(glLoadTransposeMatrixdARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTTRANSPOSEMATRIXFARBPROC GLH_EXT_NAME(glMultTransposeMatrixfARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTTRANSPOSEMATRIXDARBPROC GLH_EXT_NAME(glMultTransposeMatrixdARB) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_multisample
    GLH_EXTERN PFNGLSAMPLECOVERAGEARBPROC GLH_EXT_NAME(glSampleCoverageARB) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_texture_env_add
#endif

#ifdef GL_ARB_texture_cube_map
#endif

#ifdef GL_ARB_texture_compression
    GLH_EXTERN PFNGLCOMPRESSEDTEXIMAGE3DARBPROC GLH_EXT_NAME(glCompressedTexImage3DARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXIMAGE2DARBPROC GLH_EXT_NAME(glCompressedTexImage2DARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXIMAGE1DARBPROC GLH_EXT_NAME(glCompressedTexImage1DARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC GLH_EXT_NAME(glCompressedTexSubImage3DARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC GLH_EXT_NAME(glCompressedTexSubImage2DARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC GLH_EXT_NAME(glCompressedTexSubImage1DARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOMPRESSEDTEXIMAGEARBPROC GLH_EXT_NAME(glGetCompressedTexImageARB) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_texture_border_clamp
#endif

#ifdef GL_ARB_point_parameters
    GLH_EXTERN PFNGLPOINTPARAMETERFARBPROC GLH_EXT_NAME(glPointParameterfARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPOINTPARAMETERFVARBPROC GLH_EXT_NAME(glPointParameterfvARB) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_vertex_blend
    GLH_EXTERN PFNGLWEIGHTBVARBPROC GLH_EXT_NAME(glWeightbvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWEIGHTSVARBPROC GLH_EXT_NAME(glWeightsvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWEIGHTIVARBPROC GLH_EXT_NAME(glWeightivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWEIGHTFVARBPROC GLH_EXT_NAME(glWeightfvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWEIGHTDVARBPROC GLH_EXT_NAME(glWeightdvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWEIGHTUBVARBPROC GLH_EXT_NAME(glWeightubvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWEIGHTUSVARBPROC GLH_EXT_NAME(glWeightusvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWEIGHTUIVARBPROC GLH_EXT_NAME(glWeightuivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWEIGHTPOINTERARBPROC GLH_EXT_NAME(glWeightPointerARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXBLENDARBPROC GLH_EXT_NAME(glVertexBlendARB) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_matrix_palette
    GLH_EXTERN PFNGLCURRENTPALETTEMATRIXARBPROC GLH_EXT_NAME(glCurrentPaletteMatrixARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMATRIXINDEXUBVARBPROC GLH_EXT_NAME(glMatrixIndexubvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMATRIXINDEXUSVARBPROC GLH_EXT_NAME(glMatrixIndexusvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMATRIXINDEXUIVARBPROC GLH_EXT_NAME(glMatrixIndexuivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMATRIXINDEXPOINTERARBPROC GLH_EXT_NAME(glMatrixIndexPointerARB) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_texture_env_combine
#endif

#ifdef GL_ARB_texture_env_crossbar
#endif

#ifdef GL_ARB_texture_env_dot3
#endif

#ifdef GL_ARB_texture_mirrored_repeat
#endif

#ifdef GL_ARB_depth_texture
#endif

#ifdef GL_ARB_shadow
#endif

#ifdef GL_ARB_shadow_ambient
#endif

#ifdef GL_ARB_window_pos
    GLH_EXTERN PFNGLWINDOWPOS2DARBPROC GLH_EXT_NAME(glWindowPos2dARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2DVARBPROC GLH_EXT_NAME(glWindowPos2dvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2FARBPROC GLH_EXT_NAME(glWindowPos2fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2FVARBPROC GLH_EXT_NAME(glWindowPos2fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2IARBPROC GLH_EXT_NAME(glWindowPos2iARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2IVARBPROC GLH_EXT_NAME(glWindowPos2ivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2SARBPROC GLH_EXT_NAME(glWindowPos2sARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2SVARBPROC GLH_EXT_NAME(glWindowPos2svARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3DARBPROC GLH_EXT_NAME(glWindowPos3dARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3DVARBPROC GLH_EXT_NAME(glWindowPos3dvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3FARBPROC GLH_EXT_NAME(glWindowPos3fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3FVARBPROC GLH_EXT_NAME(glWindowPos3fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3IARBPROC GLH_EXT_NAME(glWindowPos3iARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3IVARBPROC GLH_EXT_NAME(glWindowPos3ivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3SARBPROC GLH_EXT_NAME(glWindowPos3sARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3SVARBPROC GLH_EXT_NAME(glWindowPos3svARB) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_vertex_program
    GLH_EXTERN PFNGLVERTEXATTRIB1DARBPROC GLH_EXT_NAME(glVertexAttrib1dARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1DVARBPROC GLH_EXT_NAME(glVertexAttrib1dvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1FARBPROC GLH_EXT_NAME(glVertexAttrib1fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1FVARBPROC GLH_EXT_NAME(glVertexAttrib1fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1SARBPROC GLH_EXT_NAME(glVertexAttrib1sARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1SVARBPROC GLH_EXT_NAME(glVertexAttrib1svARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2DARBPROC GLH_EXT_NAME(glVertexAttrib2dARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2DVARBPROC GLH_EXT_NAME(glVertexAttrib2dvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2FARBPROC GLH_EXT_NAME(glVertexAttrib2fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2FVARBPROC GLH_EXT_NAME(glVertexAttrib2fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2SARBPROC GLH_EXT_NAME(glVertexAttrib2sARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2SVARBPROC GLH_EXT_NAME(glVertexAttrib2svARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3DARBPROC GLH_EXT_NAME(glVertexAttrib3dARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3DVARBPROC GLH_EXT_NAME(glVertexAttrib3dvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3FARBPROC GLH_EXT_NAME(glVertexAttrib3fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3FVARBPROC GLH_EXT_NAME(glVertexAttrib3fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3SARBPROC GLH_EXT_NAME(glVertexAttrib3sARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3SVARBPROC GLH_EXT_NAME(glVertexAttrib3svARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4NBVARBPROC GLH_EXT_NAME(glVertexAttrib4NbvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4NIVARBPROC GLH_EXT_NAME(glVertexAttrib4NivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4NSVARBPROC GLH_EXT_NAME(glVertexAttrib4NsvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4NUBARBPROC GLH_EXT_NAME(glVertexAttrib4NubARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4NUBVARBPROC GLH_EXT_NAME(glVertexAttrib4NubvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4NUIVARBPROC GLH_EXT_NAME(glVertexAttrib4NuivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4NUSVARBPROC GLH_EXT_NAME(glVertexAttrib4NusvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4BVARBPROC GLH_EXT_NAME(glVertexAttrib4bvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4DARBPROC GLH_EXT_NAME(glVertexAttrib4dARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4DVARBPROC GLH_EXT_NAME(glVertexAttrib4dvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4FARBPROC GLH_EXT_NAME(glVertexAttrib4fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4FVARBPROC GLH_EXT_NAME(glVertexAttrib4fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4IVARBPROC GLH_EXT_NAME(glVertexAttrib4ivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4SARBPROC GLH_EXT_NAME(glVertexAttrib4sARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4SVARBPROC GLH_EXT_NAME(glVertexAttrib4svARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4UBVARBPROC GLH_EXT_NAME(glVertexAttrib4ubvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4UIVARBPROC GLH_EXT_NAME(glVertexAttrib4uivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4USVARBPROC GLH_EXT_NAME(glVertexAttrib4usvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBPOINTERARBPROC GLH_EXT_NAME(glVertexAttribPointerARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLENABLEVERTEXATTRIBARRAYARBPROC GLH_EXT_NAME(glEnableVertexAttribArrayARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDISABLEVERTEXATTRIBARRAYARBPROC GLH_EXT_NAME(glDisableVertexAttribArrayARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMSTRINGARBPROC GLH_EXT_NAME(glProgramStringARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDPROGRAMARBPROC GLH_EXT_NAME(glBindProgramARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEPROGRAMSARBPROC GLH_EXT_NAME(glDeleteProgramsARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGENPROGRAMSARBPROC GLH_EXT_NAME(glGenProgramsARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMENVPARAMETER4DARBPROC GLH_EXT_NAME(glProgramEnvParameter4dARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMENVPARAMETER4DVARBPROC GLH_EXT_NAME(glProgramEnvParameter4dvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMENVPARAMETER4FARBPROC GLH_EXT_NAME(glProgramEnvParameter4fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMENVPARAMETER4FVARBPROC GLH_EXT_NAME(glProgramEnvParameter4fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMLOCALPARAMETER4DARBPROC GLH_EXT_NAME(glProgramLocalParameter4dARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMLOCALPARAMETER4DVARBPROC GLH_EXT_NAME(glProgramLocalParameter4dvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMLOCALPARAMETER4FARBPROC GLH_EXT_NAME(glProgramLocalParameter4fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMLOCALPARAMETER4FVARBPROC GLH_EXT_NAME(glProgramLocalParameter4fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMENVPARAMETERDVARBPROC GLH_EXT_NAME(glGetProgramEnvParameterdvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMENVPARAMETERFVARBPROC GLH_EXT_NAME(glGetProgramEnvParameterfvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC GLH_EXT_NAME(glGetProgramLocalParameterdvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC GLH_EXT_NAME(glGetProgramLocalParameterfvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMIVARBPROC GLH_EXT_NAME(glGetProgramivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMSTRINGARBPROC GLH_EXT_NAME(glGetProgramStringARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBDVARBPROC GLH_EXT_NAME(glGetVertexAttribdvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBFVARBPROC GLH_EXT_NAME(glGetVertexAttribfvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBIVARBPROC GLH_EXT_NAME(glGetVertexAttribivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBPOINTERVARBPROC GLH_EXT_NAME(glGetVertexAttribPointervARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISPROGRAMARBPROC GLH_EXT_NAME(glIsProgramARB) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_fragment_program
#endif

#ifdef GL_ARB_vertex_buffer_object
    GLH_EXTERN PFNGLBINDBUFFERARBPROC GLH_EXT_NAME(glBindBufferARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEBUFFERSARBPROC GLH_EXT_NAME(glDeleteBuffersARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGENBUFFERSARBPROC GLH_EXT_NAME(glGenBuffersARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISBUFFERARBPROC GLH_EXT_NAME(glIsBufferARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBUFFERDATAARBPROC GLH_EXT_NAME(glBufferDataARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBUFFERSUBDATAARBPROC GLH_EXT_NAME(glBufferSubDataARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETBUFFERSUBDATAARBPROC GLH_EXT_NAME(glGetBufferSubDataARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMAPBUFFERARBPROC GLH_EXT_NAME(glMapBufferARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNMAPBUFFERARBPROC GLH_EXT_NAME(glUnmapBufferARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETBUFFERPARAMETERIVARBPROC GLH_EXT_NAME(glGetBufferParameterivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETBUFFERPOINTERVARBPROC GLH_EXT_NAME(glGetBufferPointervARB) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_occlusion_query
    GLH_EXTERN PFNGLGENQUERIESARBPROC GLH_EXT_NAME(glGenQueriesARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEQUERIESARBPROC GLH_EXT_NAME(glDeleteQueriesARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISQUERYARBPROC GLH_EXT_NAME(glIsQueryARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBEGINQUERYARBPROC GLH_EXT_NAME(glBeginQueryARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLENDQUERYARBPROC GLH_EXT_NAME(glEndQueryARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETQUERYIVARBPROC GLH_EXT_NAME(glGetQueryivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETQUERYOBJECTIVARBPROC GLH_EXT_NAME(glGetQueryObjectivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETQUERYOBJECTUIVARBPROC GLH_EXT_NAME(glGetQueryObjectuivARB) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_shader_objects
    GLH_EXTERN PFNGLDELETEOBJECTARBPROC GLH_EXT_NAME(glDeleteObjectARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETHANDLEARBPROC GLH_EXT_NAME(glGetHandleARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDETACHOBJECTARBPROC GLH_EXT_NAME(glDetachObjectARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCREATESHADEROBJECTARBPROC GLH_EXT_NAME(glCreateShaderObjectARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSHADERSOURCEARBPROC GLH_EXT_NAME(glShaderSourceARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMPILESHADERARBPROC GLH_EXT_NAME(glCompileShaderARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCREATEPROGRAMOBJECTARBPROC GLH_EXT_NAME(glCreateProgramObjectARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLATTACHOBJECTARBPROC GLH_EXT_NAME(glAttachObjectARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLLINKPROGRAMARBPROC GLH_EXT_NAME(glLinkProgramARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUSEPROGRAMOBJECTARBPROC GLH_EXT_NAME(glUseProgramObjectARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVALIDATEPROGRAMARBPROC GLH_EXT_NAME(glValidateProgramARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM1FARBPROC GLH_EXT_NAME(glUniform1fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM2FARBPROC GLH_EXT_NAME(glUniform2fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM3FARBPROC GLH_EXT_NAME(glUniform3fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM4FARBPROC GLH_EXT_NAME(glUniform4fARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM1IARBPROC GLH_EXT_NAME(glUniform1iARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM2IARBPROC GLH_EXT_NAME(glUniform2iARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM3IARBPROC GLH_EXT_NAME(glUniform3iARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM4IARBPROC GLH_EXT_NAME(glUniform4iARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM1FVARBPROC GLH_EXT_NAME(glUniform1fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM2FVARBPROC GLH_EXT_NAME(glUniform2fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM3FVARBPROC GLH_EXT_NAME(glUniform3fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM4FVARBPROC GLH_EXT_NAME(glUniform4fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM1IVARBPROC GLH_EXT_NAME(glUniform1ivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM2IVARBPROC GLH_EXT_NAME(glUniform2ivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM3IVARBPROC GLH_EXT_NAME(glUniform3ivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM4IVARBPROC GLH_EXT_NAME(glUniform4ivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORMMATRIX2FVARBPROC GLH_EXT_NAME(glUniformMatrix2fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORMMATRIX3FVARBPROC GLH_EXT_NAME(glUniformMatrix3fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORMMATRIX4FVARBPROC GLH_EXT_NAME(glUniformMatrix4fvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETOBJECTPARAMETERFVARBPROC GLH_EXT_NAME(glGetObjectParameterfvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETOBJECTPARAMETERIVARBPROC GLH_EXT_NAME(glGetObjectParameterivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETINFOLOGARBPROC GLH_EXT_NAME(glGetInfoLogARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETATTACHEDOBJECTSARBPROC GLH_EXT_NAME(glGetAttachedObjectsARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETUNIFORMLOCATIONARBPROC GLH_EXT_NAME(glGetUniformLocationARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETACTIVEUNIFORMARBPROC GLH_EXT_NAME(glGetActiveUniformARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETUNIFORMFVARBPROC GLH_EXT_NAME(glGetUniformfvARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETUNIFORMIVARBPROC GLH_EXT_NAME(glGetUniformivARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETSHADERSOURCEARBPROC GLH_EXT_NAME(glGetShaderSourceARB) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_vertex_shader
    GLH_EXTERN PFNGLBINDATTRIBLOCATIONARBPROC GLH_EXT_NAME(glBindAttribLocationARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETACTIVEATTRIBARBPROC GLH_EXT_NAME(glGetActiveAttribARB) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETATTRIBLOCATIONARBPROC GLH_EXT_NAME(glGetAttribLocationARB) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_fragment_shader
#endif

#ifdef GL_ARB_shading_language_100
#endif

#ifdef GL_ARB_texture_non_power_of_two
#endif

#ifdef GL_ARB_point_sprite
#endif

#ifdef GL_ARB_fragment_program_shadow
#endif

#ifdef GL_ARB_draw_buffers
    GLH_EXTERN PFNGLDRAWBUFFERSARBPROC GLH_EXT_NAME(glDrawBuffersARB) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_texture_rectangle
#endif

#ifdef GL_ARB_color_buffer_float
    GLH_EXTERN PFNGLCLAMPCOLORARBPROC GLH_EXT_NAME(glClampColorARB) GLH_INITIALIZER;
#endif

#ifdef GL_ARB_half_float_pixel
#endif

#ifdef GL_ARB_texture_float
#endif

#ifdef GL_ARB_pixel_buffer_object
#endif

#ifdef GL_EXT_abgr
#endif

#ifdef GL_EXT_blend_color
    GLH_EXTERN PFNGLBLENDCOLOREXTPROC GLH_EXT_NAME(glBlendColorEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_polygon_offset
    GLH_EXTERN PFNGLPOLYGONOFFSETEXTPROC GLH_EXT_NAME(glPolygonOffsetEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_texture
#endif

#ifdef GL_EXT_texture3D
    GLH_EXTERN PFNGLTEXIMAGE3DEXTPROC GLH_EXT_NAME(glTexImage3DEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXSUBIMAGE3DEXTPROC GLH_EXT_NAME(glTexSubImage3DEXT) GLH_INITIALIZER;
#endif

#ifdef GL_SGIS_texture_filter4
    GLH_EXTERN PFNGLGETTEXFILTERFUNCSGISPROC GLH_EXT_NAME(glGetTexFilterFuncSGIS) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXFILTERFUNCSGISPROC GLH_EXT_NAME(glTexFilterFuncSGIS) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_subtexture
    GLH_EXTERN PFNGLTEXSUBIMAGE1DEXTPROC GLH_EXT_NAME(glTexSubImage1DEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXSUBIMAGE2DEXTPROC GLH_EXT_NAME(glTexSubImage2DEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_copy_texture
    GLH_EXTERN PFNGLCOPYTEXIMAGE1DEXTPROC GLH_EXT_NAME(glCopyTexImage1DEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOPYTEXIMAGE2DEXTPROC GLH_EXT_NAME(glCopyTexImage2DEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOPYTEXSUBIMAGE1DEXTPROC GLH_EXT_NAME(glCopyTexSubImage1DEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOPYTEXSUBIMAGE2DEXTPROC GLH_EXT_NAME(glCopyTexSubImage2DEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOPYTEXSUBIMAGE3DEXTPROC GLH_EXT_NAME(glCopyTexSubImage3DEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_histogram
    GLH_EXTERN PFNGLGETHISTOGRAMEXTPROC GLH_EXT_NAME(glGetHistogramEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETHISTOGRAMPARAMETERFVEXTPROC GLH_EXT_NAME(glGetHistogramParameterfvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETHISTOGRAMPARAMETERIVEXTPROC GLH_EXT_NAME(glGetHistogramParameterivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMINMAXEXTPROC GLH_EXT_NAME(glGetMinmaxEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMINMAXPARAMETERFVEXTPROC GLH_EXT_NAME(glGetMinmaxParameterfvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMINMAXPARAMETERIVEXTPROC GLH_EXT_NAME(glGetMinmaxParameterivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLHISTOGRAMEXTPROC GLH_EXT_NAME(glHistogramEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMINMAXEXTPROC GLH_EXT_NAME(glMinmaxEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLRESETHISTOGRAMEXTPROC GLH_EXT_NAME(glResetHistogramEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLRESETMINMAXEXTPROC GLH_EXT_NAME(glResetMinmaxEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_convolution
    GLH_EXTERN PFNGLCONVOLUTIONFILTER1DEXTPROC GLH_EXT_NAME(glConvolutionFilter1DEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCONVOLUTIONFILTER2DEXTPROC GLH_EXT_NAME(glConvolutionFilter2DEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCONVOLUTIONPARAMETERFEXTPROC GLH_EXT_NAME(glConvolutionParameterfEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCONVOLUTIONPARAMETERFVEXTPROC GLH_EXT_NAME(glConvolutionParameterfvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCONVOLUTIONPARAMETERIEXTPROC GLH_EXT_NAME(glConvolutionParameteriEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCONVOLUTIONPARAMETERIVEXTPROC GLH_EXT_NAME(glConvolutionParameterivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC GLH_EXT_NAME(glCopyConvolutionFilter1DEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC GLH_EXT_NAME(glCopyConvolutionFilter2DEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCONVOLUTIONFILTEREXTPROC GLH_EXT_NAME(glGetConvolutionFilterEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC GLH_EXT_NAME(glGetConvolutionParameterfvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC GLH_EXT_NAME(glGetConvolutionParameterivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETSEPARABLEFILTEREXTPROC GLH_EXT_NAME(glGetSeparableFilterEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSEPARABLEFILTER2DEXTPROC GLH_EXT_NAME(glSeparableFilter2DEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_color_matrix
#endif

#ifdef GL_SGI_color_table
    GLH_EXTERN PFNGLCOLORTABLESGIPROC GLH_EXT_NAME(glColorTableSGI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORTABLEPARAMETERFVSGIPROC GLH_EXT_NAME(glColorTableParameterfvSGI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORTABLEPARAMETERIVSGIPROC GLH_EXT_NAME(glColorTableParameterivSGI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOPYCOLORTABLESGIPROC GLH_EXT_NAME(glCopyColorTableSGI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOLORTABLESGIPROC GLH_EXT_NAME(glGetColorTableSGI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOLORTABLEPARAMETERFVSGIPROC GLH_EXT_NAME(glGetColorTableParameterfvSGI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOLORTABLEPARAMETERIVSGIPROC GLH_EXT_NAME(glGetColorTableParameterivSGI) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_pixel_texture
    GLH_EXTERN PFNGLPIXELTEXGENSGIXPROC GLH_EXT_NAME(glPixelTexGenSGIX) GLH_INITIALIZER;
#endif

#ifdef GL_SGIS_pixel_texture
    GLH_EXTERN PFNGLPIXELTEXGENPARAMETERISGISPROC GLH_EXT_NAME(glPixelTexGenParameteriSGIS) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPIXELTEXGENPARAMETERIVSGISPROC GLH_EXT_NAME(glPixelTexGenParameterivSGIS) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPIXELTEXGENPARAMETERFSGISPROC GLH_EXT_NAME(glPixelTexGenParameterfSGIS) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPIXELTEXGENPARAMETERFVSGISPROC GLH_EXT_NAME(glPixelTexGenParameterfvSGIS) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC GLH_EXT_NAME(glGetPixelTexGenParameterivSGIS) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC GLH_EXT_NAME(glGetPixelTexGenParameterfvSGIS) GLH_INITIALIZER;
#endif

#ifdef GL_SGIS_texture4D
    GLH_EXTERN PFNGLTEXIMAGE4DSGISPROC GLH_EXT_NAME(glTexImage4DSGIS) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXSUBIMAGE4DSGISPROC GLH_EXT_NAME(glTexSubImage4DSGIS) GLH_INITIALIZER;
#endif

#ifdef GL_SGI_texture_color_table
#endif

#ifdef GL_EXT_cmyka
#endif

#ifdef GL_EXT_texture_object
    GLH_EXTERN PFNGLARETEXTURESRESIDENTEXTPROC GLH_EXT_NAME(glAreTexturesResidentEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDTEXTUREEXTPROC GLH_EXT_NAME(glBindTextureEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETETEXTURESEXTPROC GLH_EXT_NAME(glDeleteTexturesEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGENTEXTURESEXTPROC GLH_EXT_NAME(glGenTexturesEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISTEXTUREEXTPROC GLH_EXT_NAME(glIsTextureEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPRIORITIZETEXTURESEXTPROC GLH_EXT_NAME(glPrioritizeTexturesEXT) GLH_INITIALIZER;
#endif

#ifdef GL_SGIS_detail_texture
    GLH_EXTERN PFNGLDETAILTEXFUNCSGISPROC GLH_EXT_NAME(glDetailTexFuncSGIS) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETDETAILTEXFUNCSGISPROC GLH_EXT_NAME(glGetDetailTexFuncSGIS) GLH_INITIALIZER;
#endif

#ifdef GL_SGIS_sharpen_texture
    GLH_EXTERN PFNGLSHARPENTEXFUNCSGISPROC GLH_EXT_NAME(glSharpenTexFuncSGIS) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETSHARPENTEXFUNCSGISPROC GLH_EXT_NAME(glGetSharpenTexFuncSGIS) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_packed_pixels
#endif

#ifdef GL_SGIS_texture_lod
#endif

#ifdef GL_SGIS_multisample
    GLH_EXTERN PFNGLSAMPLEMASKSGISPROC GLH_EXT_NAME(glSampleMaskSGIS) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSAMPLEPATTERNSGISPROC GLH_EXT_NAME(glSamplePatternSGIS) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_rescale_normal
#endif

#ifdef GL_EXT_vertex_array
    GLH_EXTERN PFNGLARRAYELEMENTEXTPROC GLH_EXT_NAME(glArrayElementEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORPOINTEREXTPROC GLH_EXT_NAME(glColorPointerEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDRAWARRAYSEXTPROC GLH_EXT_NAME(glDrawArraysEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLEDGEFLAGPOINTEREXTPROC GLH_EXT_NAME(glEdgeFlagPointerEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPOINTERVEXTPROC GLH_EXT_NAME(glGetPointervEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLINDEXPOINTEREXTPROC GLH_EXT_NAME(glIndexPointerEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMALPOINTEREXTPROC GLH_EXT_NAME(glNormalPointerEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORDPOINTEREXTPROC GLH_EXT_NAME(glTexCoordPointerEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXPOINTEREXTPROC GLH_EXT_NAME(glVertexPointerEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_misc_attribute
#endif

#ifdef GL_SGIS_generate_mipmap
#endif

#ifdef GL_SGIX_clipmap
#endif

#ifdef GL_SGIX_shadow
#endif

#ifdef GL_SGIS_texture_edge_clamp
#endif

#ifdef GL_SGIS_texture_border_clamp
#endif

#ifdef GL_EXT_blend_minmax
    GLH_EXTERN PFNGLBLENDEQUATIONEXTPROC GLH_EXT_NAME(glBlendEquationEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_blend_subtract
#endif

#ifdef GL_EXT_blend_logic_op
#endif

#ifdef GL_SGIX_interlace
#endif

#ifdef GL_SGIX_pixel_tiles
#endif

#ifdef GL_SGIX_texture_select
#endif

#ifdef GL_SGIX_sprite
    GLH_EXTERN PFNGLSPRITEPARAMETERFSGIXPROC GLH_EXT_NAME(glSpriteParameterfSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSPRITEPARAMETERFVSGIXPROC GLH_EXT_NAME(glSpriteParameterfvSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSPRITEPARAMETERISGIXPROC GLH_EXT_NAME(glSpriteParameteriSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSPRITEPARAMETERIVSGIXPROC GLH_EXT_NAME(glSpriteParameterivSGIX) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_texture_multi_buffer
#endif

#ifdef GL_EXT_point_parameters
    GLH_EXTERN PFNGLPOINTPARAMETERFEXTPROC GLH_EXT_NAME(glPointParameterfEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPOINTPARAMETERFVEXTPROC GLH_EXT_NAME(glPointParameterfvEXT) GLH_INITIALIZER;
#endif

#ifdef GL_SGIS_point_parameters
    GLH_EXTERN PFNGLPOINTPARAMETERFSGISPROC GLH_EXT_NAME(glPointParameterfSGIS) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPOINTPARAMETERFVSGISPROC GLH_EXT_NAME(glPointParameterfvSGIS) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_instruments
    GLH_EXTERN PFNGLGETINSTRUMENTSSGIXPROC GLH_EXT_NAME(glGetInstrumentsSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLINSTRUMENTSBUFFERSGIXPROC GLH_EXT_NAME(glInstrumentsBufferSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPOLLINSTRUMENTSSGIXPROC GLH_EXT_NAME(glPollInstrumentsSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREADINSTRUMENTSSGIXPROC GLH_EXT_NAME(glReadInstrumentsSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSTARTINSTRUMENTSSGIXPROC GLH_EXT_NAME(glStartInstrumentsSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSTOPINSTRUMENTSSGIXPROC GLH_EXT_NAME(glStopInstrumentsSGIX) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_texture_scale_bias
#endif

#ifdef GL_SGIX_framezoom
    GLH_EXTERN PFNGLFRAMEZOOMSGIXPROC GLH_EXT_NAME(glFrameZoomSGIX) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_tag_sample_buffer
    GLH_EXTERN PFNGLTAGSAMPLEBUFFERSGIXPROC GLH_EXT_NAME(glTagSampleBufferSGIX) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_polynomial_ffd
    GLH_EXTERN PFNGLDEFORMATIONMAP3DSGIXPROC GLH_EXT_NAME(glDeformationMap3dSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDEFORMATIONMAP3FSGIXPROC GLH_EXT_NAME(glDeformationMap3fSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDEFORMSGIXPROC GLH_EXT_NAME(glDeformSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC GLH_EXT_NAME(glLoadIdentityDeformationMapSGIX) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_reference_plane
    GLH_EXTERN PFNGLREFERENCEPLANESGIXPROC GLH_EXT_NAME(glReferencePlaneSGIX) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_flush_raster
    GLH_EXTERN PFNGLFLUSHRASTERSGIXPROC GLH_EXT_NAME(glFlushRasterSGIX) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_depth_texture
#endif

#ifdef GL_SGIS_fog_function
    GLH_EXTERN PFNGLFOGFUNCSGISPROC GLH_EXT_NAME(glFogFuncSGIS) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETFOGFUNCSGISPROC GLH_EXT_NAME(glGetFogFuncSGIS) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_fog_offset
#endif

#ifdef GL_HP_image_transform
    GLH_EXTERN PFNGLIMAGETRANSFORMPARAMETERIHPPROC GLH_EXT_NAME(glImageTransformParameteriHP) GLH_INITIALIZER;
    GLH_EXTERN PFNGLIMAGETRANSFORMPARAMETERFHPPROC GLH_EXT_NAME(glImageTransformParameterfHP) GLH_INITIALIZER;
    GLH_EXTERN PFNGLIMAGETRANSFORMPARAMETERIVHPPROC GLH_EXT_NAME(glImageTransformParameterivHP) GLH_INITIALIZER;
    GLH_EXTERN PFNGLIMAGETRANSFORMPARAMETERFVHPPROC GLH_EXT_NAME(glImageTransformParameterfvHP) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC GLH_EXT_NAME(glGetImageTransformParameterivHP) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC GLH_EXT_NAME(glGetImageTransformParameterfvHP) GLH_INITIALIZER;
#endif

#ifdef GL_HP_convolution_border_modes
#endif

#ifdef GL_SGIX_texture_add_env
#endif

#ifdef GL_EXT_color_subtable
    GLH_EXTERN PFNGLCOLORSUBTABLEEXTPROC GLH_EXT_NAME(glColorSubTableEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOPYCOLORSUBTABLEEXTPROC GLH_EXT_NAME(glCopyColorSubTableEXT) GLH_INITIALIZER;
#endif

#ifdef GL_PGI_vertex_hints
#endif

#ifdef GL_PGI_misc_hints
    GLH_EXTERN PFNGLHINTPGIPROC GLH_EXT_NAME(glHintPGI) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_paletted_texture
    GLH_EXTERN PFNGLCOLORTABLEEXTPROC GLH_EXT_NAME(glColorTableEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOLORTABLEEXTPROC GLH_EXT_NAME(glGetColorTableEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOLORTABLEPARAMETERIVEXTPROC GLH_EXT_NAME(glGetColorTableParameterivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOLORTABLEPARAMETERFVEXTPROC GLH_EXT_NAME(glGetColorTableParameterfvEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_clip_volume_hint
#endif

#ifdef GL_SGIX_list_priority
    GLH_EXTERN PFNGLGETLISTPARAMETERFVSGIXPROC GLH_EXT_NAME(glGetListParameterfvSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETLISTPARAMETERIVSGIXPROC GLH_EXT_NAME(glGetListParameterivSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLLISTPARAMETERFSGIXPROC GLH_EXT_NAME(glListParameterfSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLLISTPARAMETERFVSGIXPROC GLH_EXT_NAME(glListParameterfvSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLLISTPARAMETERISGIXPROC GLH_EXT_NAME(glListParameteriSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLLISTPARAMETERIVSGIXPROC GLH_EXT_NAME(glListParameterivSGIX) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_ir_instrument1
#endif

#ifdef GL_SGIX_calligraphic_fragment
#endif

#ifdef GL_SGIX_texture_lod_bias
#endif

#ifdef GL_SGIX_shadow_ambient
#endif

#ifdef GL_EXT_index_texture
#endif

#ifdef GL_EXT_index_material
    GLH_EXTERN PFNGLINDEXMATERIALEXTPROC GLH_EXT_NAME(glIndexMaterialEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_index_func
    GLH_EXTERN PFNGLINDEXFUNCEXTPROC GLH_EXT_NAME(glIndexFuncEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_index_array_formats
#endif

#ifdef GL_EXT_compiled_vertex_array
    GLH_EXTERN PFNGLLOCKARRAYSEXTPROC GLH_EXT_NAME(glLockArraysEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNLOCKARRAYSEXTPROC GLH_EXT_NAME(glUnlockArraysEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_cull_vertex
    GLH_EXTERN PFNGLCULLPARAMETERDVEXTPROC GLH_EXT_NAME(glCullParameterdvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCULLPARAMETERFVEXTPROC GLH_EXT_NAME(glCullParameterfvEXT) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_ycrcb
#endif

#ifdef GL_SGIX_fragment_lighting
    GLH_EXTERN PFNGLFRAGMENTCOLORMATERIALSGIXPROC GLH_EXT_NAME(glFragmentColorMaterialSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAGMENTLIGHTFSGIXPROC GLH_EXT_NAME(glFragmentLightfSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAGMENTLIGHTFVSGIXPROC GLH_EXT_NAME(glFragmentLightfvSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAGMENTLIGHTISGIXPROC GLH_EXT_NAME(glFragmentLightiSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAGMENTLIGHTIVSGIXPROC GLH_EXT_NAME(glFragmentLightivSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAGMENTLIGHTMODELFSGIXPROC GLH_EXT_NAME(glFragmentLightModelfSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAGMENTLIGHTMODELFVSGIXPROC GLH_EXT_NAME(glFragmentLightModelfvSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAGMENTLIGHTMODELISGIXPROC GLH_EXT_NAME(glFragmentLightModeliSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAGMENTLIGHTMODELIVSGIXPROC GLH_EXT_NAME(glFragmentLightModelivSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAGMENTMATERIALFSGIXPROC GLH_EXT_NAME(glFragmentMaterialfSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAGMENTMATERIALFVSGIXPROC GLH_EXT_NAME(glFragmentMaterialfvSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAGMENTMATERIALISGIXPROC GLH_EXT_NAME(glFragmentMaterialiSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAGMENTMATERIALIVSGIXPROC GLH_EXT_NAME(glFragmentMaterialivSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETFRAGMENTLIGHTFVSGIXPROC GLH_EXT_NAME(glGetFragmentLightfvSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETFRAGMENTLIGHTIVSGIXPROC GLH_EXT_NAME(glGetFragmentLightivSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETFRAGMENTMATERIALFVSGIXPROC GLH_EXT_NAME(glGetFragmentMaterialfvSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETFRAGMENTMATERIALIVSGIXPROC GLH_EXT_NAME(glGetFragmentMaterialivSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLLIGHTENVISGIXPROC GLH_EXT_NAME(glLightEnviSGIX) GLH_INITIALIZER;
#endif

#ifdef GL_IBM_rasterpos_clip
#endif

#ifdef GL_HP_texture_lighting
#endif

#ifdef GL_EXT_draw_range_elements
    GLH_EXTERN PFNGLDRAWRANGEELEMENTSEXTPROC GLH_EXT_NAME(glDrawRangeElementsEXT) GLH_INITIALIZER;
#endif

#ifdef GL_WIN_phong_shading
#endif

#ifdef GL_WIN_specular_fog
#endif

#ifdef GL_EXT_light_texture
    GLH_EXTERN PFNGLAPPLYTEXTUREEXTPROC GLH_EXT_NAME(glApplyTextureEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXTURELIGHTEXTPROC GLH_EXT_NAME(glTextureLightEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXTUREMATERIALEXTPROC GLH_EXT_NAME(glTextureMaterialEXT) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_blend_alpha_minmax
#endif

#ifdef GL_EXT_bgra
#endif

#ifdef GL_SGIX_async
    GLH_EXTERN PFNGLASYNCMARKERSGIXPROC GLH_EXT_NAME(glAsyncMarkerSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFINISHASYNCSGIXPROC GLH_EXT_NAME(glFinishAsyncSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPOLLASYNCSGIXPROC GLH_EXT_NAME(glPollAsyncSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGENASYNCMARKERSSGIXPROC GLH_EXT_NAME(glGenAsyncMarkersSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEASYNCMARKERSSGIXPROC GLH_EXT_NAME(glDeleteAsyncMarkersSGIX) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISASYNCMARKERSGIXPROC GLH_EXT_NAME(glIsAsyncMarkerSGIX) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_async_pixel
#endif

#ifdef GL_SGIX_async_histogram
#endif

#ifdef GL_INTEL_parallel_arrays
    GLH_EXTERN PFNGLVERTEXPOINTERVINTELPROC GLH_EXT_NAME(glVertexPointervINTEL) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMALPOINTERVINTELPROC GLH_EXT_NAME(glNormalPointervINTEL) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORPOINTERVINTELPROC GLH_EXT_NAME(glColorPointervINTEL) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORDPOINTERVINTELPROC GLH_EXT_NAME(glTexCoordPointervINTEL) GLH_INITIALIZER;
#endif

#ifdef GL_HP_occlusion_test
#endif

#ifdef GL_EXT_pixel_transform
    GLH_EXTERN PFNGLPIXELTRANSFORMPARAMETERIEXTPROC GLH_EXT_NAME(glPixelTransformParameteriEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPIXELTRANSFORMPARAMETERFEXTPROC GLH_EXT_NAME(glPixelTransformParameterfEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC GLH_EXT_NAME(glPixelTransformParameterivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC GLH_EXT_NAME(glPixelTransformParameterfvEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_pixel_transform_color_table
#endif

#ifdef GL_EXT_shared_texture_palette
#endif

#ifdef GL_EXT_separate_specular_color
#endif

#ifdef GL_EXT_secondary_color
    GLH_EXTERN PFNGLSECONDARYCOLOR3BEXTPROC GLH_EXT_NAME(glSecondaryColor3bEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3BVEXTPROC GLH_EXT_NAME(glSecondaryColor3bvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3DEXTPROC GLH_EXT_NAME(glSecondaryColor3dEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3DVEXTPROC GLH_EXT_NAME(glSecondaryColor3dvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3FEXTPROC GLH_EXT_NAME(glSecondaryColor3fEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3FVEXTPROC GLH_EXT_NAME(glSecondaryColor3fvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3IEXTPROC GLH_EXT_NAME(glSecondaryColor3iEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3IVEXTPROC GLH_EXT_NAME(glSecondaryColor3ivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3SEXTPROC GLH_EXT_NAME(glSecondaryColor3sEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3SVEXTPROC GLH_EXT_NAME(glSecondaryColor3svEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UBEXTPROC GLH_EXT_NAME(glSecondaryColor3ubEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UBVEXTPROC GLH_EXT_NAME(glSecondaryColor3ubvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UIEXTPROC GLH_EXT_NAME(glSecondaryColor3uiEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3UIVEXTPROC GLH_EXT_NAME(glSecondaryColor3uivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3USEXTPROC GLH_EXT_NAME(glSecondaryColor3usEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3USVEXTPROC GLH_EXT_NAME(glSecondaryColor3usvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLORPOINTEREXTPROC GLH_EXT_NAME(glSecondaryColorPointerEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_texture_perturb_normal
    GLH_EXTERN PFNGLTEXTURENORMALEXTPROC GLH_EXT_NAME(glTextureNormalEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_multi_draw_arrays
    GLH_EXTERN PFNGLMULTIDRAWARRAYSEXTPROC GLH_EXT_NAME(glMultiDrawArraysEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTIDRAWELEMENTSEXTPROC GLH_EXT_NAME(glMultiDrawElementsEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_fog_coord
    GLH_EXTERN PFNGLFOGCOORDFEXTPROC GLH_EXT_NAME(glFogCoordfEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDFVEXTPROC GLH_EXT_NAME(glFogCoordfvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDDEXTPROC GLH_EXT_NAME(glFogCoorddEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDDVEXTPROC GLH_EXT_NAME(glFogCoorddvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDPOINTEREXTPROC GLH_EXT_NAME(glFogCoordPointerEXT) GLH_INITIALIZER;
#endif

#ifdef GL_REND_screen_coordinates
#endif

#ifdef GL_EXT_coordinate_frame
    GLH_EXTERN PFNGLTANGENT3BEXTPROC GLH_EXT_NAME(glTangent3bEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTANGENT3BVEXTPROC GLH_EXT_NAME(glTangent3bvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTANGENT3DEXTPROC GLH_EXT_NAME(glTangent3dEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTANGENT3DVEXTPROC GLH_EXT_NAME(glTangent3dvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTANGENT3FEXTPROC GLH_EXT_NAME(glTangent3fEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTANGENT3FVEXTPROC GLH_EXT_NAME(glTangent3fvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTANGENT3IEXTPROC GLH_EXT_NAME(glTangent3iEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTANGENT3IVEXTPROC GLH_EXT_NAME(glTangent3ivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTANGENT3SEXTPROC GLH_EXT_NAME(glTangent3sEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTANGENT3SVEXTPROC GLH_EXT_NAME(glTangent3svEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINORMAL3BEXTPROC GLH_EXT_NAME(glBinormal3bEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINORMAL3BVEXTPROC GLH_EXT_NAME(glBinormal3bvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINORMAL3DEXTPROC GLH_EXT_NAME(glBinormal3dEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINORMAL3DVEXTPROC GLH_EXT_NAME(glBinormal3dvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINORMAL3FEXTPROC GLH_EXT_NAME(glBinormal3fEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINORMAL3FVEXTPROC GLH_EXT_NAME(glBinormal3fvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINORMAL3IEXTPROC GLH_EXT_NAME(glBinormal3iEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINORMAL3IVEXTPROC GLH_EXT_NAME(glBinormal3ivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINORMAL3SEXTPROC GLH_EXT_NAME(glBinormal3sEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINORMAL3SVEXTPROC GLH_EXT_NAME(glBinormal3svEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTANGENTPOINTEREXTPROC GLH_EXT_NAME(glTangentPointerEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINORMALPOINTEREXTPROC GLH_EXT_NAME(glBinormalPointerEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_texture_env_combine
#endif

#ifdef GL_APPLE_specular_vector
#endif

#ifdef GL_APPLE_transform_hint
#endif

#ifdef GL_SGIX_fog_scale
#endif

#ifdef GL_SUNX_constant_data
    GLH_EXTERN PFNGLFINISHTEXTURESUNXPROC GLH_EXT_NAME(glFinishTextureSUNX) GLH_INITIALIZER;
#endif

#ifdef GL_SUN_global_alpha
    GLH_EXTERN PFNGLGLOBALALPHAFACTORBSUNPROC GLH_EXT_NAME(glGlobalAlphaFactorbSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGLOBALALPHAFACTORSSUNPROC GLH_EXT_NAME(glGlobalAlphaFactorsSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGLOBALALPHAFACTORISUNPROC GLH_EXT_NAME(glGlobalAlphaFactoriSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGLOBALALPHAFACTORFSUNPROC GLH_EXT_NAME(glGlobalAlphaFactorfSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGLOBALALPHAFACTORDSUNPROC GLH_EXT_NAME(glGlobalAlphaFactordSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGLOBALALPHAFACTORUBSUNPROC GLH_EXT_NAME(glGlobalAlphaFactorubSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGLOBALALPHAFACTORUSSUNPROC GLH_EXT_NAME(glGlobalAlphaFactorusSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGLOBALALPHAFACTORUISUNPROC GLH_EXT_NAME(glGlobalAlphaFactoruiSUN) GLH_INITIALIZER;
#endif

#ifdef GL_SUN_triangle_list
    GLH_EXTERN PFNGLREPLACEMENTCODEUISUNPROC GLH_EXT_NAME(glReplacementCodeuiSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUSSUNPROC GLH_EXT_NAME(glReplacementCodeusSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUBSUNPROC GLH_EXT_NAME(glReplacementCodeubSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUIVSUNPROC GLH_EXT_NAME(glReplacementCodeuivSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUSVSUNPROC GLH_EXT_NAME(glReplacementCodeusvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUBVSUNPROC GLH_EXT_NAME(glReplacementCodeubvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEPOINTERSUNPROC GLH_EXT_NAME(glReplacementCodePointerSUN) GLH_INITIALIZER;
#endif

#ifdef GL_SUN_vertex
    GLH_EXTERN PFNGLCOLOR4UBVERTEX2FSUNPROC GLH_EXT_NAME(glColor4ubVertex2fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLOR4UBVERTEX2FVSUNPROC GLH_EXT_NAME(glColor4ubVertex2fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLOR4UBVERTEX3FSUNPROC GLH_EXT_NAME(glColor4ubVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLOR4UBVERTEX3FVSUNPROC GLH_EXT_NAME(glColor4ubVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLOR3FVERTEX3FSUNPROC GLH_EXT_NAME(glColor3fVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLOR3FVERTEX3FVSUNPROC GLH_EXT_NAME(glColor3fVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMAL3FVERTEX3FSUNPROC GLH_EXT_NAME(glNormal3fVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMAL3FVERTEX3FVSUNPROC GLH_EXT_NAME(glNormal3fVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC GLH_EXT_NAME(glColor4fNormal3fVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC GLH_EXT_NAME(glColor4fNormal3fVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD2FVERTEX3FSUNPROC GLH_EXT_NAME(glTexCoord2fVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD2FVERTEX3FVSUNPROC GLH_EXT_NAME(glTexCoord2fVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD4FVERTEX4FSUNPROC GLH_EXT_NAME(glTexCoord4fVertex4fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD4FVERTEX4FVSUNPROC GLH_EXT_NAME(glTexCoord4fVertex4fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC GLH_EXT_NAME(glTexCoord2fColor4ubVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC GLH_EXT_NAME(glTexCoord2fColor4ubVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC GLH_EXT_NAME(glTexCoord2fColor3fVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC GLH_EXT_NAME(glTexCoord2fColor3fVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC GLH_EXT_NAME(glTexCoord2fNormal3fVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC GLH_EXT_NAME(glTexCoord2fNormal3fVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC GLH_EXT_NAME(glTexCoord2fColor4fNormal3fVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC GLH_EXT_NAME(glTexCoord2fColor4fNormal3fVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC GLH_EXT_NAME(glTexCoord4fColor4fNormal3fVertex4fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC GLH_EXT_NAME(glTexCoord4fColor4fNormal3fVertex4fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC GLH_EXT_NAME(glReplacementCodeuiVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC GLH_EXT_NAME(glReplacementCodeuiVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC GLH_EXT_NAME(glReplacementCodeuiColor4ubVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC GLH_EXT_NAME(glReplacementCodeuiColor4ubVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC GLH_EXT_NAME(glReplacementCodeuiColor3fVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC GLH_EXT_NAME(glReplacementCodeuiColor3fVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC GLH_EXT_NAME(glReplacementCodeuiNormal3fVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC GLH_EXT_NAME(glReplacementCodeuiNormal3fVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC GLH_EXT_NAME(glReplacementCodeuiColor4fNormal3fVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC GLH_EXT_NAME(glReplacementCodeuiColor4fNormal3fVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC GLH_EXT_NAME(glReplacementCodeuiTexCoord2fVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC GLH_EXT_NAME(glReplacementCodeuiTexCoord2fVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC GLH_EXT_NAME(glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC GLH_EXT_NAME(glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC GLH_EXT_NAME(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC GLH_EXT_NAME(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_blend_func_separate
    GLH_EXTERN PFNGLBLENDFUNCSEPARATEEXTPROC GLH_EXT_NAME(glBlendFuncSeparateEXT) GLH_INITIALIZER;
#endif

#ifdef GL_INGR_blend_func_separate
    GLH_EXTERN PFNGLBLENDFUNCSEPARATEINGRPROC GLH_EXT_NAME(glBlendFuncSeparateINGR) GLH_INITIALIZER;
#endif

#ifdef GL_INGR_color_clamp
#endif

#ifdef GL_INGR_interlace_read
#endif

#ifdef GL_EXT_stencil_wrap
#endif

#ifdef GL_EXT_422_pixels
#endif

#ifdef GL_NV_texgen_reflection
#endif

#ifdef GL_SUN_convolution_border_modes
#endif

#ifdef GL_EXT_texture_env_add
#endif

#ifdef GL_EXT_texture_lod_bias
#endif

#ifdef GL_EXT_texture_filter_anisotropic
#endif

#ifdef GL_EXT_vertex_weighting
    GLH_EXTERN PFNGLVERTEXWEIGHTFEXTPROC GLH_EXT_NAME(glVertexWeightfEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXWEIGHTFVEXTPROC GLH_EXT_NAME(glVertexWeightfvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXWEIGHTPOINTEREXTPROC GLH_EXT_NAME(glVertexWeightPointerEXT) GLH_INITIALIZER;
#endif

#ifdef GL_NV_light_max_exponent
#endif

#ifdef GL_NV_vertex_array_range
    GLH_EXTERN PFNGLFLUSHVERTEXARRAYRANGENVPROC GLH_EXT_NAME(glFlushVertexArrayRangeNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXARRAYRANGENVPROC GLH_EXT_NAME(glVertexArrayRangeNV) GLH_INITIALIZER;
#endif

#ifdef GL_NV_register_combiners
    GLH_EXTERN PFNGLCOMBINERPARAMETERFVNVPROC GLH_EXT_NAME(glCombinerParameterfvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMBINERPARAMETERFNVPROC GLH_EXT_NAME(glCombinerParameterfNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMBINERPARAMETERIVNVPROC GLH_EXT_NAME(glCombinerParameterivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMBINERPARAMETERINVPROC GLH_EXT_NAME(glCombinerParameteriNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMBINERINPUTNVPROC GLH_EXT_NAME(glCombinerInputNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOMBINEROUTPUTNVPROC GLH_EXT_NAME(glCombinerOutputNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFINALCOMBINERINPUTNVPROC GLH_EXT_NAME(glFinalCombinerInputNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC GLH_EXT_NAME(glGetCombinerInputParameterfvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC GLH_EXT_NAME(glGetCombinerInputParameterivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC GLH_EXT_NAME(glGetCombinerOutputParameterfvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC GLH_EXT_NAME(glGetCombinerOutputParameterivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC GLH_EXT_NAME(glGetFinalCombinerInputParameterfvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC GLH_EXT_NAME(glGetFinalCombinerInputParameterivNV) GLH_INITIALIZER;
#endif

#ifdef GL_NV_fog_distance
#endif

#ifdef GL_NV_texgen_emboss
#endif

#ifdef GL_NV_blend_square
#endif

#ifdef GL_NV_texture_env_combine4
#endif

#ifdef GL_MESA_resize_buffers
    GLH_EXTERN PFNGLRESIZEBUFFERSMESAPROC GLH_EXT_NAME(glResizeBuffersMESA) GLH_INITIALIZER;
#endif

#ifdef GL_MESA_window_pos
    GLH_EXTERN PFNGLWINDOWPOS2DMESAPROC GLH_EXT_NAME(glWindowPos2dMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2DVMESAPROC GLH_EXT_NAME(glWindowPos2dvMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2FMESAPROC GLH_EXT_NAME(glWindowPos2fMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2FVMESAPROC GLH_EXT_NAME(glWindowPos2fvMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2IMESAPROC GLH_EXT_NAME(glWindowPos2iMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2IVMESAPROC GLH_EXT_NAME(glWindowPos2ivMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2SMESAPROC GLH_EXT_NAME(glWindowPos2sMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS2SVMESAPROC GLH_EXT_NAME(glWindowPos2svMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3DMESAPROC GLH_EXT_NAME(glWindowPos3dMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3DVMESAPROC GLH_EXT_NAME(glWindowPos3dvMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3FMESAPROC GLH_EXT_NAME(glWindowPos3fMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3FVMESAPROC GLH_EXT_NAME(glWindowPos3fvMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3IMESAPROC GLH_EXT_NAME(glWindowPos3iMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3IVMESAPROC GLH_EXT_NAME(glWindowPos3ivMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3SMESAPROC GLH_EXT_NAME(glWindowPos3sMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS3SVMESAPROC GLH_EXT_NAME(glWindowPos3svMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS4DMESAPROC GLH_EXT_NAME(glWindowPos4dMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS4DVMESAPROC GLH_EXT_NAME(glWindowPos4dvMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS4FMESAPROC GLH_EXT_NAME(glWindowPos4fMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS4FVMESAPROC GLH_EXT_NAME(glWindowPos4fvMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS4IMESAPROC GLH_EXT_NAME(glWindowPos4iMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS4IVMESAPROC GLH_EXT_NAME(glWindowPos4ivMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS4SMESAPROC GLH_EXT_NAME(glWindowPos4sMESA) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWINDOWPOS4SVMESAPROC GLH_EXT_NAME(glWindowPos4svMESA) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_texture_compression_s3tc
#endif

#ifdef GL_IBM_cull_vertex
#endif

#ifdef GL_IBM_multimode_draw_arrays
    GLH_EXTERN PFNGLMULTIMODEDRAWARRAYSIBMPROC GLH_EXT_NAME(glMultiModeDrawArraysIBM) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTIMODEDRAWELEMENTSIBMPROC GLH_EXT_NAME(glMultiModeDrawElementsIBM) GLH_INITIALIZER;
#endif

#ifdef GL_IBM_vertex_array_lists
    GLH_EXTERN PFNGLCOLORPOINTERLISTIBMPROC GLH_EXT_NAME(glColorPointerListIBM) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLORPOINTERLISTIBMPROC GLH_EXT_NAME(glSecondaryColorPointerListIBM) GLH_INITIALIZER;
    GLH_EXTERN PFNGLEDGEFLAGPOINTERLISTIBMPROC GLH_EXT_NAME(glEdgeFlagPointerListIBM) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDPOINTERLISTIBMPROC GLH_EXT_NAME(glFogCoordPointerListIBM) GLH_INITIALIZER;
    GLH_EXTERN PFNGLINDEXPOINTERLISTIBMPROC GLH_EXT_NAME(glIndexPointerListIBM) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMALPOINTERLISTIBMPROC GLH_EXT_NAME(glNormalPointerListIBM) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORDPOINTERLISTIBMPROC GLH_EXT_NAME(glTexCoordPointerListIBM) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXPOINTERLISTIBMPROC GLH_EXT_NAME(glVertexPointerListIBM) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_subsample
#endif

#ifdef GL_SGIX_ycrcba
#endif

#ifdef GL_SGIX_ycrcb_subsample
#endif

#ifdef GL_SGIX_depth_pass_instrument
#endif

#ifdef GL_3DFX_texture_compression_FXT1
#endif

#ifdef GL_3DFX_multisample
#endif

#ifdef GL_3DFX_tbuffer
    GLH_EXTERN PFNGLTBUFFERMASK3DFXPROC GLH_EXT_NAME(glTbufferMask3DFX) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_multisample
    GLH_EXTERN PFNGLSAMPLEMASKEXTPROC GLH_EXT_NAME(glSampleMaskEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSAMPLEPATTERNEXTPROC GLH_EXT_NAME(glSamplePatternEXT) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_vertex_preclip
#endif

#ifdef GL_SGIX_convolution_accuracy
#endif

#ifdef GL_SGIX_resample
#endif

#ifdef GL_SGIS_point_line_texgen
#endif

#ifdef GL_SGIS_texture_color_mask
    GLH_EXTERN PFNGLTEXTURECOLORMASKSGISPROC GLH_EXT_NAME(glTextureColorMaskSGIS) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_igloo_interface
    GLH_EXTERN PFNGLIGLOOINTERFACESGIXPROC GLH_EXT_NAME(glIglooInterfaceSGIX) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_texture_env_dot3
#endif

#ifdef GL_ATI_texture_mirror_once
#endif

#ifdef GL_NV_fence
    GLH_EXTERN PFNGLDELETEFENCESNVPROC GLH_EXT_NAME(glDeleteFencesNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGENFENCESNVPROC GLH_EXT_NAME(glGenFencesNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISFENCENVPROC GLH_EXT_NAME(glIsFenceNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTESTFENCENVPROC GLH_EXT_NAME(glTestFenceNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETFENCEIVNVPROC GLH_EXT_NAME(glGetFenceivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFINISHFENCENVPROC GLH_EXT_NAME(glFinishFenceNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSETFENCENVPROC GLH_EXT_NAME(glSetFenceNV) GLH_INITIALIZER;
#endif

#ifdef GL_NV_evaluators
    GLH_EXTERN PFNGLMAPCONTROLPOINTSNVPROC GLH_EXT_NAME(glMapControlPointsNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMAPPARAMETERIVNVPROC GLH_EXT_NAME(glMapParameterivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMAPPARAMETERFVNVPROC GLH_EXT_NAME(glMapParameterfvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMAPCONTROLPOINTSNVPROC GLH_EXT_NAME(glGetMapControlPointsNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMAPPARAMETERIVNVPROC GLH_EXT_NAME(glGetMapParameterivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMAPPARAMETERFVNVPROC GLH_EXT_NAME(glGetMapParameterfvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMAPATTRIBPARAMETERIVNVPROC GLH_EXT_NAME(glGetMapAttribParameterivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETMAPATTRIBPARAMETERFVNVPROC GLH_EXT_NAME(glGetMapAttribParameterfvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLEVALMAPSNVPROC GLH_EXT_NAME(glEvalMapsNV) GLH_INITIALIZER;
#endif

#ifdef GL_NV_packed_depth_stencil
#endif

#ifdef GL_NV_register_combiners2
    GLH_EXTERN PFNGLCOMBINERSTAGEPARAMETERFVNVPROC GLH_EXT_NAME(glCombinerStageParameterfvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC GLH_EXT_NAME(glGetCombinerStageParameterfvNV) GLH_INITIALIZER;
#endif

#ifdef GL_NV_texture_compression_vtc
#endif

#ifdef GL_NV_texture_rectangle
#endif

#ifdef GL_NV_texture_shader
#endif

#ifdef GL_NV_texture_shader2
#endif

#ifdef GL_NV_vertex_array_range2
#endif

#ifdef GL_NV_vertex_program
    GLH_EXTERN PFNGLAREPROGRAMSRESIDENTNVPROC GLH_EXT_NAME(glAreProgramsResidentNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDPROGRAMNVPROC GLH_EXT_NAME(glBindProgramNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEPROGRAMSNVPROC GLH_EXT_NAME(glDeleteProgramsNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLEXECUTEPROGRAMNVPROC GLH_EXT_NAME(glExecuteProgramNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGENPROGRAMSNVPROC GLH_EXT_NAME(glGenProgramsNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMPARAMETERDVNVPROC GLH_EXT_NAME(glGetProgramParameterdvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMPARAMETERFVNVPROC GLH_EXT_NAME(glGetProgramParameterfvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMIVNVPROC GLH_EXT_NAME(glGetProgramivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMSTRINGNVPROC GLH_EXT_NAME(glGetProgramStringNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETTRACKMATRIXIVNVPROC GLH_EXT_NAME(glGetTrackMatrixivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBDVNVPROC GLH_EXT_NAME(glGetVertexAttribdvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBFVNVPROC GLH_EXT_NAME(glGetVertexAttribfvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBIVNVPROC GLH_EXT_NAME(glGetVertexAttribivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBPOINTERVNVPROC GLH_EXT_NAME(glGetVertexAttribPointervNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISPROGRAMNVPROC GLH_EXT_NAME(glIsProgramNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLLOADPROGRAMNVPROC GLH_EXT_NAME(glLoadProgramNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMPARAMETER4DNVPROC GLH_EXT_NAME(glProgramParameter4dNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMPARAMETER4DVNVPROC GLH_EXT_NAME(glProgramParameter4dvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMPARAMETER4FNVPROC GLH_EXT_NAME(glProgramParameter4fNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMPARAMETER4FVNVPROC GLH_EXT_NAME(glProgramParameter4fvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMPARAMETERS4DVNVPROC GLH_EXT_NAME(glProgramParameters4dvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMPARAMETERS4FVNVPROC GLH_EXT_NAME(glProgramParameters4fvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLREQUESTRESIDENTPROGRAMSNVPROC GLH_EXT_NAME(glRequestResidentProgramsNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTRACKMATRIXNVPROC GLH_EXT_NAME(glTrackMatrixNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBPOINTERNVPROC GLH_EXT_NAME(glVertexAttribPointerNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1DNVPROC GLH_EXT_NAME(glVertexAttrib1dNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1DVNVPROC GLH_EXT_NAME(glVertexAttrib1dvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1FNVPROC GLH_EXT_NAME(glVertexAttrib1fNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1FVNVPROC GLH_EXT_NAME(glVertexAttrib1fvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1SNVPROC GLH_EXT_NAME(glVertexAttrib1sNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1SVNVPROC GLH_EXT_NAME(glVertexAttrib1svNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2DNVPROC GLH_EXT_NAME(glVertexAttrib2dNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2DVNVPROC GLH_EXT_NAME(glVertexAttrib2dvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2FNVPROC GLH_EXT_NAME(glVertexAttrib2fNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2FVNVPROC GLH_EXT_NAME(glVertexAttrib2fvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2SNVPROC GLH_EXT_NAME(glVertexAttrib2sNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2SVNVPROC GLH_EXT_NAME(glVertexAttrib2svNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3DNVPROC GLH_EXT_NAME(glVertexAttrib3dNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3DVNVPROC GLH_EXT_NAME(glVertexAttrib3dvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3FNVPROC GLH_EXT_NAME(glVertexAttrib3fNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3FVNVPROC GLH_EXT_NAME(glVertexAttrib3fvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3SNVPROC GLH_EXT_NAME(glVertexAttrib3sNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3SVNVPROC GLH_EXT_NAME(glVertexAttrib3svNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4DNVPROC GLH_EXT_NAME(glVertexAttrib4dNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4DVNVPROC GLH_EXT_NAME(glVertexAttrib4dvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4FNVPROC GLH_EXT_NAME(glVertexAttrib4fNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4FVNVPROC GLH_EXT_NAME(glVertexAttrib4fvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4SNVPROC GLH_EXT_NAME(glVertexAttrib4sNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4SVNVPROC GLH_EXT_NAME(glVertexAttrib4svNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4UBNVPROC GLH_EXT_NAME(glVertexAttrib4ubNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4UBVNVPROC GLH_EXT_NAME(glVertexAttrib4ubvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS1DVNVPROC GLH_EXT_NAME(glVertexAttribs1dvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS1FVNVPROC GLH_EXT_NAME(glVertexAttribs1fvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS1SVNVPROC GLH_EXT_NAME(glVertexAttribs1svNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS2DVNVPROC GLH_EXT_NAME(glVertexAttribs2dvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS2FVNVPROC GLH_EXT_NAME(glVertexAttribs2fvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS2SVNVPROC GLH_EXT_NAME(glVertexAttribs2svNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS3DVNVPROC GLH_EXT_NAME(glVertexAttribs3dvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS3FVNVPROC GLH_EXT_NAME(glVertexAttribs3fvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS3SVNVPROC GLH_EXT_NAME(glVertexAttribs3svNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS4DVNVPROC GLH_EXT_NAME(glVertexAttribs4dvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS4FVNVPROC GLH_EXT_NAME(glVertexAttribs4fvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS4SVNVPROC GLH_EXT_NAME(glVertexAttribs4svNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS4UBVNVPROC GLH_EXT_NAME(glVertexAttribs4ubvNV) GLH_INITIALIZER;
#endif

#ifdef GL_SGIX_texture_coordinate_clamp
#endif

#ifdef GL_SGIX_scalebias_hint
#endif

#ifdef GL_OML_interlace
#endif

#ifdef GL_OML_subsample
#endif

#ifdef GL_OML_resample
#endif

#ifdef GL_NV_copy_depth_to_color
#endif

#ifdef GL_ATI_envmap_bumpmap
    GLH_EXTERN PFNGLTEXBUMPPARAMETERIVATIPROC GLH_EXT_NAME(glTexBumpParameterivATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXBUMPPARAMETERFVATIPROC GLH_EXT_NAME(glTexBumpParameterfvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETTEXBUMPPARAMETERIVATIPROC GLH_EXT_NAME(glGetTexBumpParameterivATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETTEXBUMPPARAMETERFVATIPROC GLH_EXT_NAME(glGetTexBumpParameterfvATI) GLH_INITIALIZER;
#endif

#ifdef GL_ATI_fragment_shader
    GLH_EXTERN PFNGLGENFRAGMENTSHADERSATIPROC GLH_EXT_NAME(glGenFragmentShadersATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDFRAGMENTSHADERATIPROC GLH_EXT_NAME(glBindFragmentShaderATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEFRAGMENTSHADERATIPROC GLH_EXT_NAME(glDeleteFragmentShaderATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBEGINFRAGMENTSHADERATIPROC GLH_EXT_NAME(glBeginFragmentShaderATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLENDFRAGMENTSHADERATIPROC GLH_EXT_NAME(glEndFragmentShaderATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPASSTEXCOORDATIPROC GLH_EXT_NAME(glPassTexCoordATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSAMPLEMAPATIPROC GLH_EXT_NAME(glSampleMapATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORFRAGMENTOP1ATIPROC GLH_EXT_NAME(glColorFragmentOp1ATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORFRAGMENTOP2ATIPROC GLH_EXT_NAME(glColorFragmentOp2ATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLORFRAGMENTOP3ATIPROC GLH_EXT_NAME(glColorFragmentOp3ATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLALPHAFRAGMENTOP1ATIPROC GLH_EXT_NAME(glAlphaFragmentOp1ATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLALPHAFRAGMENTOP2ATIPROC GLH_EXT_NAME(glAlphaFragmentOp2ATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLALPHAFRAGMENTOP3ATIPROC GLH_EXT_NAME(glAlphaFragmentOp3ATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSETFRAGMENTSHADERCONSTANTATIPROC GLH_EXT_NAME(glSetFragmentShaderConstantATI) GLH_INITIALIZER;
#endif

#ifdef GL_ATI_pn_triangles
    GLH_EXTERN PFNGLPNTRIANGLESIATIPROC GLH_EXT_NAME(glPNTrianglesiATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPNTRIANGLESFATIPROC GLH_EXT_NAME(glPNTrianglesfATI) GLH_INITIALIZER;
#endif

#ifdef GL_ATI_vertex_array_object
    GLH_EXTERN PFNGLNEWOBJECTBUFFERATIPROC GLH_EXT_NAME(glNewObjectBufferATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISOBJECTBUFFERATIPROC GLH_EXT_NAME(glIsObjectBufferATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUPDATEOBJECTBUFFERATIPROC GLH_EXT_NAME(glUpdateObjectBufferATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETOBJECTBUFFERFVATIPROC GLH_EXT_NAME(glGetObjectBufferfvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETOBJECTBUFFERIVATIPROC GLH_EXT_NAME(glGetObjectBufferivATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFREEOBJECTBUFFERATIPROC GLH_EXT_NAME(glFreeObjectBufferATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLARRAYOBJECTATIPROC GLH_EXT_NAME(glArrayObjectATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETARRAYOBJECTFVATIPROC GLH_EXT_NAME(glGetArrayObjectfvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETARRAYOBJECTIVATIPROC GLH_EXT_NAME(glGetArrayObjectivATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVARIANTARRAYOBJECTATIPROC GLH_EXT_NAME(glVariantArrayObjectATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVARIANTARRAYOBJECTFVATIPROC GLH_EXT_NAME(glGetVariantArrayObjectfvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVARIANTARRAYOBJECTIVATIPROC GLH_EXT_NAME(glGetVariantArrayObjectivATI) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_vertex_shader
    GLH_EXTERN PFNGLBEGINVERTEXSHADEREXTPROC GLH_EXT_NAME(glBeginVertexShaderEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLENDVERTEXSHADEREXTPROC GLH_EXT_NAME(glEndVertexShaderEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDVERTEXSHADEREXTPROC GLH_EXT_NAME(glBindVertexShaderEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGENVERTEXSHADERSEXTPROC GLH_EXT_NAME(glGenVertexShadersEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEVERTEXSHADEREXTPROC GLH_EXT_NAME(glDeleteVertexShaderEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSHADEROP1EXTPROC GLH_EXT_NAME(glShaderOp1EXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSHADEROP2EXTPROC GLH_EXT_NAME(glShaderOp2EXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSHADEROP3EXTPROC GLH_EXT_NAME(glShaderOp3EXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSWIZZLEEXTPROC GLH_EXT_NAME(glSwizzleEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLWRITEMASKEXTPROC GLH_EXT_NAME(glWriteMaskEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLINSERTCOMPONENTEXTPROC GLH_EXT_NAME(glInsertComponentEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLEXTRACTCOMPONENTEXTPROC GLH_EXT_NAME(glExtractComponentEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGENSYMBOLSEXTPROC GLH_EXT_NAME(glGenSymbolsEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSETINVARIANTEXTPROC GLH_EXT_NAME(glSetInvariantEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSETLOCALCONSTANTEXTPROC GLH_EXT_NAME(glSetLocalConstantEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVARIANTBVEXTPROC GLH_EXT_NAME(glVariantbvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVARIANTSVEXTPROC GLH_EXT_NAME(glVariantsvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVARIANTIVEXTPROC GLH_EXT_NAME(glVariantivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVARIANTFVEXTPROC GLH_EXT_NAME(glVariantfvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVARIANTDVEXTPROC GLH_EXT_NAME(glVariantdvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVARIANTUBVEXTPROC GLH_EXT_NAME(glVariantubvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVARIANTUSVEXTPROC GLH_EXT_NAME(glVariantusvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVARIANTUIVEXTPROC GLH_EXT_NAME(glVariantuivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVARIANTPOINTEREXTPROC GLH_EXT_NAME(glVariantPointerEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLENABLEVARIANTCLIENTSTATEEXTPROC GLH_EXT_NAME(glEnableVariantClientStateEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC GLH_EXT_NAME(glDisableVariantClientStateEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDLIGHTPARAMETEREXTPROC GLH_EXT_NAME(glBindLightParameterEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDMATERIALPARAMETEREXTPROC GLH_EXT_NAME(glBindMaterialParameterEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDTEXGENPARAMETEREXTPROC GLH_EXT_NAME(glBindTexGenParameterEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDTEXTUREUNITPARAMETEREXTPROC GLH_EXT_NAME(glBindTextureUnitParameterEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDPARAMETEREXTPROC GLH_EXT_NAME(glBindParameterEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISVARIANTENABLEDEXTPROC GLH_EXT_NAME(glIsVariantEnabledEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVARIANTBOOLEANVEXTPROC GLH_EXT_NAME(glGetVariantBooleanvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVARIANTINTEGERVEXTPROC GLH_EXT_NAME(glGetVariantIntegervEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVARIANTFLOATVEXTPROC GLH_EXT_NAME(glGetVariantFloatvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVARIANTPOINTERVEXTPROC GLH_EXT_NAME(glGetVariantPointervEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETINVARIANTBOOLEANVEXTPROC GLH_EXT_NAME(glGetInvariantBooleanvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETINVARIANTINTEGERVEXTPROC GLH_EXT_NAME(glGetInvariantIntegervEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETINVARIANTFLOATVEXTPROC GLH_EXT_NAME(glGetInvariantFloatvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC GLH_EXT_NAME(glGetLocalConstantBooleanvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETLOCALCONSTANTINTEGERVEXTPROC GLH_EXT_NAME(glGetLocalConstantIntegervEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETLOCALCONSTANTFLOATVEXTPROC GLH_EXT_NAME(glGetLocalConstantFloatvEXT) GLH_INITIALIZER;
#endif

#ifdef GL_ATI_vertex_streams
    GLH_EXTERN PFNGLVERTEXSTREAM1SATIPROC GLH_EXT_NAME(glVertexStream1sATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM1SVATIPROC GLH_EXT_NAME(glVertexStream1svATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM1IATIPROC GLH_EXT_NAME(glVertexStream1iATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM1IVATIPROC GLH_EXT_NAME(glVertexStream1ivATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM1FATIPROC GLH_EXT_NAME(glVertexStream1fATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM1FVATIPROC GLH_EXT_NAME(glVertexStream1fvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM1DATIPROC GLH_EXT_NAME(glVertexStream1dATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM1DVATIPROC GLH_EXT_NAME(glVertexStream1dvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM2SATIPROC GLH_EXT_NAME(glVertexStream2sATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM2SVATIPROC GLH_EXT_NAME(glVertexStream2svATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM2IATIPROC GLH_EXT_NAME(glVertexStream2iATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM2IVATIPROC GLH_EXT_NAME(glVertexStream2ivATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM2FATIPROC GLH_EXT_NAME(glVertexStream2fATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM2FVATIPROC GLH_EXT_NAME(glVertexStream2fvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM2DATIPROC GLH_EXT_NAME(glVertexStream2dATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM2DVATIPROC GLH_EXT_NAME(glVertexStream2dvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM3SATIPROC GLH_EXT_NAME(glVertexStream3sATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM3SVATIPROC GLH_EXT_NAME(glVertexStream3svATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM3IATIPROC GLH_EXT_NAME(glVertexStream3iATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM3IVATIPROC GLH_EXT_NAME(glVertexStream3ivATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM3FATIPROC GLH_EXT_NAME(glVertexStream3fATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM3FVATIPROC GLH_EXT_NAME(glVertexStream3fvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM3DATIPROC GLH_EXT_NAME(glVertexStream3dATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM3DVATIPROC GLH_EXT_NAME(glVertexStream3dvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM4SATIPROC GLH_EXT_NAME(glVertexStream4sATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM4SVATIPROC GLH_EXT_NAME(glVertexStream4svATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM4IATIPROC GLH_EXT_NAME(glVertexStream4iATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM4IVATIPROC GLH_EXT_NAME(glVertexStream4ivATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM4FATIPROC GLH_EXT_NAME(glVertexStream4fATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM4FVATIPROC GLH_EXT_NAME(glVertexStream4fvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM4DATIPROC GLH_EXT_NAME(glVertexStream4dATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXSTREAM4DVATIPROC GLH_EXT_NAME(glVertexStream4dvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMALSTREAM3BATIPROC GLH_EXT_NAME(glNormalStream3bATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMALSTREAM3BVATIPROC GLH_EXT_NAME(glNormalStream3bvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMALSTREAM3SATIPROC GLH_EXT_NAME(glNormalStream3sATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMALSTREAM3SVATIPROC GLH_EXT_NAME(glNormalStream3svATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMALSTREAM3IATIPROC GLH_EXT_NAME(glNormalStream3iATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMALSTREAM3IVATIPROC GLH_EXT_NAME(glNormalStream3ivATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMALSTREAM3FATIPROC GLH_EXT_NAME(glNormalStream3fATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMALSTREAM3FVATIPROC GLH_EXT_NAME(glNormalStream3fvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMALSTREAM3DATIPROC GLH_EXT_NAME(glNormalStream3dATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMALSTREAM3DVATIPROC GLH_EXT_NAME(glNormalStream3dvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC GLH_EXT_NAME(glClientActiveVertexStreamATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXBLENDENVIATIPROC GLH_EXT_NAME(glVertexBlendEnviATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXBLENDENVFATIPROC GLH_EXT_NAME(glVertexBlendEnvfATI) GLH_INITIALIZER;
#endif

#ifdef GL_ATI_element_array
    GLH_EXTERN PFNGLELEMENTPOINTERATIPROC GLH_EXT_NAME(glElementPointerATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDRAWELEMENTARRAYATIPROC GLH_EXT_NAME(glDrawElementArrayATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDRAWRANGEELEMENTARRAYATIPROC GLH_EXT_NAME(glDrawRangeElementArrayATI) GLH_INITIALIZER;
#endif

#ifdef GL_SUN_mesh_array
    GLH_EXTERN PFNGLDRAWMESHARRAYSSUNPROC GLH_EXT_NAME(glDrawMeshArraysSUN) GLH_INITIALIZER;
#endif

#ifdef GL_SUN_slice_accum
#endif

#ifdef GL_NV_multisample_filter_hint
#endif

#ifdef GL_NV_depth_clamp
#endif

#ifdef GL_NV_occlusion_query
    GLH_EXTERN PFNGLGENOCCLUSIONQUERIESNVPROC GLH_EXT_NAME(glGenOcclusionQueriesNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEOCCLUSIONQUERIESNVPROC GLH_EXT_NAME(glDeleteOcclusionQueriesNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISOCCLUSIONQUERYNVPROC GLH_EXT_NAME(glIsOcclusionQueryNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBEGINOCCLUSIONQUERYNVPROC GLH_EXT_NAME(glBeginOcclusionQueryNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLENDOCCLUSIONQUERYNVPROC GLH_EXT_NAME(glEndOcclusionQueryNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETOCCLUSIONQUERYIVNVPROC GLH_EXT_NAME(glGetOcclusionQueryivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETOCCLUSIONQUERYUIVNVPROC GLH_EXT_NAME(glGetOcclusionQueryuivNV) GLH_INITIALIZER;
#endif

#ifdef GL_NV_point_sprite
    GLH_EXTERN PFNGLPOINTPARAMETERINVPROC GLH_EXT_NAME(glPointParameteriNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPOINTPARAMETERIVNVPROC GLH_EXT_NAME(glPointParameterivNV) GLH_INITIALIZER;
#endif

#ifdef GL_NV_texture_shader3
#endif

#ifdef GL_NV_vertex_program1_1
#endif

#ifdef GL_EXT_shadow_funcs
#endif

#ifdef GL_EXT_stencil_two_side
    GLH_EXTERN PFNGLACTIVESTENCILFACEEXTPROC GLH_EXT_NAME(glActiveStencilFaceEXT) GLH_INITIALIZER;
#endif

#ifdef GL_ATI_text_fragment_shader
#endif

#ifdef GL_APPLE_client_storage
#endif

#ifdef GL_APPLE_element_array
    GLH_EXTERN PFNGLELEMENTPOINTERAPPLEPROC GLH_EXT_NAME(glElementPointerAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDRAWELEMENTARRAYAPPLEPROC GLH_EXT_NAME(glDrawElementArrayAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC GLH_EXT_NAME(glDrawRangeElementArrayAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC GLH_EXT_NAME(glMultiDrawElementArrayAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC GLH_EXT_NAME(glMultiDrawRangeElementArrayAPPLE) GLH_INITIALIZER;
#endif

#ifdef GL_APPLE_fence
    GLH_EXTERN PFNGLGENFENCESAPPLEPROC GLH_EXT_NAME(glGenFencesAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEFENCESAPPLEPROC GLH_EXT_NAME(glDeleteFencesAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSETFENCEAPPLEPROC GLH_EXT_NAME(glSetFenceAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISFENCEAPPLEPROC GLH_EXT_NAME(glIsFenceAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTESTFENCEAPPLEPROC GLH_EXT_NAME(glTestFenceAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFINISHFENCEAPPLEPROC GLH_EXT_NAME(glFinishFenceAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTESTOBJECTAPPLEPROC GLH_EXT_NAME(glTestObjectAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFINISHOBJECTAPPLEPROC GLH_EXT_NAME(glFinishObjectAPPLE) GLH_INITIALIZER;
#endif

#ifdef GL_APPLE_vertex_array_object
    GLH_EXTERN PFNGLBINDVERTEXARRAYAPPLEPROC GLH_EXT_NAME(glBindVertexArrayAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEVERTEXARRAYSAPPLEPROC GLH_EXT_NAME(glDeleteVertexArraysAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGENVERTEXARRAYSAPPLEPROC GLH_EXT_NAME(glGenVertexArraysAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISVERTEXARRAYAPPLEPROC GLH_EXT_NAME(glIsVertexArrayAPPLE) GLH_INITIALIZER;
#endif

#ifdef GL_APPLE_vertex_array_range
    GLH_EXTERN PFNGLVERTEXARRAYRANGEAPPLEPROC GLH_EXT_NAME(glVertexArrayRangeAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC GLH_EXT_NAME(glFlushVertexArrayRangeAPPLE) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXARRAYPARAMETERIAPPLEPROC GLH_EXT_NAME(glVertexArrayParameteriAPPLE) GLH_INITIALIZER;
#endif

#ifdef GL_APPLE_ycbcr_422
#endif

#ifdef GL_S3_s3tc
#endif

#ifdef GL_ATI_draw_buffers
    GLH_EXTERN PFNGLDRAWBUFFERSATIPROC GLH_EXT_NAME(glDrawBuffersATI) GLH_INITIALIZER;
#endif

#ifdef GL_ATI_pixel_format_float
#endif

#ifdef GL_ATI_texture_env_combine3
#endif

#ifdef GL_ATI_texture_float
#endif

#ifdef GL_NV_float_buffer
#endif

#ifdef GL_NV_fragment_program
    GLH_EXTERN PFNGLPROGRAMNAMEDPARAMETER4FNVPROC GLH_EXT_NAME(glProgramNamedParameter4fNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMNAMEDPARAMETER4DNVPROC GLH_EXT_NAME(glProgramNamedParameter4dNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC GLH_EXT_NAME(glProgramNamedParameter4fvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC GLH_EXT_NAME(glProgramNamedParameter4dvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC GLH_EXT_NAME(glGetProgramNamedParameterfvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC GLH_EXT_NAME(glGetProgramNamedParameterdvNV) GLH_INITIALIZER;
#endif

#ifdef GL_NV_half_float
    GLH_EXTERN PFNGLVERTEX2HNVPROC GLH_EXT_NAME(glVertex2hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEX2HVNVPROC GLH_EXT_NAME(glVertex2hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEX3HNVPROC GLH_EXT_NAME(glVertex3hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEX3HVNVPROC GLH_EXT_NAME(glVertex3hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEX4HNVPROC GLH_EXT_NAME(glVertex4hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEX4HVNVPROC GLH_EXT_NAME(glVertex4hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMAL3HNVPROC GLH_EXT_NAME(glNormal3hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLNORMAL3HVNVPROC GLH_EXT_NAME(glNormal3hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLOR3HNVPROC GLH_EXT_NAME(glColor3hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLOR3HVNVPROC GLH_EXT_NAME(glColor3hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLOR4HNVPROC GLH_EXT_NAME(glColor4hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCOLOR4HVNVPROC GLH_EXT_NAME(glColor4hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD1HNVPROC GLH_EXT_NAME(glTexCoord1hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD1HVNVPROC GLH_EXT_NAME(glTexCoord1hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD2HNVPROC GLH_EXT_NAME(glTexCoord2hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD2HVNVPROC GLH_EXT_NAME(glTexCoord2hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD3HNVPROC GLH_EXT_NAME(glTexCoord3hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD3HVNVPROC GLH_EXT_NAME(glTexCoord3hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD4HNVPROC GLH_EXT_NAME(glTexCoord4hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXCOORD4HVNVPROC GLH_EXT_NAME(glTexCoord4hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1HNVPROC GLH_EXT_NAME(glMultiTexCoord1hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD1HVNVPROC GLH_EXT_NAME(glMultiTexCoord1hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2HNVPROC GLH_EXT_NAME(glMultiTexCoord2hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD2HVNVPROC GLH_EXT_NAME(glMultiTexCoord2hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3HNVPROC GLH_EXT_NAME(glMultiTexCoord3hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD3HVNVPROC GLH_EXT_NAME(glMultiTexCoord3hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4HNVPROC GLH_EXT_NAME(glMultiTexCoord4hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLMULTITEXCOORD4HVNVPROC GLH_EXT_NAME(glMultiTexCoord4hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDHNVPROC GLH_EXT_NAME(glFogCoordhNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFOGCOORDHVNVPROC GLH_EXT_NAME(glFogCoordhvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3HNVPROC GLH_EXT_NAME(glSecondaryColor3hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSECONDARYCOLOR3HVNVPROC GLH_EXT_NAME(glSecondaryColor3hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXWEIGHTHNVPROC GLH_EXT_NAME(glVertexWeighthNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXWEIGHTHVNVPROC GLH_EXT_NAME(glVertexWeighthvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1HNVPROC GLH_EXT_NAME(glVertexAttrib1hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB1HVNVPROC GLH_EXT_NAME(glVertexAttrib1hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2HNVPROC GLH_EXT_NAME(glVertexAttrib2hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB2HVNVPROC GLH_EXT_NAME(glVertexAttrib2hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3HNVPROC GLH_EXT_NAME(glVertexAttrib3hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB3HVNVPROC GLH_EXT_NAME(glVertexAttrib3hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4HNVPROC GLH_EXT_NAME(glVertexAttrib4hNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIB4HVNVPROC GLH_EXT_NAME(glVertexAttrib4hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS1HVNVPROC GLH_EXT_NAME(glVertexAttribs1hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS2HVNVPROC GLH_EXT_NAME(glVertexAttribs2hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS3HVNVPROC GLH_EXT_NAME(glVertexAttribs3hvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBS4HVNVPROC GLH_EXT_NAME(glVertexAttribs4hvNV) GLH_INITIALIZER;
#endif

#ifdef GL_NV_pixel_data_range
    GLH_EXTERN PFNGLPIXELDATARANGENVPROC GLH_EXT_NAME(glPixelDataRangeNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFLUSHPIXELDATARANGENVPROC GLH_EXT_NAME(glFlushPixelDataRangeNV) GLH_INITIALIZER;
#endif

#ifdef GL_NV_primitive_restart
    GLH_EXTERN PFNGLPRIMITIVERESTARTNVPROC GLH_EXT_NAME(glPrimitiveRestartNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPRIMITIVERESTARTINDEXNVPROC GLH_EXT_NAME(glPrimitiveRestartIndexNV) GLH_INITIALIZER;
#endif

#ifdef GL_NV_texture_expand_normal
#endif

#ifdef GL_NV_vertex_program2
#endif

#ifdef GL_ATI_map_object_buffer
    GLH_EXTERN PFNGLMAPOBJECTBUFFERATIPROC GLH_EXT_NAME(glMapObjectBufferATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNMAPOBJECTBUFFERATIPROC GLH_EXT_NAME(glUnmapObjectBufferATI) GLH_INITIALIZER;
#endif

#ifdef GL_ATI_separate_stencil
    GLH_EXTERN PFNGLSTENCILOPSEPARATEATIPROC GLH_EXT_NAME(glStencilOpSeparateATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLSTENCILFUNCSEPARATEATIPROC GLH_EXT_NAME(glStencilFuncSeparateATI) GLH_INITIALIZER;
#endif

#ifdef GL_ATI_vertex_attrib_array_object
    GLH_EXTERN PFNGLVERTEXATTRIBARRAYOBJECTATIPROC GLH_EXT_NAME(glVertexAttribArrayObjectATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC GLH_EXT_NAME(glGetVertexAttribArrayObjectfvATI) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC GLH_EXT_NAME(glGetVertexAttribArrayObjectivATI) GLH_INITIALIZER;
#endif

#ifdef GL_OES_read_format
#endif

#ifdef GL_EXT_depth_bounds_test
    GLH_EXTERN PFNGLDEPTHBOUNDSEXTPROC GLH_EXT_NAME(glDepthBoundsEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_texture_mirror_clamp
#endif

#ifdef GL_EXT_blend_equation_separate
    GLH_EXTERN PFNGLBLENDEQUATIONSEPARATEEXTPROC GLH_EXT_NAME(glBlendEquationSeparateEXT) GLH_INITIALIZER;
#endif

#ifdef GL_MESA_pack_invert
#endif

#ifdef GL_MESA_ycbcr_texture
#endif

#ifdef GL_EXT_pixel_buffer_object
#endif

#ifdef GL_NV_fragment_program_option
#endif

#ifdef GL_NV_fragment_program2
#endif

#ifdef GL_NV_vertex_program2_option
#endif

#ifdef GL_NV_vertex_program3
#endif

#ifdef GL_EXT_framebuffer_object
    GLH_EXTERN PFNGLISRENDERBUFFEREXTPROC GLH_EXT_NAME(glIsRenderbufferEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDRENDERBUFFEREXTPROC GLH_EXT_NAME(glBindRenderbufferEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETERENDERBUFFERSEXTPROC GLH_EXT_NAME(glDeleteRenderbuffersEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGENRENDERBUFFERSEXTPROC GLH_EXT_NAME(glGenRenderbuffersEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLRENDERBUFFERSTORAGEEXTPROC GLH_EXT_NAME(glRenderbufferStorageEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC GLH_EXT_NAME(glGetRenderbufferParameterivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISFRAMEBUFFEREXTPROC GLH_EXT_NAME(glIsFramebufferEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDFRAMEBUFFEREXTPROC GLH_EXT_NAME(glBindFramebufferEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDELETEFRAMEBUFFERSEXTPROC GLH_EXT_NAME(glDeleteFramebuffersEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGENFRAMEBUFFERSEXTPROC GLH_EXT_NAME(glGenFramebuffersEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC GLH_EXT_NAME(glCheckFramebufferStatusEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAMEBUFFERTEXTURE1DEXTPROC GLH_EXT_NAME(glFramebufferTexture1DEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAMEBUFFERTEXTURE2DEXTPROC GLH_EXT_NAME(glFramebufferTexture2DEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAMEBUFFERTEXTURE3DEXTPROC GLH_EXT_NAME(glFramebufferTexture3DEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC GLH_EXT_NAME(glFramebufferRenderbufferEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC GLH_EXT_NAME(glGetFramebufferAttachmentParameterivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGENERATEMIPMAPEXTPROC GLH_EXT_NAME(glGenerateMipmapEXT) GLH_INITIALIZER;
#endif

#ifdef GL_GREMEDY_string_marker
    GLH_EXTERN PFNGLSTRINGMARKERGREMEDYPROC GLH_EXT_NAME(glStringMarkerGREMEDY) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_Cg_shader
#endif

#ifdef GL_EXT_timer_query
    GLH_EXTERN PFNGLGETQUERYOBJECTI64VEXTPROC GLH_EXT_NAME(glGetQueryObjecti64vEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETQUERYOBJECTUI64VEXTPROC GLH_EXT_NAME(glGetQueryObjectui64vEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_texture_buffer_object
    GLH_EXTERN PFNGLTEXBUFFEREXTPROC GLH_EXT_NAME(glTexBufferEXT) GLH_INITIALIZER;
#endif

#ifdef GL_NV_transform_feedback
    GLH_EXTERN PFNGLBEGINTRANSFORMFEEDBACKNVPROC GLH_EXT_NAME(glBeginTransformFeedbackNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLENDTRANSFORMFEEDBACKNVPROC GLH_EXT_NAME(glEndTransformFeedbackNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC GLH_EXT_NAME(glTransformFeedbackAttribsNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDBUFFERRANGENVPROC GLH_EXT_NAME(glBindBufferRangeNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDBUFFEROFFSETNVPROC GLH_EXT_NAME(glBindBufferOffsetNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDBUFFERBASENVPROC GLH_EXT_NAME(glBindBufferBaseNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC GLH_EXT_NAME(glTransformFeedbackVaryingsNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLACTIVEVARYINGNVPROC GLH_EXT_NAME(glActiveVaryingNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVARYINGLOCATIONNVPROC GLH_EXT_NAME(glGetVaryingLocationNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETACTIVEVARYINGNVPROC GLH_EXT_NAME(glGetActiveVaryingNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC GLH_EXT_NAME(glGetTransformFeedbackVaryingNV) GLH_INITIALIZER;
#endif

#ifdef GL_NV_depth_buffer_float
    GLH_EXTERN PFNGLDEPTHRANGEDNVPROC GLH_EXT_NAME(glDepthRangedNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCLEARDEPTHDNVPROC GLH_EXT_NAME(glClearDepthdNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDEPTHBOUNDSDNVPROC GLH_EXT_NAME(glDepthBoundsdNV) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_texture_compression_latc
#endif

#ifdef GL_EXT_framebuffer_sRGB
#endif

#ifdef GL_EXT_texture_shared_exponent
#endif

#ifdef GL_EXT_packed_float
#endif

#ifdef GL_EXT_texture_array
#endif

#ifdef GL_EXT_draw_buffers2
    GLH_EXTERN PFNGLCOLORMASKINDEXEDEXTPROC GLH_EXT_NAME(glColorMaskIndexedEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETBOOLEANINDEXEDVEXTPROC GLH_EXT_NAME(glGetBooleanIndexedvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETINTEGERINDEXEDVEXTPROC GLH_EXT_NAME(glGetIntegerIndexedvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLENABLEINDEXEDEXTPROC GLH_EXT_NAME(glEnableIndexedEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDISABLEINDEXEDEXTPROC GLH_EXT_NAME(glDisableIndexedEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLISENABLEDINDEXEDEXTPROC GLH_EXT_NAME(glIsEnabledIndexedEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_texture_integer
    GLH_EXTERN PFNGLTEXPARAMETERIIVEXTPROC GLH_EXT_NAME(glTexParameterIivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLTEXPARAMETERIUIVEXTPROC GLH_EXT_NAME(glTexParameterIuivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETTEXPARAMETERIIVEXTPROC GLH_EXT_NAME(glGetTexParameterIivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETTEXPARAMETERIUIVEXTPROC GLH_EXT_NAME(glGetTexParameterIuivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCLEARCOLORIIEXTPROC GLH_EXT_NAME(glClearColorIiEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLCLEARCOLORIUIEXTPROC GLH_EXT_NAME(glClearColorIuiEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_bindable_uniform
    GLH_EXTERN PFNGLUNIFORMBUFFEREXTPROC GLH_EXT_NAME(glUniformBufferEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETUNIFORMBUFFERSIZEEXTPROC GLH_EXT_NAME(glGetUniformBufferSizeEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETUNIFORMOFFSETEXTPROC GLH_EXT_NAME(glGetUniformOffsetEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_gpu_shader4
    GLH_EXTERN PFNGLGETUNIFORMUIVEXTPROC GLH_EXT_NAME(glGetUniformuivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLBINDFRAGDATALOCATIONEXTPROC GLH_EXT_NAME(glBindFragDataLocationEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETFRAGDATALOCATIONEXTPROC GLH_EXT_NAME(glGetFragDataLocationEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM1UIEXTPROC GLH_EXT_NAME(glUniform1uiEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM2UIEXTPROC GLH_EXT_NAME(glUniform2uiEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM3UIEXTPROC GLH_EXT_NAME(glUniform3uiEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM4UIEXTPROC GLH_EXT_NAME(glUniform4uiEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM1UIVEXTPROC GLH_EXT_NAME(glUniform1uivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM2UIVEXTPROC GLH_EXT_NAME(glUniform2uivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM3UIVEXTPROC GLH_EXT_NAME(glUniform3uivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLUNIFORM4UIVEXTPROC GLH_EXT_NAME(glUniform4uivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI1IEXTPROC GLH_EXT_NAME(glVertexAttribI1iEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI2IEXTPROC GLH_EXT_NAME(glVertexAttribI2iEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI3IEXTPROC GLH_EXT_NAME(glVertexAttribI3iEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI4IEXTPROC GLH_EXT_NAME(glVertexAttribI4iEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI1UIEXTPROC GLH_EXT_NAME(glVertexAttribI1uiEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI2UIEXTPROC GLH_EXT_NAME(glVertexAttribI2uiEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI3UIEXTPROC GLH_EXT_NAME(glVertexAttribI3uiEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI4UIEXTPROC GLH_EXT_NAME(glVertexAttribI4uiEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI1IVEXTPROC GLH_EXT_NAME(glVertexAttribI1ivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI2IVEXTPROC GLH_EXT_NAME(glVertexAttribI2ivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI3IVEXTPROC GLH_EXT_NAME(glVertexAttribI3ivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI4IVEXTPROC GLH_EXT_NAME(glVertexAttribI4ivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI1UIVEXTPROC GLH_EXT_NAME(glVertexAttribI1uivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI2UIVEXTPROC GLH_EXT_NAME(glVertexAttribI2uivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI3UIVEXTPROC GLH_EXT_NAME(glVertexAttribI3uivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI4UIVEXTPROC GLH_EXT_NAME(glVertexAttribI4uivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI4BVEXTPROC GLH_EXT_NAME(glVertexAttribI4bvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI4SVEXTPROC GLH_EXT_NAME(glVertexAttribI4svEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI4UBVEXTPROC GLH_EXT_NAME(glVertexAttribI4ubvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBI4USVEXTPROC GLH_EXT_NAME(glVertexAttribI4usvEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLVERTEXATTRIBIPOINTEREXTPROC GLH_EXT_NAME(glVertexAttribIPointerEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBIIVEXTPROC GLH_EXT_NAME(glGetVertexAttribIivEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETVERTEXATTRIBIUIVEXTPROC GLH_EXT_NAME(glGetVertexAttribIuivEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_geometry_shader4
    GLH_EXTERN PFNGLPROGRAMPARAMETERIEXTPROC GLH_EXT_NAME(glProgramParameteriEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAMEBUFFERTEXTUREEXTPROC GLH_EXT_NAME(glFramebufferTextureEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC GLH_EXT_NAME(glFramebufferTextureLayerEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC GLH_EXT_NAME(glFramebufferTextureFaceEXT) GLH_INITIALIZER;
#endif

#ifdef GL_NV_geometry_program4
    GLH_EXTERN PFNGLPROGRAMVERTEXLIMITNVPROC GLH_EXT_NAME(glProgramVertexLimitNV) GLH_INITIALIZER;
#endif

#ifdef GL_NV_gpu_program4
    GLH_EXTERN PFNGLPROGRAMLOCALPARAMETERI4INVPROC GLH_EXT_NAME(glProgramLocalParameterI4iNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC GLH_EXT_NAME(glProgramLocalParameterI4ivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC GLH_EXT_NAME(glProgramLocalParametersI4ivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMLOCALPARAMETERI4UINVPROC GLH_EXT_NAME(glProgramLocalParameterI4uiNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC GLH_EXT_NAME(glProgramLocalParameterI4uivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC GLH_EXT_NAME(glProgramLocalParametersI4uivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMENVPARAMETERI4INVPROC GLH_EXT_NAME(glProgramEnvParameterI4iNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMENVPARAMETERI4IVNVPROC GLH_EXT_NAME(glProgramEnvParameterI4ivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMENVPARAMETERSI4IVNVPROC GLH_EXT_NAME(glProgramEnvParametersI4ivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMENVPARAMETERI4UINVPROC GLH_EXT_NAME(glProgramEnvParameterI4uiNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMENVPARAMETERI4UIVNVPROC GLH_EXT_NAME(glProgramEnvParameterI4uivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC GLH_EXT_NAME(glProgramEnvParametersI4uivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC GLH_EXT_NAME(glGetProgramLocalParameterIivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC GLH_EXT_NAME(glGetProgramLocalParameterIuivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMENVPARAMETERIIVNVPROC GLH_EXT_NAME(glGetProgramEnvParameterIivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC GLH_EXT_NAME(glGetProgramEnvParameterIuivNV) GLH_INITIALIZER;
#endif

#ifdef GL_NV_parameter_buffer_object
    GLH_EXTERN PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC GLH_EXT_NAME(glProgramBufferParametersfvNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC GLH_EXT_NAME(glProgramBufferParametersIivNV) GLH_INITIALIZER;
    GLH_EXTERN PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC GLH_EXT_NAME(glProgramBufferParametersIuivNV) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_framebuffer_multisample
    GLH_EXTERN PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC GLH_EXT_NAME(glRenderbufferStorageMultisampleEXT) GLH_INITIALIZER;
#endif

#ifdef GL_NV_framebuffer_multisample_coverage
    GLH_EXTERN PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC GLH_EXT_NAME(glRenderbufferStorageMultisampleCoverageNV) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_framebuffer_blit
    GLH_EXTERN PFNGLBLITFRAMEBUFFEREXTPROC GLH_EXT_NAME(glBlitFramebufferEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_draw_instanced
    GLH_EXTERN PFNGLDRAWARRAYSINSTANCEDEXTPROC GLH_EXT_NAME(glDrawArraysInstancedEXT) GLH_INITIALIZER;
    GLH_EXTERN PFNGLDRAWELEMENTSINSTANCEDEXTPROC GLH_EXT_NAME(glDrawElementsInstancedEXT) GLH_INITIALIZER;
#endif

#ifdef GL_EXT_texture_compression_rgtc
#endif


/* BEGIN EDITED BY VIS 22.02.2007 */
#if (defined(__cplusplus) && defined(_MSC_VER))
#ifdef GLH_EXT_SINGLE_FILE

int glh_init_extension(const char* extension)
{
    if (NULL == extension) {
        return GL_FALSE;
#ifndef _WIN32
    }
    if (0 == strcmp (extension, "GL_VERSION_1_2") || 0 == strcmp (extension, "GL_VERSION_1_3") || 0 == strcmp (extension, "GL_VERSION_1_4")) {
        return GL_TRUE;
#endif
#if defined(GL_VERSION_1_2) || defined(GL_VERSION_1_3) || defined(GL_VERSION_1_4) || defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    }
    if (0 == strcmp(extension, "GL_VERSION_1_2")) {
        GLH_CORE_NAME(glBlendColor) = (PFNGLBLENDCOLORPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColor");
        if (NULL == GLH_CORE_NAME(glBlendColor))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquation) = (PFNGLBLENDEQUATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquation");
        if (NULL == GLH_CORE_NAME(glBlendEquation))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawRangeElements) = (PFNGLDRAWRANGEELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElements");
        if (NULL == GLH_CORE_NAME(glDrawRangeElements))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTable) = (PFNGLCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTable");
        if (NULL == GLH_CORE_NAME(glColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameterfv) = (PFNGLCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameteriv) = (PFNGLCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorTable) = (PFNGLCOPYCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorTable");
        if (NULL == GLH_CORE_NAME(glCopyColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTable) = (PFNGLGETCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTable");
        if (NULL == GLH_CORE_NAME(glGetColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameterfv) = (PFNGLGETCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameteriv) = (PFNGLGETCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorSubTable) = (PFNGLCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorSubTable");
        if (NULL == GLH_CORE_NAME(glColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorSubTable) = (PFNGLCOPYCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorSubTable");
        if (NULL == GLH_CORE_NAME(glCopyColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter1D) = (PFNGLCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter2D) = (PFNGLCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterf) = (PFNGLCONVOLUTIONPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterf");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterfv) = (PFNGLCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteri) = (PFNGLCONVOLUTIONPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteri");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteriv) = (PFNGLCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter1D) = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter2D) = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionFilter) = (PFNGLGETCONVOLUTIONFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionFilter");
        if (NULL == GLH_CORE_NAME(glGetConvolutionFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameterfv) = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameteriv) = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetSeparableFilter) = (PFNGLGETSEPARABLEFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSeparableFilter");
        if (NULL == GLH_CORE_NAME(glGetSeparableFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glSeparableFilter2D) = (PFNGLSEPARABLEFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glSeparableFilter2D");
        if (NULL == GLH_CORE_NAME(glSeparableFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogram) = (PFNGLGETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogram");
        if (NULL == GLH_CORE_NAME(glGetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameterfv) = (PFNGLGETHISTOGRAMPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterfv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameteriv) = (PFNGLGETHISTOGRAMPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameteriv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmax) = (PFNGLGETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmax");
        if (NULL == GLH_CORE_NAME(glGetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameterfv) = (PFNGLGETMINMAXPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterfv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameteriv) = (PFNGLGETMINMAXPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameteriv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glHistogram) = (PFNGLHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glHistogram");
        if (NULL == GLH_CORE_NAME(glHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glMinmax) = (PFNGLMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glMinmax");
        if (NULL == GLH_CORE_NAME(glMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glResetHistogram) = (PFNGLRESETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glResetHistogram");
        if (NULL == GLH_CORE_NAME(glResetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glResetMinmax) = (PFNGLRESETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glResetMinmax");
        if (NULL == GLH_CORE_NAME(glResetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glTexImage3D) = (PFNGLTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage3D");
        if (NULL == GLH_CORE_NAME(glTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glTexSubImage3D) = (PFNGLTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyTexSubImage3D) = (PFNGLCOPYTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCopyTexSubImage3D))
            return GL_FALSE;
        return GL_TRUE;
#endif

#if defined(GL_VERSION_1_3) || defined(GL_VERSION_1_4) || defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    }
    if (0 == strcmp(extension, "GL_VERSION_1_3")) {
        GLH_CORE_NAME(glBlendColor) = (PFNGLBLENDCOLORPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColor");
        if (NULL == GLH_CORE_NAME(glBlendColor))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquation) = (PFNGLBLENDEQUATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquation");
        if (NULL == GLH_CORE_NAME(glBlendEquation))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawRangeElements) = (PFNGLDRAWRANGEELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElements");
        if (NULL == GLH_CORE_NAME(glDrawRangeElements))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTable) = (PFNGLCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTable");
        if (NULL == GLH_CORE_NAME(glColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameterfv) = (PFNGLCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameteriv) = (PFNGLCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorTable) = (PFNGLCOPYCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorTable");
        if (NULL == GLH_CORE_NAME(glCopyColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTable) = (PFNGLGETCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTable");
        if (NULL == GLH_CORE_NAME(glGetColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameterfv) = (PFNGLGETCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameteriv) = (PFNGLGETCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorSubTable) = (PFNGLCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorSubTable");
        if (NULL == GLH_CORE_NAME(glColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorSubTable) = (PFNGLCOPYCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorSubTable");
        if (NULL == GLH_CORE_NAME(glCopyColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter1D) = (PFNGLCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter2D) = (PFNGLCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterf) = (PFNGLCONVOLUTIONPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterf");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterfv) = (PFNGLCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteri) = (PFNGLCONVOLUTIONPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteri");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteriv) = (PFNGLCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter1D) = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter2D) = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionFilter) = (PFNGLGETCONVOLUTIONFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionFilter");
        if (NULL == GLH_CORE_NAME(glGetConvolutionFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameterfv) = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameteriv) = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetSeparableFilter) = (PFNGLGETSEPARABLEFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSeparableFilter");
        if (NULL == GLH_CORE_NAME(glGetSeparableFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glSeparableFilter2D) = (PFNGLSEPARABLEFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glSeparableFilter2D");
        if (NULL == GLH_CORE_NAME(glSeparableFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogram) = (PFNGLGETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogram");
        if (NULL == GLH_CORE_NAME(glGetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameterfv) = (PFNGLGETHISTOGRAMPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterfv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameteriv) = (PFNGLGETHISTOGRAMPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameteriv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmax) = (PFNGLGETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmax");
        if (NULL == GLH_CORE_NAME(glGetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameterfv) = (PFNGLGETMINMAXPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterfv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameteriv) = (PFNGLGETMINMAXPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameteriv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glHistogram) = (PFNGLHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glHistogram");
        if (NULL == GLH_CORE_NAME(glHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glMinmax) = (PFNGLMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glMinmax");
        if (NULL == GLH_CORE_NAME(glMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glResetHistogram) = (PFNGLRESETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glResetHistogram");
        if (NULL == GLH_CORE_NAME(glResetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glResetMinmax) = (PFNGLRESETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glResetMinmax");
        if (NULL == GLH_CORE_NAME(glResetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glTexImage3D) = (PFNGLTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage3D");
        if (NULL == GLH_CORE_NAME(glTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glTexSubImage3D) = (PFNGLTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyTexSubImage3D) = (PFNGLCOPYTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCopyTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glActiveTexture) = (PFNGLACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveTexture");
        if (NULL == GLH_CORE_NAME(glActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glClientActiveTexture) = (PFNGLCLIENTACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glClientActiveTexture");
        if (NULL == GLH_CORE_NAME(glClientActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1d) = (PFNGLMULTITEXCOORD1DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1dv) = (PFNGLMULTITEXCOORD1DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1f) = (PFNGLMULTITEXCOORD1FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1fv) = (PFNGLMULTITEXCOORD1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1i) = (PFNGLMULTITEXCOORD1IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1iv) = (PFNGLMULTITEXCOORD1IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1s) = (PFNGLMULTITEXCOORD1SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1sv) = (PFNGLMULTITEXCOORD1SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2d) = (PFNGLMULTITEXCOORD2DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2dv) = (PFNGLMULTITEXCOORD2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2f) = (PFNGLMULTITEXCOORD2FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2fv) = (PFNGLMULTITEXCOORD2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2i) = (PFNGLMULTITEXCOORD2IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2iv) = (PFNGLMULTITEXCOORD2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2s) = (PFNGLMULTITEXCOORD2SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2sv) = (PFNGLMULTITEXCOORD2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3d) = (PFNGLMULTITEXCOORD3DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3dv) = (PFNGLMULTITEXCOORD3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3f) = (PFNGLMULTITEXCOORD3FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3fv) = (PFNGLMULTITEXCOORD3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3i) = (PFNGLMULTITEXCOORD3IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3iv) = (PFNGLMULTITEXCOORD3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3s) = (PFNGLMULTITEXCOORD3SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3sv) = (PFNGLMULTITEXCOORD3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4d) = (PFNGLMULTITEXCOORD4DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4dv) = (PFNGLMULTITEXCOORD4DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4f) = (PFNGLMULTITEXCOORD4FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4fv) = (PFNGLMULTITEXCOORD4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4i) = (PFNGLMULTITEXCOORD4IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4iv) = (PFNGLMULTITEXCOORD4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4s) = (PFNGLMULTITEXCOORD4SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4sv) = (PFNGLMULTITEXCOORD4SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4sv))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixf) = (PFNGLLOADTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixd) = (PFNGLLOADTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixf) = (PFNGLMULTTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixd) = (PFNGLMULTTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glSampleCoverage) = (PFNGLSAMPLECOVERAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleCoverage");
        if (NULL == GLH_CORE_NAME(glSampleCoverage))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage3D) = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage2D) = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage1D) = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage3D) = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage2D) = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage1D) = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetCompressedTexImage) = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCompressedTexImage");
        if (NULL == GLH_CORE_NAME(glGetCompressedTexImage))
            return GL_FALSE;
        return GL_TRUE;
#endif

#if defined(GL_VERSION_1_4) || defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    }
    if (0 == strcmp(extension, "GL_VERSION_1_4")) {
        GLH_CORE_NAME(glBlendColor) = (PFNGLBLENDCOLORPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColor");
        if (NULL == GLH_CORE_NAME(glBlendColor))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquation) = (PFNGLBLENDEQUATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquation");
        if (NULL == GLH_CORE_NAME(glBlendEquation))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawRangeElements) = (PFNGLDRAWRANGEELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElements");
        if (NULL == GLH_CORE_NAME(glDrawRangeElements))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTable) = (PFNGLCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTable");
        if (NULL == GLH_CORE_NAME(glColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameterfv) = (PFNGLCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameteriv) = (PFNGLCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorTable) = (PFNGLCOPYCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorTable");
        if (NULL == GLH_CORE_NAME(glCopyColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTable) = (PFNGLGETCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTable");
        if (NULL == GLH_CORE_NAME(glGetColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameterfv) = (PFNGLGETCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameteriv) = (PFNGLGETCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorSubTable) = (PFNGLCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorSubTable");
        if (NULL == GLH_CORE_NAME(glColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorSubTable) = (PFNGLCOPYCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorSubTable");
        if (NULL == GLH_CORE_NAME(glCopyColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter1D) = (PFNGLCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter2D) = (PFNGLCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterf) = (PFNGLCONVOLUTIONPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterf");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterfv) = (PFNGLCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteri) = (PFNGLCONVOLUTIONPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteri");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteriv) = (PFNGLCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter1D) = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter2D) = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionFilter) = (PFNGLGETCONVOLUTIONFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionFilter");
        if (NULL == GLH_CORE_NAME(glGetConvolutionFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameterfv) = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameteriv) = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetSeparableFilter) = (PFNGLGETSEPARABLEFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSeparableFilter");
        if (NULL == GLH_CORE_NAME(glGetSeparableFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glSeparableFilter2D) = (PFNGLSEPARABLEFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glSeparableFilter2D");
        if (NULL == GLH_CORE_NAME(glSeparableFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogram) = (PFNGLGETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogram");
        if (NULL == GLH_CORE_NAME(glGetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameterfv) = (PFNGLGETHISTOGRAMPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterfv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameteriv) = (PFNGLGETHISTOGRAMPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameteriv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmax) = (PFNGLGETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmax");
        if (NULL == GLH_CORE_NAME(glGetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameterfv) = (PFNGLGETMINMAXPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterfv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameteriv) = (PFNGLGETMINMAXPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameteriv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glHistogram) = (PFNGLHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glHistogram");
        if (NULL == GLH_CORE_NAME(glHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glMinmax) = (PFNGLMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glMinmax");
        if (NULL == GLH_CORE_NAME(glMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glResetHistogram) = (PFNGLRESETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glResetHistogram");
        if (NULL == GLH_CORE_NAME(glResetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glResetMinmax) = (PFNGLRESETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glResetMinmax");
        if (NULL == GLH_CORE_NAME(glResetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glTexImage3D) = (PFNGLTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage3D");
        if (NULL == GLH_CORE_NAME(glTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glTexSubImage3D) = (PFNGLTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyTexSubImage3D) = (PFNGLCOPYTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCopyTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glActiveTexture) = (PFNGLACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveTexture");
        if (NULL == GLH_CORE_NAME(glActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glClientActiveTexture) = (PFNGLCLIENTACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glClientActiveTexture");
        if (NULL == GLH_CORE_NAME(glClientActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1d) = (PFNGLMULTITEXCOORD1DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1dv) = (PFNGLMULTITEXCOORD1DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1f) = (PFNGLMULTITEXCOORD1FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1fv) = (PFNGLMULTITEXCOORD1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1i) = (PFNGLMULTITEXCOORD1IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1iv) = (PFNGLMULTITEXCOORD1IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1s) = (PFNGLMULTITEXCOORD1SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1sv) = (PFNGLMULTITEXCOORD1SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2d) = (PFNGLMULTITEXCOORD2DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2dv) = (PFNGLMULTITEXCOORD2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2f) = (PFNGLMULTITEXCOORD2FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2fv) = (PFNGLMULTITEXCOORD2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2i) = (PFNGLMULTITEXCOORD2IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2iv) = (PFNGLMULTITEXCOORD2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2s) = (PFNGLMULTITEXCOORD2SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2sv) = (PFNGLMULTITEXCOORD2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3d) = (PFNGLMULTITEXCOORD3DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3dv) = (PFNGLMULTITEXCOORD3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3f) = (PFNGLMULTITEXCOORD3FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3fv) = (PFNGLMULTITEXCOORD3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3i) = (PFNGLMULTITEXCOORD3IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3iv) = (PFNGLMULTITEXCOORD3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3s) = (PFNGLMULTITEXCOORD3SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3sv) = (PFNGLMULTITEXCOORD3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4d) = (PFNGLMULTITEXCOORD4DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4dv) = (PFNGLMULTITEXCOORD4DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4f) = (PFNGLMULTITEXCOORD4FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4fv) = (PFNGLMULTITEXCOORD4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4i) = (PFNGLMULTITEXCOORD4IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4iv) = (PFNGLMULTITEXCOORD4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4s) = (PFNGLMULTITEXCOORD4SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4sv) = (PFNGLMULTITEXCOORD4SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4sv))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixf) = (PFNGLLOADTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixd) = (PFNGLLOADTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixf) = (PFNGLMULTTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixd) = (PFNGLMULTTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glSampleCoverage) = (PFNGLSAMPLECOVERAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleCoverage");
        if (NULL == GLH_CORE_NAME(glSampleCoverage))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage3D) = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage2D) = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage1D) = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage3D) = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage2D) = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage1D) = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetCompressedTexImage) = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCompressedTexImage");
        if (NULL == GLH_CORE_NAME(glGetCompressedTexImage))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendFuncSeparate) = (PFNGLBLENDFUNCSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendFuncSeparate");
        if (NULL == GLH_CORE_NAME(glBlendFuncSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordf) = (PFNGLFOGCOORDFPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordf");
        if (NULL == GLH_CORE_NAME(glFogCoordf))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordfv) = (PFNGLFOGCOORDFVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordfv");
        if (NULL == GLH_CORE_NAME(glFogCoordfv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordd) = (PFNGLFOGCOORDDPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordd");
        if (NULL == GLH_CORE_NAME(glFogCoordd))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoorddv) = (PFNGLFOGCOORDDVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoorddv");
        if (NULL == GLH_CORE_NAME(glFogCoorddv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordPointer) = (PFNGLFOGCOORDPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordPointer");
        if (NULL == GLH_CORE_NAME(glFogCoordPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawArrays) = (PFNGLMULTIDRAWARRAYSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawArrays");
        if (NULL == GLH_CORE_NAME(glMultiDrawArrays))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawElements) = (PFNGLMULTIDRAWELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawElements");
        if (NULL == GLH_CORE_NAME(glMultiDrawElements))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterf) = (PFNGLPOINTPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterf");
        if (NULL == GLH_CORE_NAME(glPointParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterfv) = (PFNGLPOINTPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfv");
        if (NULL == GLH_CORE_NAME(glPointParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteri) = (PFNGLPOINTPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteri");
        if (NULL == GLH_CORE_NAME(glPointParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteriv) = (PFNGLPOINTPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteriv");
        if (NULL == GLH_CORE_NAME(glPointParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3b) = (PFNGLSECONDARYCOLOR3BPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3b");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3b))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3bv) = (PFNGLSECONDARYCOLOR3BVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3bv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3bv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3d) = (PFNGLSECONDARYCOLOR3DPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3d");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3d))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3dv) = (PFNGLSECONDARYCOLOR3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3dv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3f) = (PFNGLSECONDARYCOLOR3FPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3f");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3f))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3fv) = (PFNGLSECONDARYCOLOR3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3fv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3i) = (PFNGLSECONDARYCOLOR3IPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3i");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3i))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3iv) = (PFNGLSECONDARYCOLOR3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3iv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3s) = (PFNGLSECONDARYCOLOR3SPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3s");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3s))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3sv) = (PFNGLSECONDARYCOLOR3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3sv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ub) = (PFNGLSECONDARYCOLOR3UBPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ub");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ub))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ubv) = (PFNGLSECONDARYCOLOR3UBVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ubv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ubv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ui) = (PFNGLSECONDARYCOLOR3UIPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ui");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ui))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3uiv) = (PFNGLSECONDARYCOLOR3UIVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3uiv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3uiv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3us) = (PFNGLSECONDARYCOLOR3USPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3us");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3us))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3usv) = (PFNGLSECONDARYCOLOR3USVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3usv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3usv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColorPointer) = (PFNGLSECONDARYCOLORPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColorPointer");
        if (NULL == GLH_CORE_NAME(glSecondaryColorPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2d) = (PFNGLWINDOWPOS2DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2d");
        if (NULL == GLH_CORE_NAME(glWindowPos2d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2dv) = (PFNGLWINDOWPOS2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dv");
        if (NULL == GLH_CORE_NAME(glWindowPos2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2f) = (PFNGLWINDOWPOS2FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2f");
        if (NULL == GLH_CORE_NAME(glWindowPos2f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2fv) = (PFNGLWINDOWPOS2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fv");
        if (NULL == GLH_CORE_NAME(glWindowPos2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2i) = (PFNGLWINDOWPOS2IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2i");
        if (NULL == GLH_CORE_NAME(glWindowPos2i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2iv) = (PFNGLWINDOWPOS2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2iv");
        if (NULL == GLH_CORE_NAME(glWindowPos2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2s) = (PFNGLWINDOWPOS2SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2s");
        if (NULL == GLH_CORE_NAME(glWindowPos2s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2sv) = (PFNGLWINDOWPOS2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2sv");
        if (NULL == GLH_CORE_NAME(glWindowPos2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3d) = (PFNGLWINDOWPOS3DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3d");
        if (NULL == GLH_CORE_NAME(glWindowPos3d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3dv) = (PFNGLWINDOWPOS3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dv");
        if (NULL == GLH_CORE_NAME(glWindowPos3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3f) = (PFNGLWINDOWPOS3FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3f");
        if (NULL == GLH_CORE_NAME(glWindowPos3f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3fv) = (PFNGLWINDOWPOS3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fv");
        if (NULL == GLH_CORE_NAME(glWindowPos3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3i) = (PFNGLWINDOWPOS3IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3i");
        if (NULL == GLH_CORE_NAME(glWindowPos3i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3iv) = (PFNGLWINDOWPOS3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3iv");
        if (NULL == GLH_CORE_NAME(glWindowPos3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3s) = (PFNGLWINDOWPOS3SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3s");
        if (NULL == GLH_CORE_NAME(glWindowPos3s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3sv) = (PFNGLWINDOWPOS3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3sv");
        if (NULL == GLH_CORE_NAME(glWindowPos3sv))
            return GL_FALSE;
        return GL_TRUE;
#endif

#if defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    }
    if (0 == strcmp(extension, "GL_VERSION_1_5")) {
        GLH_CORE_NAME(glBlendColor) = (PFNGLBLENDCOLORPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColor");
        if (NULL == GLH_CORE_NAME(glBlendColor))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquation) = (PFNGLBLENDEQUATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquation");
        if (NULL == GLH_CORE_NAME(glBlendEquation))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawRangeElements) = (PFNGLDRAWRANGEELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElements");
        if (NULL == GLH_CORE_NAME(glDrawRangeElements))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTable) = (PFNGLCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTable");
        if (NULL == GLH_CORE_NAME(glColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameterfv) = (PFNGLCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameteriv) = (PFNGLCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorTable) = (PFNGLCOPYCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorTable");
        if (NULL == GLH_CORE_NAME(glCopyColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTable) = (PFNGLGETCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTable");
        if (NULL == GLH_CORE_NAME(glGetColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameterfv) = (PFNGLGETCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameteriv) = (PFNGLGETCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorSubTable) = (PFNGLCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorSubTable");
        if (NULL == GLH_CORE_NAME(glColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorSubTable) = (PFNGLCOPYCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorSubTable");
        if (NULL == GLH_CORE_NAME(glCopyColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter1D) = (PFNGLCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter2D) = (PFNGLCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterf) = (PFNGLCONVOLUTIONPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterf");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterfv) = (PFNGLCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteri) = (PFNGLCONVOLUTIONPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteri");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteriv) = (PFNGLCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter1D) = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter2D) = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionFilter) = (PFNGLGETCONVOLUTIONFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionFilter");
        if (NULL == GLH_CORE_NAME(glGetConvolutionFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameterfv) = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameteriv) = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetSeparableFilter) = (PFNGLGETSEPARABLEFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSeparableFilter");
        if (NULL == GLH_CORE_NAME(glGetSeparableFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glSeparableFilter2D) = (PFNGLSEPARABLEFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glSeparableFilter2D");
        if (NULL == GLH_CORE_NAME(glSeparableFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogram) = (PFNGLGETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogram");
        if (NULL == GLH_CORE_NAME(glGetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameterfv) = (PFNGLGETHISTOGRAMPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterfv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameteriv) = (PFNGLGETHISTOGRAMPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameteriv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmax) = (PFNGLGETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmax");
        if (NULL == GLH_CORE_NAME(glGetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameterfv) = (PFNGLGETMINMAXPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterfv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameteriv) = (PFNGLGETMINMAXPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameteriv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glHistogram) = (PFNGLHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glHistogram");
        if (NULL == GLH_CORE_NAME(glHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glMinmax) = (PFNGLMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glMinmax");
        if (NULL == GLH_CORE_NAME(glMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glResetHistogram) = (PFNGLRESETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glResetHistogram");
        if (NULL == GLH_CORE_NAME(glResetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glResetMinmax) = (PFNGLRESETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glResetMinmax");
        if (NULL == GLH_CORE_NAME(glResetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glTexImage3D) = (PFNGLTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage3D");
        if (NULL == GLH_CORE_NAME(glTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glTexSubImage3D) = (PFNGLTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyTexSubImage3D) = (PFNGLCOPYTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCopyTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glActiveTexture) = (PFNGLACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveTexture");
        if (NULL == GLH_CORE_NAME(glActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glClientActiveTexture) = (PFNGLCLIENTACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glClientActiveTexture");
        if (NULL == GLH_CORE_NAME(glClientActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1d) = (PFNGLMULTITEXCOORD1DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1dv) = (PFNGLMULTITEXCOORD1DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1f) = (PFNGLMULTITEXCOORD1FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1fv) = (PFNGLMULTITEXCOORD1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1i) = (PFNGLMULTITEXCOORD1IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1iv) = (PFNGLMULTITEXCOORD1IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1s) = (PFNGLMULTITEXCOORD1SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1sv) = (PFNGLMULTITEXCOORD1SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2d) = (PFNGLMULTITEXCOORD2DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2dv) = (PFNGLMULTITEXCOORD2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2f) = (PFNGLMULTITEXCOORD2FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2fv) = (PFNGLMULTITEXCOORD2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2i) = (PFNGLMULTITEXCOORD2IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2iv) = (PFNGLMULTITEXCOORD2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2s) = (PFNGLMULTITEXCOORD2SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2sv) = (PFNGLMULTITEXCOORD2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3d) = (PFNGLMULTITEXCOORD3DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3dv) = (PFNGLMULTITEXCOORD3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3f) = (PFNGLMULTITEXCOORD3FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3fv) = (PFNGLMULTITEXCOORD3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3i) = (PFNGLMULTITEXCOORD3IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3iv) = (PFNGLMULTITEXCOORD3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3s) = (PFNGLMULTITEXCOORD3SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3sv) = (PFNGLMULTITEXCOORD3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4d) = (PFNGLMULTITEXCOORD4DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4dv) = (PFNGLMULTITEXCOORD4DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4f) = (PFNGLMULTITEXCOORD4FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4fv) = (PFNGLMULTITEXCOORD4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4i) = (PFNGLMULTITEXCOORD4IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4iv) = (PFNGLMULTITEXCOORD4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4s) = (PFNGLMULTITEXCOORD4SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4sv) = (PFNGLMULTITEXCOORD4SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4sv))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixf) = (PFNGLLOADTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixd) = (PFNGLLOADTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixf) = (PFNGLMULTTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixd) = (PFNGLMULTTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glSampleCoverage) = (PFNGLSAMPLECOVERAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleCoverage");
        if (NULL == GLH_CORE_NAME(glSampleCoverage))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage3D) = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage2D) = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage1D) = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage3D) = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage2D) = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage1D) = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetCompressedTexImage) = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCompressedTexImage");
        if (NULL == GLH_CORE_NAME(glGetCompressedTexImage))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendFuncSeparate) = (PFNGLBLENDFUNCSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendFuncSeparate");
        if (NULL == GLH_CORE_NAME(glBlendFuncSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordf) = (PFNGLFOGCOORDFPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordf");
        if (NULL == GLH_CORE_NAME(glFogCoordf))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordfv) = (PFNGLFOGCOORDFVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordfv");
        if (NULL == GLH_CORE_NAME(glFogCoordfv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordd) = (PFNGLFOGCOORDDPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordd");
        if (NULL == GLH_CORE_NAME(glFogCoordd))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoorddv) = (PFNGLFOGCOORDDVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoorddv");
        if (NULL == GLH_CORE_NAME(glFogCoorddv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordPointer) = (PFNGLFOGCOORDPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordPointer");
        if (NULL == GLH_CORE_NAME(glFogCoordPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawArrays) = (PFNGLMULTIDRAWARRAYSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawArrays");
        if (NULL == GLH_CORE_NAME(glMultiDrawArrays))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawElements) = (PFNGLMULTIDRAWELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawElements");
        if (NULL == GLH_CORE_NAME(glMultiDrawElements))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterf) = (PFNGLPOINTPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterf");
        if (NULL == GLH_CORE_NAME(glPointParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterfv) = (PFNGLPOINTPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfv");
        if (NULL == GLH_CORE_NAME(glPointParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteri) = (PFNGLPOINTPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteri");
        if (NULL == GLH_CORE_NAME(glPointParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteriv) = (PFNGLPOINTPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteriv");
        if (NULL == GLH_CORE_NAME(glPointParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3b) = (PFNGLSECONDARYCOLOR3BPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3b");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3b))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3bv) = (PFNGLSECONDARYCOLOR3BVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3bv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3bv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3d) = (PFNGLSECONDARYCOLOR3DPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3d");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3d))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3dv) = (PFNGLSECONDARYCOLOR3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3dv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3f) = (PFNGLSECONDARYCOLOR3FPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3f");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3f))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3fv) = (PFNGLSECONDARYCOLOR3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3fv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3i) = (PFNGLSECONDARYCOLOR3IPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3i");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3i))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3iv) = (PFNGLSECONDARYCOLOR3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3iv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3s) = (PFNGLSECONDARYCOLOR3SPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3s");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3s))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3sv) = (PFNGLSECONDARYCOLOR3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3sv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ub) = (PFNGLSECONDARYCOLOR3UBPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ub");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ub))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ubv) = (PFNGLSECONDARYCOLOR3UBVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ubv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ubv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ui) = (PFNGLSECONDARYCOLOR3UIPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ui");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ui))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3uiv) = (PFNGLSECONDARYCOLOR3UIVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3uiv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3uiv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3us) = (PFNGLSECONDARYCOLOR3USPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3us");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3us))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3usv) = (PFNGLSECONDARYCOLOR3USVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3usv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3usv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColorPointer) = (PFNGLSECONDARYCOLORPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColorPointer");
        if (NULL == GLH_CORE_NAME(glSecondaryColorPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2d) = (PFNGLWINDOWPOS2DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2d");
        if (NULL == GLH_CORE_NAME(glWindowPos2d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2dv) = (PFNGLWINDOWPOS2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dv");
        if (NULL == GLH_CORE_NAME(glWindowPos2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2f) = (PFNGLWINDOWPOS2FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2f");
        if (NULL == GLH_CORE_NAME(glWindowPos2f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2fv) = (PFNGLWINDOWPOS2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fv");
        if (NULL == GLH_CORE_NAME(glWindowPos2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2i) = (PFNGLWINDOWPOS2IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2i");
        if (NULL == GLH_CORE_NAME(glWindowPos2i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2iv) = (PFNGLWINDOWPOS2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2iv");
        if (NULL == GLH_CORE_NAME(glWindowPos2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2s) = (PFNGLWINDOWPOS2SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2s");
        if (NULL == GLH_CORE_NAME(glWindowPos2s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2sv) = (PFNGLWINDOWPOS2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2sv");
        if (NULL == GLH_CORE_NAME(glWindowPos2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3d) = (PFNGLWINDOWPOS3DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3d");
        if (NULL == GLH_CORE_NAME(glWindowPos3d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3dv) = (PFNGLWINDOWPOS3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dv");
        if (NULL == GLH_CORE_NAME(glWindowPos3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3f) = (PFNGLWINDOWPOS3FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3f");
        if (NULL == GLH_CORE_NAME(glWindowPos3f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3fv) = (PFNGLWINDOWPOS3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fv");
        if (NULL == GLH_CORE_NAME(glWindowPos3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3i) = (PFNGLWINDOWPOS3IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3i");
        if (NULL == GLH_CORE_NAME(glWindowPos3i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3iv) = (PFNGLWINDOWPOS3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3iv");
        if (NULL == GLH_CORE_NAME(glWindowPos3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3s) = (PFNGLWINDOWPOS3SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3s");
        if (NULL == GLH_CORE_NAME(glWindowPos3s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3sv) = (PFNGLWINDOWPOS3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3sv");
        if (NULL == GLH_CORE_NAME(glWindowPos3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glGenQueries) = (PFNGLGENQUERIESPROC)GLH_EXT_GET_PROC_ADDRESS("glGenQueries");
        if (NULL == GLH_CORE_NAME(glGenQueries))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteQueries) = (PFNGLDELETEQUERIESPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteQueries");
        if (NULL == GLH_CORE_NAME(glDeleteQueries))
            return GL_FALSE;
        GLH_CORE_NAME(glIsQuery) = (PFNGLISQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glIsQuery");
        if (NULL == GLH_CORE_NAME(glIsQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glBeginQuery) = (PFNGLBEGINQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginQuery");
        if (NULL == GLH_CORE_NAME(glBeginQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glEndQuery) = (PFNGLENDQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glEndQuery");
        if (NULL == GLH_CORE_NAME(glEndQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryiv) = (PFNGLGETQUERYIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryiv");
        if (NULL == GLH_CORE_NAME(glGetQueryiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryObjectiv) = (PFNGLGETQUERYOBJECTIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectiv");
        if (NULL == GLH_CORE_NAME(glGetQueryObjectiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryObjectuiv) = (PFNGLGETQUERYOBJECTUIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectuiv");
        if (NULL == GLH_CORE_NAME(glGetQueryObjectuiv))
            return GL_FALSE;
        GLH_CORE_NAME(glBindBuffer) = (PFNGLBINDBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glBindBuffer");
        if (NULL == GLH_CORE_NAME(glBindBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteBuffers) = (PFNGLDELETEBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteBuffers");
        if (NULL == GLH_CORE_NAME(glDeleteBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glGenBuffers) = (PFNGLGENBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glGenBuffers");
        if (NULL == GLH_CORE_NAME(glGenBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glIsBuffer) = (PFNGLISBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glIsBuffer");
        if (NULL == GLH_CORE_NAME(glIsBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glBufferData) = (PFNGLBUFFERDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferData");
        if (NULL == GLH_CORE_NAME(glBufferData))
            return GL_FALSE;
        GLH_CORE_NAME(glBufferSubData) = (PFNGLBUFFERSUBDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferSubData");
        if (NULL == GLH_CORE_NAME(glBufferSubData))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferSubData) = (PFNGLGETBUFFERSUBDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferSubData");
        if (NULL == GLH_CORE_NAME(glGetBufferSubData))
            return GL_FALSE;
        GLH_CORE_NAME(glMapBuffer) = (PFNGLMAPBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glMapBuffer");
        if (NULL == GLH_CORE_NAME(glMapBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glUnmapBuffer) = (PFNGLUNMAPBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glUnmapBuffer");
        if (NULL == GLH_CORE_NAME(glUnmapBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferParameteriv) = (PFNGLGETBUFFERPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferParameteriv");
        if (NULL == GLH_CORE_NAME(glGetBufferParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferPointerv) = (PFNGLGETBUFFERPOINTERVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferPointerv");
        if (NULL == GLH_CORE_NAME(glGetBufferPointerv))
            return GL_FALSE;
        return GL_TRUE;
#endif

#if defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    }
    if (0 == strcmp(extension, "GL_VERSION_2_0")) {
        GLH_CORE_NAME(glBlendColor) = (PFNGLBLENDCOLORPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColor");
        if (NULL == GLH_CORE_NAME(glBlendColor))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquation) = (PFNGLBLENDEQUATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquation");
        if (NULL == GLH_CORE_NAME(glBlendEquation))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawRangeElements) = (PFNGLDRAWRANGEELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElements");
        if (NULL == GLH_CORE_NAME(glDrawRangeElements))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTable) = (PFNGLCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTable");
        if (NULL == GLH_CORE_NAME(glColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameterfv) = (PFNGLCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameteriv) = (PFNGLCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorTable) = (PFNGLCOPYCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorTable");
        if (NULL == GLH_CORE_NAME(glCopyColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTable) = (PFNGLGETCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTable");
        if (NULL == GLH_CORE_NAME(glGetColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameterfv) = (PFNGLGETCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameteriv) = (PFNGLGETCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorSubTable) = (PFNGLCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorSubTable");
        if (NULL == GLH_CORE_NAME(glColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorSubTable) = (PFNGLCOPYCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorSubTable");
        if (NULL == GLH_CORE_NAME(glCopyColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter1D) = (PFNGLCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter2D) = (PFNGLCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterf) = (PFNGLCONVOLUTIONPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterf");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterfv) = (PFNGLCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteri) = (PFNGLCONVOLUTIONPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteri");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteriv) = (PFNGLCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter1D) = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter2D) = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionFilter) = (PFNGLGETCONVOLUTIONFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionFilter");
        if (NULL == GLH_CORE_NAME(glGetConvolutionFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameterfv) = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameteriv) = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetSeparableFilter) = (PFNGLGETSEPARABLEFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSeparableFilter");
        if (NULL == GLH_CORE_NAME(glGetSeparableFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glSeparableFilter2D) = (PFNGLSEPARABLEFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glSeparableFilter2D");
        if (NULL == GLH_CORE_NAME(glSeparableFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogram) = (PFNGLGETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogram");
        if (NULL == GLH_CORE_NAME(glGetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameterfv) = (PFNGLGETHISTOGRAMPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterfv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameteriv) = (PFNGLGETHISTOGRAMPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameteriv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmax) = (PFNGLGETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmax");
        if (NULL == GLH_CORE_NAME(glGetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameterfv) = (PFNGLGETMINMAXPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterfv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameteriv) = (PFNGLGETMINMAXPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameteriv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glHistogram) = (PFNGLHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glHistogram");
        if (NULL == GLH_CORE_NAME(glHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glMinmax) = (PFNGLMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glMinmax");
        if (NULL == GLH_CORE_NAME(glMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glResetHistogram) = (PFNGLRESETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glResetHistogram");
        if (NULL == GLH_CORE_NAME(glResetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glResetMinmax) = (PFNGLRESETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glResetMinmax");
        if (NULL == GLH_CORE_NAME(glResetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glTexImage3D) = (PFNGLTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage3D");
        if (NULL == GLH_CORE_NAME(glTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glTexSubImage3D) = (PFNGLTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyTexSubImage3D) = (PFNGLCOPYTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCopyTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glActiveTexture) = (PFNGLACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveTexture");
        if (NULL == GLH_CORE_NAME(glActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glClientActiveTexture) = (PFNGLCLIENTACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glClientActiveTexture");
        if (NULL == GLH_CORE_NAME(glClientActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1d) = (PFNGLMULTITEXCOORD1DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1dv) = (PFNGLMULTITEXCOORD1DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1f) = (PFNGLMULTITEXCOORD1FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1fv) = (PFNGLMULTITEXCOORD1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1i) = (PFNGLMULTITEXCOORD1IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1iv) = (PFNGLMULTITEXCOORD1IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1s) = (PFNGLMULTITEXCOORD1SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1sv) = (PFNGLMULTITEXCOORD1SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2d) = (PFNGLMULTITEXCOORD2DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2dv) = (PFNGLMULTITEXCOORD2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2f) = (PFNGLMULTITEXCOORD2FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2fv) = (PFNGLMULTITEXCOORD2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2i) = (PFNGLMULTITEXCOORD2IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2iv) = (PFNGLMULTITEXCOORD2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2s) = (PFNGLMULTITEXCOORD2SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2sv) = (PFNGLMULTITEXCOORD2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3d) = (PFNGLMULTITEXCOORD3DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3dv) = (PFNGLMULTITEXCOORD3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3f) = (PFNGLMULTITEXCOORD3FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3fv) = (PFNGLMULTITEXCOORD3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3i) = (PFNGLMULTITEXCOORD3IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3iv) = (PFNGLMULTITEXCOORD3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3s) = (PFNGLMULTITEXCOORD3SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3sv) = (PFNGLMULTITEXCOORD3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4d) = (PFNGLMULTITEXCOORD4DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4dv) = (PFNGLMULTITEXCOORD4DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4f) = (PFNGLMULTITEXCOORD4FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4fv) = (PFNGLMULTITEXCOORD4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4i) = (PFNGLMULTITEXCOORD4IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4iv) = (PFNGLMULTITEXCOORD4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4s) = (PFNGLMULTITEXCOORD4SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4sv) = (PFNGLMULTITEXCOORD4SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4sv))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixf) = (PFNGLLOADTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixd) = (PFNGLLOADTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixf) = (PFNGLMULTTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixd) = (PFNGLMULTTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glSampleCoverage) = (PFNGLSAMPLECOVERAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleCoverage");
        if (NULL == GLH_CORE_NAME(glSampleCoverage))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage3D) = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage2D) = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage1D) = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage3D) = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage2D) = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage1D) = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetCompressedTexImage) = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCompressedTexImage");
        if (NULL == GLH_CORE_NAME(glGetCompressedTexImage))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendFuncSeparate) = (PFNGLBLENDFUNCSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendFuncSeparate");
        if (NULL == GLH_CORE_NAME(glBlendFuncSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordf) = (PFNGLFOGCOORDFPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordf");
        if (NULL == GLH_CORE_NAME(glFogCoordf))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordfv) = (PFNGLFOGCOORDFVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordfv");
        if (NULL == GLH_CORE_NAME(glFogCoordfv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordd) = (PFNGLFOGCOORDDPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordd");
        if (NULL == GLH_CORE_NAME(glFogCoordd))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoorddv) = (PFNGLFOGCOORDDVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoorddv");
        if (NULL == GLH_CORE_NAME(glFogCoorddv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordPointer) = (PFNGLFOGCOORDPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordPointer");
        if (NULL == GLH_CORE_NAME(glFogCoordPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawArrays) = (PFNGLMULTIDRAWARRAYSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawArrays");
        if (NULL == GLH_CORE_NAME(glMultiDrawArrays))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawElements) = (PFNGLMULTIDRAWELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawElements");
        if (NULL == GLH_CORE_NAME(glMultiDrawElements))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterf) = (PFNGLPOINTPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterf");
        if (NULL == GLH_CORE_NAME(glPointParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterfv) = (PFNGLPOINTPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfv");
        if (NULL == GLH_CORE_NAME(glPointParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteri) = (PFNGLPOINTPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteri");
        if (NULL == GLH_CORE_NAME(glPointParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteriv) = (PFNGLPOINTPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteriv");
        if (NULL == GLH_CORE_NAME(glPointParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3b) = (PFNGLSECONDARYCOLOR3BPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3b");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3b))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3bv) = (PFNGLSECONDARYCOLOR3BVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3bv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3bv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3d) = (PFNGLSECONDARYCOLOR3DPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3d");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3d))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3dv) = (PFNGLSECONDARYCOLOR3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3dv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3f) = (PFNGLSECONDARYCOLOR3FPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3f");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3f))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3fv) = (PFNGLSECONDARYCOLOR3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3fv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3i) = (PFNGLSECONDARYCOLOR3IPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3i");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3i))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3iv) = (PFNGLSECONDARYCOLOR3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3iv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3s) = (PFNGLSECONDARYCOLOR3SPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3s");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3s))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3sv) = (PFNGLSECONDARYCOLOR3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3sv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ub) = (PFNGLSECONDARYCOLOR3UBPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ub");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ub))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ubv) = (PFNGLSECONDARYCOLOR3UBVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ubv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ubv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ui) = (PFNGLSECONDARYCOLOR3UIPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ui");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ui))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3uiv) = (PFNGLSECONDARYCOLOR3UIVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3uiv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3uiv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3us) = (PFNGLSECONDARYCOLOR3USPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3us");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3us))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3usv) = (PFNGLSECONDARYCOLOR3USVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3usv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3usv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColorPointer) = (PFNGLSECONDARYCOLORPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColorPointer");
        if (NULL == GLH_CORE_NAME(glSecondaryColorPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2d) = (PFNGLWINDOWPOS2DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2d");
        if (NULL == GLH_CORE_NAME(glWindowPos2d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2dv) = (PFNGLWINDOWPOS2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dv");
        if (NULL == GLH_CORE_NAME(glWindowPos2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2f) = (PFNGLWINDOWPOS2FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2f");
        if (NULL == GLH_CORE_NAME(glWindowPos2f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2fv) = (PFNGLWINDOWPOS2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fv");
        if (NULL == GLH_CORE_NAME(glWindowPos2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2i) = (PFNGLWINDOWPOS2IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2i");
        if (NULL == GLH_CORE_NAME(glWindowPos2i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2iv) = (PFNGLWINDOWPOS2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2iv");
        if (NULL == GLH_CORE_NAME(glWindowPos2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2s) = (PFNGLWINDOWPOS2SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2s");
        if (NULL == GLH_CORE_NAME(glWindowPos2s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2sv) = (PFNGLWINDOWPOS2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2sv");
        if (NULL == GLH_CORE_NAME(glWindowPos2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3d) = (PFNGLWINDOWPOS3DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3d");
        if (NULL == GLH_CORE_NAME(glWindowPos3d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3dv) = (PFNGLWINDOWPOS3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dv");
        if (NULL == GLH_CORE_NAME(glWindowPos3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3f) = (PFNGLWINDOWPOS3FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3f");
        if (NULL == GLH_CORE_NAME(glWindowPos3f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3fv) = (PFNGLWINDOWPOS3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fv");
        if (NULL == GLH_CORE_NAME(glWindowPos3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3i) = (PFNGLWINDOWPOS3IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3i");
        if (NULL == GLH_CORE_NAME(glWindowPos3i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3iv) = (PFNGLWINDOWPOS3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3iv");
        if (NULL == GLH_CORE_NAME(glWindowPos3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3s) = (PFNGLWINDOWPOS3SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3s");
        if (NULL == GLH_CORE_NAME(glWindowPos3s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3sv) = (PFNGLWINDOWPOS3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3sv");
        if (NULL == GLH_CORE_NAME(glWindowPos3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glGenQueries) = (PFNGLGENQUERIESPROC)GLH_EXT_GET_PROC_ADDRESS("glGenQueries");
        if (NULL == GLH_CORE_NAME(glGenQueries))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteQueries) = (PFNGLDELETEQUERIESPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteQueries");
        if (NULL == GLH_CORE_NAME(glDeleteQueries))
            return GL_FALSE;
        GLH_CORE_NAME(glIsQuery) = (PFNGLISQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glIsQuery");
        if (NULL == GLH_CORE_NAME(glIsQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glBeginQuery) = (PFNGLBEGINQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginQuery");
        if (NULL == GLH_CORE_NAME(glBeginQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glEndQuery) = (PFNGLENDQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glEndQuery");
        if (NULL == GLH_CORE_NAME(glEndQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryiv) = (PFNGLGETQUERYIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryiv");
        if (NULL == GLH_CORE_NAME(glGetQueryiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryObjectiv) = (PFNGLGETQUERYOBJECTIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectiv");
        if (NULL == GLH_CORE_NAME(glGetQueryObjectiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryObjectuiv) = (PFNGLGETQUERYOBJECTUIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectuiv");
        if (NULL == GLH_CORE_NAME(glGetQueryObjectuiv))
            return GL_FALSE;
        GLH_CORE_NAME(glBindBuffer) = (PFNGLBINDBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glBindBuffer");
        if (NULL == GLH_CORE_NAME(glBindBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteBuffers) = (PFNGLDELETEBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteBuffers");
        if (NULL == GLH_CORE_NAME(glDeleteBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glGenBuffers) = (PFNGLGENBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glGenBuffers");
        if (NULL == GLH_CORE_NAME(glGenBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glIsBuffer) = (PFNGLISBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glIsBuffer");
        if (NULL == GLH_CORE_NAME(glIsBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glBufferData) = (PFNGLBUFFERDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferData");
        if (NULL == GLH_CORE_NAME(glBufferData))
            return GL_FALSE;
        GLH_CORE_NAME(glBufferSubData) = (PFNGLBUFFERSUBDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferSubData");
        if (NULL == GLH_CORE_NAME(glBufferSubData))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferSubData) = (PFNGLGETBUFFERSUBDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferSubData");
        if (NULL == GLH_CORE_NAME(glGetBufferSubData))
            return GL_FALSE;
        GLH_CORE_NAME(glMapBuffer) = (PFNGLMAPBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glMapBuffer");
        if (NULL == GLH_CORE_NAME(glMapBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glUnmapBuffer) = (PFNGLUNMAPBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glUnmapBuffer");
        if (NULL == GLH_CORE_NAME(glUnmapBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferParameteriv) = (PFNGLGETBUFFERPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferParameteriv");
        if (NULL == GLH_CORE_NAME(glGetBufferParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferPointerv) = (PFNGLGETBUFFERPOINTERVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferPointerv");
        if (NULL == GLH_CORE_NAME(glGetBufferPointerv))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquationSeparate) = (PFNGLBLENDEQUATIONSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquationSeparate");
        if (NULL == GLH_CORE_NAME(glBlendEquationSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawBuffers) = (PFNGLDRAWBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawBuffers");
        if (NULL == GLH_CORE_NAME(glDrawBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glStencilOpSeparate) = (PFNGLSTENCILOPSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilOpSeparate");
        if (NULL == GLH_CORE_NAME(glStencilOpSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glStencilFuncSeparate) = (PFNGLSTENCILFUNCSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilFuncSeparate");
        if (NULL == GLH_CORE_NAME(glStencilFuncSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glStencilMaskSeparate) = (PFNGLSTENCILMASKSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilMaskSeparate");
        if (NULL == GLH_CORE_NAME(glStencilMaskSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glAttachShader) = (PFNGLATTACHSHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glAttachShader");
        if (NULL == GLH_CORE_NAME(glAttachShader))
            return GL_FALSE;
        GLH_CORE_NAME(glBindAttribLocation) = (PFNGLBINDATTRIBLOCATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBindAttribLocation");
        if (NULL == GLH_CORE_NAME(glBindAttribLocation))
            return GL_FALSE;
        GLH_CORE_NAME(glCompileShader) = (PFNGLCOMPILESHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glCompileShader");
        if (NULL == GLH_CORE_NAME(glCompileShader))
            return GL_FALSE;
        GLH_CORE_NAME(glCreateProgram) = (PFNGLCREATEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glCreateProgram");
        if (NULL == GLH_CORE_NAME(glCreateProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glCreateShader) = (PFNGLCREATESHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glCreateShader");
        if (NULL == GLH_CORE_NAME(glCreateShader))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteProgram) = (PFNGLDELETEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteProgram");
        if (NULL == GLH_CORE_NAME(glDeleteProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteShader) = (PFNGLDELETESHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteShader");
        if (NULL == GLH_CORE_NAME(glDeleteShader))
            return GL_FALSE;
        GLH_CORE_NAME(glDetachShader) = (PFNGLDETACHSHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glDetachShader");
        if (NULL == GLH_CORE_NAME(glDetachShader))
            return GL_FALSE;
        GLH_CORE_NAME(glDisableVertexAttribArray) = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)GLH_EXT_GET_PROC_ADDRESS("glDisableVertexAttribArray");
        if (NULL == GLH_CORE_NAME(glDisableVertexAttribArray))
            return GL_FALSE;
        GLH_CORE_NAME(glEnableVertexAttribArray) = (PFNGLENABLEVERTEXATTRIBARRAYPROC)GLH_EXT_GET_PROC_ADDRESS("glEnableVertexAttribArray");
        if (NULL == GLH_CORE_NAME(glEnableVertexAttribArray))
            return GL_FALSE;
        GLH_CORE_NAME(glGetActiveAttrib) = (PFNGLGETACTIVEATTRIBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetActiveAttrib");
        if (NULL == GLH_CORE_NAME(glGetActiveAttrib))
            return GL_FALSE;
        GLH_CORE_NAME(glGetActiveUniform) = (PFNGLGETACTIVEUNIFORMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetActiveUniform");
        if (NULL == GLH_CORE_NAME(glGetActiveUniform))
            return GL_FALSE;
        GLH_CORE_NAME(glGetAttachedShaders) = (PFNGLGETATTACHEDSHADERSPROC)GLH_EXT_GET_PROC_ADDRESS("glGetAttachedShaders");
        if (NULL == GLH_CORE_NAME(glGetAttachedShaders))
            return GL_FALSE;
        GLH_CORE_NAME(glGetAttribLocation) = (PFNGLGETATTRIBLOCATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glGetAttribLocation");
        if (NULL == GLH_CORE_NAME(glGetAttribLocation))
            return GL_FALSE;
        GLH_CORE_NAME(glGetProgramiv) = (PFNGLGETPROGRAMIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramiv");
        if (NULL == GLH_CORE_NAME(glGetProgramiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetProgramInfoLog) = (PFNGLGETPROGRAMINFOLOGPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramInfoLog");
        if (NULL == GLH_CORE_NAME(glGetProgramInfoLog))
            return GL_FALSE;
        GLH_CORE_NAME(glGetShaderiv) = (PFNGLGETSHADERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetShaderiv");
        if (NULL == GLH_CORE_NAME(glGetShaderiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetShaderInfoLog) = (PFNGLGETSHADERINFOLOGPROC)GLH_EXT_GET_PROC_ADDRESS("glGetShaderInfoLog");
        if (NULL == GLH_CORE_NAME(glGetShaderInfoLog))
            return GL_FALSE;
        GLH_CORE_NAME(glGetShaderSource) = (PFNGLGETSHADERSOURCEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetShaderSource");
        if (NULL == GLH_CORE_NAME(glGetShaderSource))
            return GL_FALSE;
        GLH_CORE_NAME(glGetUniformLocation) = (PFNGLGETUNIFORMLOCATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformLocation");
        if (NULL == GLH_CORE_NAME(glGetUniformLocation))
            return GL_FALSE;
        GLH_CORE_NAME(glGetUniformfv) = (PFNGLGETUNIFORMFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformfv");
        if (NULL == GLH_CORE_NAME(glGetUniformfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetUniformiv) = (PFNGLGETUNIFORMIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformiv");
        if (NULL == GLH_CORE_NAME(glGetUniformiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribdv) = (PFNGLGETVERTEXATTRIBDVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribdv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribdv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribfv) = (PFNGLGETVERTEXATTRIBFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribfv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribiv) = (PFNGLGETVERTEXATTRIBIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribiv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribPointerv) = (PFNGLGETVERTEXATTRIBPOINTERVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribPointerv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribPointerv))
            return GL_FALSE;
        GLH_CORE_NAME(glIsProgram) = (PFNGLISPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glIsProgram");
        if (NULL == GLH_CORE_NAME(glIsProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glIsShader) = (PFNGLISSHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glIsShader");
        if (NULL == GLH_CORE_NAME(glIsShader))
            return GL_FALSE;
        GLH_CORE_NAME(glLinkProgram) = (PFNGLLINKPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glLinkProgram");
        if (NULL == GLH_CORE_NAME(glLinkProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glShaderSource) = (PFNGLSHADERSOURCEPROC)GLH_EXT_GET_PROC_ADDRESS("glShaderSource");
        if (NULL == GLH_CORE_NAME(glShaderSource))
            return GL_FALSE;
        GLH_CORE_NAME(glUseProgram) = (PFNGLUSEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glUseProgram");
        if (NULL == GLH_CORE_NAME(glUseProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1f) = (PFNGLUNIFORM1FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1f");
        if (NULL == GLH_CORE_NAME(glUniform1f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2f) = (PFNGLUNIFORM2FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2f");
        if (NULL == GLH_CORE_NAME(glUniform2f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3f) = (PFNGLUNIFORM3FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3f");
        if (NULL == GLH_CORE_NAME(glUniform3f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4f) = (PFNGLUNIFORM4FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4f");
        if (NULL == GLH_CORE_NAME(glUniform4f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1i) = (PFNGLUNIFORM1IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1i");
        if (NULL == GLH_CORE_NAME(glUniform1i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2i) = (PFNGLUNIFORM2IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2i");
        if (NULL == GLH_CORE_NAME(glUniform2i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3i) = (PFNGLUNIFORM3IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3i");
        if (NULL == GLH_CORE_NAME(glUniform3i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4i) = (PFNGLUNIFORM4IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4i");
        if (NULL == GLH_CORE_NAME(glUniform4i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1fv) = (PFNGLUNIFORM1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1fv");
        if (NULL == GLH_CORE_NAME(glUniform1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2fv) = (PFNGLUNIFORM2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2fv");
        if (NULL == GLH_CORE_NAME(glUniform2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3fv) = (PFNGLUNIFORM3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3fv");
        if (NULL == GLH_CORE_NAME(glUniform3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4fv) = (PFNGLUNIFORM4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4fv");
        if (NULL == GLH_CORE_NAME(glUniform4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1iv) = (PFNGLUNIFORM1IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1iv");
        if (NULL == GLH_CORE_NAME(glUniform1iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2iv) = (PFNGLUNIFORM2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2iv");
        if (NULL == GLH_CORE_NAME(glUniform2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3iv) = (PFNGLUNIFORM3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3iv");
        if (NULL == GLH_CORE_NAME(glUniform3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4iv) = (PFNGLUNIFORM4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4iv");
        if (NULL == GLH_CORE_NAME(glUniform4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix2fv) = (PFNGLUNIFORMMATRIX2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix2fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix3fv) = (PFNGLUNIFORMMATRIX3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix3fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix4fv) = (PFNGLUNIFORMMATRIX4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix4fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glValidateProgram) = (PFNGLVALIDATEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glValidateProgram");
        if (NULL == GLH_CORE_NAME(glValidateProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1d) = (PFNGLVERTEXATTRIB1DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1dv) = (PFNGLVERTEXATTRIB1DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1f) = (PFNGLVERTEXATTRIB1FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1fv) = (PFNGLVERTEXATTRIB1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1s) = (PFNGLVERTEXATTRIB1SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1sv) = (PFNGLVERTEXATTRIB1SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2d) = (PFNGLVERTEXATTRIB2DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2dv) = (PFNGLVERTEXATTRIB2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2f) = (PFNGLVERTEXATTRIB2FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2fv) = (PFNGLVERTEXATTRIB2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2s) = (PFNGLVERTEXATTRIB2SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2sv) = (PFNGLVERTEXATTRIB2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3d) = (PFNGLVERTEXATTRIB3DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3dv) = (PFNGLVERTEXATTRIB3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3f) = (PFNGLVERTEXATTRIB3FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3fv) = (PFNGLVERTEXATTRIB3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3s) = (PFNGLVERTEXATTRIB3SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3sv) = (PFNGLVERTEXATTRIB3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nbv) = (PFNGLVERTEXATTRIB4NBVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nbv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nbv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Niv) = (PFNGLVERTEXATTRIB4NIVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Niv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Niv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nsv) = (PFNGLVERTEXATTRIB4NSVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nsv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nsv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nub) = (PFNGLVERTEXATTRIB4NUBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nub");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nub))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nubv) = (PFNGLVERTEXATTRIB4NUBVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nubv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nubv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nuiv) = (PFNGLVERTEXATTRIB4NUIVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nuiv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nuiv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nusv) = (PFNGLVERTEXATTRIB4NUSVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nusv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nusv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4bv) = (PFNGLVERTEXATTRIB4BVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4bv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4bv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4d) = (PFNGLVERTEXATTRIB4DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4dv) = (PFNGLVERTEXATTRIB4DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4f) = (PFNGLVERTEXATTRIB4FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4fv) = (PFNGLVERTEXATTRIB4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4iv) = (PFNGLVERTEXATTRIB4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4iv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4s) = (PFNGLVERTEXATTRIB4SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4sv) = (PFNGLVERTEXATTRIB4SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4ubv) = (PFNGLVERTEXATTRIB4UBVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4ubv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4ubv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4uiv) = (PFNGLVERTEXATTRIB4UIVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4uiv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4uiv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4usv) = (PFNGLVERTEXATTRIB4USVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4usv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4usv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttribPointer) = (PFNGLVERTEXATTRIBPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribPointer");
        if (NULL == GLH_CORE_NAME(glVertexAttribPointer))
            return GL_FALSE;
        return GL_TRUE;
#endif

#if defined(GL_VERSION_2_1)
    }
    if (0 == strcmp(extension, "GL_VERSION_2_1")) {
        GLH_CORE_NAME(glBlendColor) = (PFNGLBLENDCOLORPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColor");
        if (NULL == GLH_CORE_NAME(glBlendColor))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquation) = (PFNGLBLENDEQUATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquation");
        if (NULL == GLH_CORE_NAME(glBlendEquation))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawRangeElements) = (PFNGLDRAWRANGEELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElements");
        if (NULL == GLH_CORE_NAME(glDrawRangeElements))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTable) = (PFNGLCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTable");
        if (NULL == GLH_CORE_NAME(glColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameterfv) = (PFNGLCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameteriv) = (PFNGLCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorTable) = (PFNGLCOPYCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorTable");
        if (NULL == GLH_CORE_NAME(glCopyColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTable) = (PFNGLGETCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTable");
        if (NULL == GLH_CORE_NAME(glGetColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameterfv) = (PFNGLGETCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameteriv) = (PFNGLGETCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorSubTable) = (PFNGLCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorSubTable");
        if (NULL == GLH_CORE_NAME(glColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorSubTable) = (PFNGLCOPYCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorSubTable");
        if (NULL == GLH_CORE_NAME(glCopyColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter1D) = (PFNGLCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter2D) = (PFNGLCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterf) = (PFNGLCONVOLUTIONPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterf");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterfv) = (PFNGLCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteri) = (PFNGLCONVOLUTIONPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteri");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteriv) = (PFNGLCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter1D) = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter2D) = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionFilter) = (PFNGLGETCONVOLUTIONFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionFilter");
        if (NULL == GLH_CORE_NAME(glGetConvolutionFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameterfv) = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameteriv) = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetSeparableFilter) = (PFNGLGETSEPARABLEFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSeparableFilter");
        if (NULL == GLH_CORE_NAME(glGetSeparableFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glSeparableFilter2D) = (PFNGLSEPARABLEFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glSeparableFilter2D");
        if (NULL == GLH_CORE_NAME(glSeparableFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogram) = (PFNGLGETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogram");
        if (NULL == GLH_CORE_NAME(glGetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameterfv) = (PFNGLGETHISTOGRAMPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterfv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameteriv) = (PFNGLGETHISTOGRAMPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameteriv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmax) = (PFNGLGETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmax");
        if (NULL == GLH_CORE_NAME(glGetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameterfv) = (PFNGLGETMINMAXPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterfv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameteriv) = (PFNGLGETMINMAXPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameteriv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glHistogram) = (PFNGLHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glHistogram");
        if (NULL == GLH_CORE_NAME(glHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glMinmax) = (PFNGLMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glMinmax");
        if (NULL == GLH_CORE_NAME(glMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glResetHistogram) = (PFNGLRESETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glResetHistogram");
        if (NULL == GLH_CORE_NAME(glResetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glResetMinmax) = (PFNGLRESETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glResetMinmax");
        if (NULL == GLH_CORE_NAME(glResetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glTexImage3D) = (PFNGLTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage3D");
        if (NULL == GLH_CORE_NAME(glTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glTexSubImage3D) = (PFNGLTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyTexSubImage3D) = (PFNGLCOPYTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCopyTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glActiveTexture) = (PFNGLACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveTexture");
        if (NULL == GLH_CORE_NAME(glActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glClientActiveTexture) = (PFNGLCLIENTACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glClientActiveTexture");
        if (NULL == GLH_CORE_NAME(glClientActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1d) = (PFNGLMULTITEXCOORD1DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1dv) = (PFNGLMULTITEXCOORD1DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1f) = (PFNGLMULTITEXCOORD1FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1fv) = (PFNGLMULTITEXCOORD1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1i) = (PFNGLMULTITEXCOORD1IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1iv) = (PFNGLMULTITEXCOORD1IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1s) = (PFNGLMULTITEXCOORD1SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1sv) = (PFNGLMULTITEXCOORD1SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2d) = (PFNGLMULTITEXCOORD2DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2dv) = (PFNGLMULTITEXCOORD2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2f) = (PFNGLMULTITEXCOORD2FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2fv) = (PFNGLMULTITEXCOORD2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2i) = (PFNGLMULTITEXCOORD2IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2iv) = (PFNGLMULTITEXCOORD2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2s) = (PFNGLMULTITEXCOORD2SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2sv) = (PFNGLMULTITEXCOORD2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3d) = (PFNGLMULTITEXCOORD3DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3dv) = (PFNGLMULTITEXCOORD3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3f) = (PFNGLMULTITEXCOORD3FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3fv) = (PFNGLMULTITEXCOORD3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3i) = (PFNGLMULTITEXCOORD3IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3iv) = (PFNGLMULTITEXCOORD3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3s) = (PFNGLMULTITEXCOORD3SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3sv) = (PFNGLMULTITEXCOORD3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4d) = (PFNGLMULTITEXCOORD4DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4dv) = (PFNGLMULTITEXCOORD4DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4f) = (PFNGLMULTITEXCOORD4FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4fv) = (PFNGLMULTITEXCOORD4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4i) = (PFNGLMULTITEXCOORD4IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4iv) = (PFNGLMULTITEXCOORD4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4s) = (PFNGLMULTITEXCOORD4SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4sv) = (PFNGLMULTITEXCOORD4SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4sv))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixf) = (PFNGLLOADTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixd) = (PFNGLLOADTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixf) = (PFNGLMULTTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixd) = (PFNGLMULTTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glSampleCoverage) = (PFNGLSAMPLECOVERAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleCoverage");
        if (NULL == GLH_CORE_NAME(glSampleCoverage))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage3D) = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage2D) = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage1D) = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage3D) = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage2D) = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage1D) = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetCompressedTexImage) = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCompressedTexImage");
        if (NULL == GLH_CORE_NAME(glGetCompressedTexImage))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendFuncSeparate) = (PFNGLBLENDFUNCSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendFuncSeparate");
        if (NULL == GLH_CORE_NAME(glBlendFuncSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordf) = (PFNGLFOGCOORDFPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordf");
        if (NULL == GLH_CORE_NAME(glFogCoordf))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordfv) = (PFNGLFOGCOORDFVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordfv");
        if (NULL == GLH_CORE_NAME(glFogCoordfv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordd) = (PFNGLFOGCOORDDPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordd");
        if (NULL == GLH_CORE_NAME(glFogCoordd))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoorddv) = (PFNGLFOGCOORDDVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoorddv");
        if (NULL == GLH_CORE_NAME(glFogCoorddv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordPointer) = (PFNGLFOGCOORDPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordPointer");
        if (NULL == GLH_CORE_NAME(glFogCoordPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawArrays) = (PFNGLMULTIDRAWARRAYSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawArrays");
        if (NULL == GLH_CORE_NAME(glMultiDrawArrays))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawElements) = (PFNGLMULTIDRAWELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawElements");
        if (NULL == GLH_CORE_NAME(glMultiDrawElements))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterf) = (PFNGLPOINTPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterf");
        if (NULL == GLH_CORE_NAME(glPointParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterfv) = (PFNGLPOINTPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfv");
        if (NULL == GLH_CORE_NAME(glPointParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteri) = (PFNGLPOINTPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteri");
        if (NULL == GLH_CORE_NAME(glPointParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteriv) = (PFNGLPOINTPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteriv");
        if (NULL == GLH_CORE_NAME(glPointParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3b) = (PFNGLSECONDARYCOLOR3BPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3b");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3b))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3bv) = (PFNGLSECONDARYCOLOR3BVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3bv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3bv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3d) = (PFNGLSECONDARYCOLOR3DPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3d");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3d))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3dv) = (PFNGLSECONDARYCOLOR3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3dv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3f) = (PFNGLSECONDARYCOLOR3FPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3f");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3f))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3fv) = (PFNGLSECONDARYCOLOR3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3fv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3i) = (PFNGLSECONDARYCOLOR3IPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3i");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3i))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3iv) = (PFNGLSECONDARYCOLOR3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3iv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3s) = (PFNGLSECONDARYCOLOR3SPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3s");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3s))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3sv) = (PFNGLSECONDARYCOLOR3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3sv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ub) = (PFNGLSECONDARYCOLOR3UBPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ub");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ub))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ubv) = (PFNGLSECONDARYCOLOR3UBVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ubv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ubv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ui) = (PFNGLSECONDARYCOLOR3UIPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ui");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ui))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3uiv) = (PFNGLSECONDARYCOLOR3UIVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3uiv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3uiv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3us) = (PFNGLSECONDARYCOLOR3USPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3us");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3us))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3usv) = (PFNGLSECONDARYCOLOR3USVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3usv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3usv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColorPointer) = (PFNGLSECONDARYCOLORPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColorPointer");
        if (NULL == GLH_CORE_NAME(glSecondaryColorPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2d) = (PFNGLWINDOWPOS2DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2d");
        if (NULL == GLH_CORE_NAME(glWindowPos2d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2dv) = (PFNGLWINDOWPOS2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dv");
        if (NULL == GLH_CORE_NAME(glWindowPos2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2f) = (PFNGLWINDOWPOS2FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2f");
        if (NULL == GLH_CORE_NAME(glWindowPos2f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2fv) = (PFNGLWINDOWPOS2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fv");
        if (NULL == GLH_CORE_NAME(glWindowPos2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2i) = (PFNGLWINDOWPOS2IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2i");
        if (NULL == GLH_CORE_NAME(glWindowPos2i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2iv) = (PFNGLWINDOWPOS2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2iv");
        if (NULL == GLH_CORE_NAME(glWindowPos2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2s) = (PFNGLWINDOWPOS2SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2s");
        if (NULL == GLH_CORE_NAME(glWindowPos2s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2sv) = (PFNGLWINDOWPOS2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2sv");
        if (NULL == GLH_CORE_NAME(glWindowPos2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3d) = (PFNGLWINDOWPOS3DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3d");
        if (NULL == GLH_CORE_NAME(glWindowPos3d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3dv) = (PFNGLWINDOWPOS3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dv");
        if (NULL == GLH_CORE_NAME(glWindowPos3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3f) = (PFNGLWINDOWPOS3FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3f");
        if (NULL == GLH_CORE_NAME(glWindowPos3f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3fv) = (PFNGLWINDOWPOS3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fv");
        if (NULL == GLH_CORE_NAME(glWindowPos3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3i) = (PFNGLWINDOWPOS3IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3i");
        if (NULL == GLH_CORE_NAME(glWindowPos3i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3iv) = (PFNGLWINDOWPOS3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3iv");
        if (NULL == GLH_CORE_NAME(glWindowPos3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3s) = (PFNGLWINDOWPOS3SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3s");
        if (NULL == GLH_CORE_NAME(glWindowPos3s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3sv) = (PFNGLWINDOWPOS3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3sv");
        if (NULL == GLH_CORE_NAME(glWindowPos3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glGenQueries) = (PFNGLGENQUERIESPROC)GLH_EXT_GET_PROC_ADDRESS("glGenQueries");
        if (NULL == GLH_CORE_NAME(glGenQueries))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteQueries) = (PFNGLDELETEQUERIESPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteQueries");
        if (NULL == GLH_CORE_NAME(glDeleteQueries))
            return GL_FALSE;
        GLH_CORE_NAME(glIsQuery) = (PFNGLISQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glIsQuery");
        if (NULL == GLH_CORE_NAME(glIsQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glBeginQuery) = (PFNGLBEGINQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginQuery");
        if (NULL == GLH_CORE_NAME(glBeginQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glEndQuery) = (PFNGLENDQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glEndQuery");
        if (NULL == GLH_CORE_NAME(glEndQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryiv) = (PFNGLGETQUERYIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryiv");
        if (NULL == GLH_CORE_NAME(glGetQueryiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryObjectiv) = (PFNGLGETQUERYOBJECTIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectiv");
        if (NULL == GLH_CORE_NAME(glGetQueryObjectiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryObjectuiv) = (PFNGLGETQUERYOBJECTUIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectuiv");
        if (NULL == GLH_CORE_NAME(glGetQueryObjectuiv))
            return GL_FALSE;
        GLH_CORE_NAME(glBindBuffer) = (PFNGLBINDBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glBindBuffer");
        if (NULL == GLH_CORE_NAME(glBindBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteBuffers) = (PFNGLDELETEBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteBuffers");
        if (NULL == GLH_CORE_NAME(glDeleteBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glGenBuffers) = (PFNGLGENBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glGenBuffers");
        if (NULL == GLH_CORE_NAME(glGenBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glIsBuffer) = (PFNGLISBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glIsBuffer");
        if (NULL == GLH_CORE_NAME(glIsBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glBufferData) = (PFNGLBUFFERDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferData");
        if (NULL == GLH_CORE_NAME(glBufferData))
            return GL_FALSE;
        GLH_CORE_NAME(glBufferSubData) = (PFNGLBUFFERSUBDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferSubData");
        if (NULL == GLH_CORE_NAME(glBufferSubData))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferSubData) = (PFNGLGETBUFFERSUBDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferSubData");
        if (NULL == GLH_CORE_NAME(glGetBufferSubData))
            return GL_FALSE;
        GLH_CORE_NAME(glMapBuffer) = (PFNGLMAPBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glMapBuffer");
        if (NULL == GLH_CORE_NAME(glMapBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glUnmapBuffer) = (PFNGLUNMAPBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glUnmapBuffer");
        if (NULL == GLH_CORE_NAME(glUnmapBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferParameteriv) = (PFNGLGETBUFFERPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferParameteriv");
        if (NULL == GLH_CORE_NAME(glGetBufferParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferPointerv) = (PFNGLGETBUFFERPOINTERVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferPointerv");
        if (NULL == GLH_CORE_NAME(glGetBufferPointerv))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquationSeparate) = (PFNGLBLENDEQUATIONSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquationSeparate");
        if (NULL == GLH_CORE_NAME(glBlendEquationSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawBuffers) = (PFNGLDRAWBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawBuffers");
        if (NULL == GLH_CORE_NAME(glDrawBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glStencilOpSeparate) = (PFNGLSTENCILOPSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilOpSeparate");
        if (NULL == GLH_CORE_NAME(glStencilOpSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glStencilFuncSeparate) = (PFNGLSTENCILFUNCSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilFuncSeparate");
        if (NULL == GLH_CORE_NAME(glStencilFuncSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glStencilMaskSeparate) = (PFNGLSTENCILMASKSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilMaskSeparate");
        if (NULL == GLH_CORE_NAME(glStencilMaskSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glAttachShader) = (PFNGLATTACHSHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glAttachShader");
        if (NULL == GLH_CORE_NAME(glAttachShader))
            return GL_FALSE;
        GLH_CORE_NAME(glBindAttribLocation) = (PFNGLBINDATTRIBLOCATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBindAttribLocation");
        if (NULL == GLH_CORE_NAME(glBindAttribLocation))
            return GL_FALSE;
        GLH_CORE_NAME(glCompileShader) = (PFNGLCOMPILESHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glCompileShader");
        if (NULL == GLH_CORE_NAME(glCompileShader))
            return GL_FALSE;
        GLH_CORE_NAME(glCreateProgram) = (PFNGLCREATEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glCreateProgram");
        if (NULL == GLH_CORE_NAME(glCreateProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glCreateShader) = (PFNGLCREATESHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glCreateShader");
        if (NULL == GLH_CORE_NAME(glCreateShader))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteProgram) = (PFNGLDELETEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteProgram");
        if (NULL == GLH_CORE_NAME(glDeleteProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteShader) = (PFNGLDELETESHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteShader");
        if (NULL == GLH_CORE_NAME(glDeleteShader))
            return GL_FALSE;
        GLH_CORE_NAME(glDetachShader) = (PFNGLDETACHSHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glDetachShader");
        if (NULL == GLH_CORE_NAME(glDetachShader))
            return GL_FALSE;
        GLH_CORE_NAME(glDisableVertexAttribArray) = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)GLH_EXT_GET_PROC_ADDRESS("glDisableVertexAttribArray");
        if (NULL == GLH_CORE_NAME(glDisableVertexAttribArray))
            return GL_FALSE;
        GLH_CORE_NAME(glEnableVertexAttribArray) = (PFNGLENABLEVERTEXATTRIBARRAYPROC)GLH_EXT_GET_PROC_ADDRESS("glEnableVertexAttribArray");
        if (NULL == GLH_CORE_NAME(glEnableVertexAttribArray))
            return GL_FALSE;
        GLH_CORE_NAME(glGetActiveAttrib) = (PFNGLGETACTIVEATTRIBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetActiveAttrib");
        if (NULL == GLH_CORE_NAME(glGetActiveAttrib))
            return GL_FALSE;
        GLH_CORE_NAME(glGetActiveUniform) = (PFNGLGETACTIVEUNIFORMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetActiveUniform");
        if (NULL == GLH_CORE_NAME(glGetActiveUniform))
            return GL_FALSE;
        GLH_CORE_NAME(glGetAttachedShaders) = (PFNGLGETATTACHEDSHADERSPROC)GLH_EXT_GET_PROC_ADDRESS("glGetAttachedShaders");
        if (NULL == GLH_CORE_NAME(glGetAttachedShaders))
            return GL_FALSE;
        GLH_CORE_NAME(glGetAttribLocation) = (PFNGLGETATTRIBLOCATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glGetAttribLocation");
        if (NULL == GLH_CORE_NAME(glGetAttribLocation))
            return GL_FALSE;
        GLH_CORE_NAME(glGetProgramiv) = (PFNGLGETPROGRAMIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramiv");
        if (NULL == GLH_CORE_NAME(glGetProgramiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetProgramInfoLog) = (PFNGLGETPROGRAMINFOLOGPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramInfoLog");
        if (NULL == GLH_CORE_NAME(glGetProgramInfoLog))
            return GL_FALSE;
        GLH_CORE_NAME(glGetShaderiv) = (PFNGLGETSHADERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetShaderiv");
        if (NULL == GLH_CORE_NAME(glGetShaderiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetShaderInfoLog) = (PFNGLGETSHADERINFOLOGPROC)GLH_EXT_GET_PROC_ADDRESS("glGetShaderInfoLog");
        if (NULL == GLH_CORE_NAME(glGetShaderInfoLog))
            return GL_FALSE;
        GLH_CORE_NAME(glGetShaderSource) = (PFNGLGETSHADERSOURCEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetShaderSource");
        if (NULL == GLH_CORE_NAME(glGetShaderSource))
            return GL_FALSE;
        GLH_CORE_NAME(glGetUniformLocation) = (PFNGLGETUNIFORMLOCATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformLocation");
        if (NULL == GLH_CORE_NAME(glGetUniformLocation))
            return GL_FALSE;
        GLH_CORE_NAME(glGetUniformfv) = (PFNGLGETUNIFORMFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformfv");
        if (NULL == GLH_CORE_NAME(glGetUniformfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetUniformiv) = (PFNGLGETUNIFORMIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformiv");
        if (NULL == GLH_CORE_NAME(glGetUniformiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribdv) = (PFNGLGETVERTEXATTRIBDVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribdv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribdv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribfv) = (PFNGLGETVERTEXATTRIBFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribfv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribiv) = (PFNGLGETVERTEXATTRIBIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribiv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribPointerv) = (PFNGLGETVERTEXATTRIBPOINTERVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribPointerv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribPointerv))
            return GL_FALSE;
        GLH_CORE_NAME(glIsProgram) = (PFNGLISPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glIsProgram");
        if (NULL == GLH_CORE_NAME(glIsProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glIsShader) = (PFNGLISSHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glIsShader");
        if (NULL == GLH_CORE_NAME(glIsShader))
            return GL_FALSE;
        GLH_CORE_NAME(glLinkProgram) = (PFNGLLINKPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glLinkProgram");
        if (NULL == GLH_CORE_NAME(glLinkProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glShaderSource) = (PFNGLSHADERSOURCEPROC)GLH_EXT_GET_PROC_ADDRESS("glShaderSource");
        if (NULL == GLH_CORE_NAME(glShaderSource))
            return GL_FALSE;
        GLH_CORE_NAME(glUseProgram) = (PFNGLUSEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glUseProgram");
        if (NULL == GLH_CORE_NAME(glUseProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1f) = (PFNGLUNIFORM1FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1f");
        if (NULL == GLH_CORE_NAME(glUniform1f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2f) = (PFNGLUNIFORM2FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2f");
        if (NULL == GLH_CORE_NAME(glUniform2f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3f) = (PFNGLUNIFORM3FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3f");
        if (NULL == GLH_CORE_NAME(glUniform3f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4f) = (PFNGLUNIFORM4FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4f");
        if (NULL == GLH_CORE_NAME(glUniform4f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1i) = (PFNGLUNIFORM1IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1i");
        if (NULL == GLH_CORE_NAME(glUniform1i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2i) = (PFNGLUNIFORM2IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2i");
        if (NULL == GLH_CORE_NAME(glUniform2i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3i) = (PFNGLUNIFORM3IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3i");
        if (NULL == GLH_CORE_NAME(glUniform3i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4i) = (PFNGLUNIFORM4IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4i");
        if (NULL == GLH_CORE_NAME(glUniform4i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1fv) = (PFNGLUNIFORM1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1fv");
        if (NULL == GLH_CORE_NAME(glUniform1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2fv) = (PFNGLUNIFORM2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2fv");
        if (NULL == GLH_CORE_NAME(glUniform2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3fv) = (PFNGLUNIFORM3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3fv");
        if (NULL == GLH_CORE_NAME(glUniform3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4fv) = (PFNGLUNIFORM4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4fv");
        if (NULL == GLH_CORE_NAME(glUniform4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1iv) = (PFNGLUNIFORM1IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1iv");
        if (NULL == GLH_CORE_NAME(glUniform1iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2iv) = (PFNGLUNIFORM2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2iv");
        if (NULL == GLH_CORE_NAME(glUniform2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3iv) = (PFNGLUNIFORM3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3iv");
        if (NULL == GLH_CORE_NAME(glUniform3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4iv) = (PFNGLUNIFORM4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4iv");
        if (NULL == GLH_CORE_NAME(glUniform4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix2fv) = (PFNGLUNIFORMMATRIX2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix2fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix3fv) = (PFNGLUNIFORMMATRIX3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix3fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix4fv) = (PFNGLUNIFORMMATRIX4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix4fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glValidateProgram) = (PFNGLVALIDATEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glValidateProgram");
        if (NULL == GLH_CORE_NAME(glValidateProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1d) = (PFNGLVERTEXATTRIB1DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1dv) = (PFNGLVERTEXATTRIB1DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1f) = (PFNGLVERTEXATTRIB1FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1fv) = (PFNGLVERTEXATTRIB1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1s) = (PFNGLVERTEXATTRIB1SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1sv) = (PFNGLVERTEXATTRIB1SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2d) = (PFNGLVERTEXATTRIB2DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2dv) = (PFNGLVERTEXATTRIB2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2f) = (PFNGLVERTEXATTRIB2FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2fv) = (PFNGLVERTEXATTRIB2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2s) = (PFNGLVERTEXATTRIB2SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2sv) = (PFNGLVERTEXATTRIB2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3d) = (PFNGLVERTEXATTRIB3DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3dv) = (PFNGLVERTEXATTRIB3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3f) = (PFNGLVERTEXATTRIB3FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3fv) = (PFNGLVERTEXATTRIB3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3s) = (PFNGLVERTEXATTRIB3SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3sv) = (PFNGLVERTEXATTRIB3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nbv) = (PFNGLVERTEXATTRIB4NBVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nbv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nbv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Niv) = (PFNGLVERTEXATTRIB4NIVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Niv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Niv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nsv) = (PFNGLVERTEXATTRIB4NSVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nsv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nsv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nub) = (PFNGLVERTEXATTRIB4NUBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nub");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nub))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nubv) = (PFNGLVERTEXATTRIB4NUBVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nubv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nubv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nuiv) = (PFNGLVERTEXATTRIB4NUIVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nuiv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nuiv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nusv) = (PFNGLVERTEXATTRIB4NUSVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nusv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nusv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4bv) = (PFNGLVERTEXATTRIB4BVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4bv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4bv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4d) = (PFNGLVERTEXATTRIB4DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4dv) = (PFNGLVERTEXATTRIB4DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4f) = (PFNGLVERTEXATTRIB4FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4fv) = (PFNGLVERTEXATTRIB4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4iv) = (PFNGLVERTEXATTRIB4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4iv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4s) = (PFNGLVERTEXATTRIB4SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4sv) = (PFNGLVERTEXATTRIB4SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4ubv) = (PFNGLVERTEXATTRIB4UBVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4ubv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4ubv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4uiv) = (PFNGLVERTEXATTRIB4UIVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4uiv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4uiv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4usv) = (PFNGLVERTEXATTRIB4USVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4usv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4usv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttribPointer) = (PFNGLVERTEXATTRIBPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribPointer");
        if (NULL == GLH_CORE_NAME(glVertexAttribPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix2x3fv) = (PFNGLUNIFORMMATRIX2X3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix2x3fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix2x3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix3x2fv) = (PFNGLUNIFORMMATRIX3X2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix3x2fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix3x2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix2x4fv) = (PFNGLUNIFORMMATRIX2X4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix2x4fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix2x4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix4x2fv) = (PFNGLUNIFORMMATRIX4X2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix4x2fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix4x2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix3x4fv) = (PFNGLUNIFORMMATRIX3X4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix3x4fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix3x4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix4x3fv) = (PFNGLUNIFORMMATRIX4X3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix4x3fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix4x3fv))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_multitexture
    }
    if (0 == strcmp(extension, "GL_ARB_multitexture")) {
        GLH_EXT_NAME(glActiveTextureARB) = (PFNGLACTIVETEXTUREARBPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveTextureARB");
        if (NULL == GLH_EXT_NAME(glActiveTextureARB))
            return GL_FALSE;
        GLH_EXT_NAME(glClientActiveTextureARB) = (PFNGLCLIENTACTIVETEXTUREARBPROC)GLH_EXT_GET_PROC_ADDRESS("glClientActiveTextureARB");
        if (NULL == GLH_EXT_NAME(glClientActiveTextureARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1dARB) = (PFNGLMULTITEXCOORD1DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1dvARB) = (PFNGLMULTITEXCOORD1DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1fARB) = (PFNGLMULTITEXCOORD1FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1fvARB) = (PFNGLMULTITEXCOORD1FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1iARB) = (PFNGLMULTITEXCOORD1IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1iARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1ivARB) = (PFNGLMULTITEXCOORD1IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1ivARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1sARB) = (PFNGLMULTITEXCOORD1SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1sARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1svARB) = (PFNGLMULTITEXCOORD1SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1svARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2dARB) = (PFNGLMULTITEXCOORD2DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2dvARB) = (PFNGLMULTITEXCOORD2DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2fARB) = (PFNGLMULTITEXCOORD2FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2fvARB) = (PFNGLMULTITEXCOORD2FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2iARB) = (PFNGLMULTITEXCOORD2IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2iARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2ivARB) = (PFNGLMULTITEXCOORD2IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2ivARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2sARB) = (PFNGLMULTITEXCOORD2SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2sARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2svARB) = (PFNGLMULTITEXCOORD2SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2svARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3dARB) = (PFNGLMULTITEXCOORD3DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3dvARB) = (PFNGLMULTITEXCOORD3DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3fARB) = (PFNGLMULTITEXCOORD3FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3fvARB) = (PFNGLMULTITEXCOORD3FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3iARB) = (PFNGLMULTITEXCOORD3IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3iARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3ivARB) = (PFNGLMULTITEXCOORD3IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3ivARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3sARB) = (PFNGLMULTITEXCOORD3SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3sARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3svARB) = (PFNGLMULTITEXCOORD3SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3svARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4dARB) = (PFNGLMULTITEXCOORD4DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4dvARB) = (PFNGLMULTITEXCOORD4DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4fARB) = (PFNGLMULTITEXCOORD4FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4fvARB) = (PFNGLMULTITEXCOORD4FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4iARB) = (PFNGLMULTITEXCOORD4IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4iARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4ivARB) = (PFNGLMULTITEXCOORD4IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4ivARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4sARB) = (PFNGLMULTITEXCOORD4SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4sARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4svARB) = (PFNGLMULTITEXCOORD4SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4svARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4svARB))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_transpose_matrix
    }
    if (0 == strcmp(extension, "GL_ARB_transpose_matrix")) {
        GLH_EXT_NAME(glLoadTransposeMatrixfARB) = (PFNGLLOADTRANSPOSEMATRIXFARBPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixfARB");
        if (NULL == GLH_EXT_NAME(glLoadTransposeMatrixfARB))
            return GL_FALSE;
        GLH_EXT_NAME(glLoadTransposeMatrixdARB) = (PFNGLLOADTRANSPOSEMATRIXDARBPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixdARB");
        if (NULL == GLH_EXT_NAME(glLoadTransposeMatrixdARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultTransposeMatrixfARB) = (PFNGLMULTTRANSPOSEMATRIXFARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixfARB");
        if (NULL == GLH_EXT_NAME(glMultTransposeMatrixfARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultTransposeMatrixdARB) = (PFNGLMULTTRANSPOSEMATRIXDARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixdARB");
        if (NULL == GLH_EXT_NAME(glMultTransposeMatrixdARB))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_multisample
    }
    if (0 == strcmp(extension, "GL_ARB_multisample")) {
        GLH_EXT_NAME(glSampleCoverageARB) = (PFNGLSAMPLECOVERAGEARBPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleCoverageARB");
        if (NULL == GLH_EXT_NAME(glSampleCoverageARB))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_texture_env_add
    }
    if (0 == strcmp(extension, "GL_ARB_texture_env_add")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_texture_cube_map
    }
    if (0 == strcmp(extension, "GL_ARB_texture_cube_map")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_texture_compression
    }
    if (0 == strcmp(extension, "GL_ARB_texture_compression")) {
        GLH_EXT_NAME(glCompressedTexImage3DARB) = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage3DARB");
        if (NULL == GLH_EXT_NAME(glCompressedTexImage3DARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCompressedTexImage2DARB) = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage2DARB");
        if (NULL == GLH_EXT_NAME(glCompressedTexImage2DARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCompressedTexImage1DARB) = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage1DARB");
        if (NULL == GLH_EXT_NAME(glCompressedTexImage1DARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCompressedTexSubImage3DARB) = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage3DARB");
        if (NULL == GLH_EXT_NAME(glCompressedTexSubImage3DARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCompressedTexSubImage2DARB) = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage2DARB");
        if (NULL == GLH_EXT_NAME(glCompressedTexSubImage2DARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCompressedTexSubImage1DARB) = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage1DARB");
        if (NULL == GLH_EXT_NAME(glCompressedTexSubImage1DARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetCompressedTexImageARB) = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCompressedTexImageARB");
        if (NULL == GLH_EXT_NAME(glGetCompressedTexImageARB))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_texture_border_clamp
    }
    if (0 == strcmp(extension, "GL_ARB_texture_border_clamp")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_point_parameters
    }
    if (0 == strcmp(extension, "GL_ARB_point_parameters")) {
        GLH_EXT_NAME(glPointParameterfARB) = (PFNGLPOINTPARAMETERFARBPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfARB");
        if (NULL == GLH_EXT_NAME(glPointParameterfARB))
            return GL_FALSE;
        GLH_EXT_NAME(glPointParameterfvARB) = (PFNGLPOINTPARAMETERFVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfvARB");
        if (NULL == GLH_EXT_NAME(glPointParameterfvARB))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_vertex_blend
    }
    if (0 == strcmp(extension, "GL_ARB_vertex_blend")) {
        GLH_EXT_NAME(glWeightbvARB) = (PFNGLWEIGHTBVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightbvARB");
        if (NULL == GLH_EXT_NAME(glWeightbvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightsvARB) = (PFNGLWEIGHTSVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightsvARB");
        if (NULL == GLH_EXT_NAME(glWeightsvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightivARB) = (PFNGLWEIGHTIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightivARB");
        if (NULL == GLH_EXT_NAME(glWeightivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightfvARB) = (PFNGLWEIGHTFVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightfvARB");
        if (NULL == GLH_EXT_NAME(glWeightfvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightdvARB) = (PFNGLWEIGHTDVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightdvARB");
        if (NULL == GLH_EXT_NAME(glWeightdvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightubvARB) = (PFNGLWEIGHTUBVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightubvARB");
        if (NULL == GLH_EXT_NAME(glWeightubvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightusvARB) = (PFNGLWEIGHTUSVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightusvARB");
        if (NULL == GLH_EXT_NAME(glWeightusvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightuivARB) = (PFNGLWEIGHTUIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightuivARB");
        if (NULL == GLH_EXT_NAME(glWeightuivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightPointerARB) = (PFNGLWEIGHTPOINTERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightPointerARB");
        if (NULL == GLH_EXT_NAME(glWeightPointerARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexBlendARB) = (PFNGLVERTEXBLENDARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexBlendARB");
        if (NULL == GLH_EXT_NAME(glVertexBlendARB))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_matrix_palette
    }
    if (0 == strcmp(extension, "GL_ARB_matrix_palette")) {
        GLH_EXT_NAME(glCurrentPaletteMatrixARB) = (PFNGLCURRENTPALETTEMATRIXARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCurrentPaletteMatrixARB");
        if (NULL == GLH_EXT_NAME(glCurrentPaletteMatrixARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMatrixIndexubvARB) = (PFNGLMATRIXINDEXUBVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMatrixIndexubvARB");
        if (NULL == GLH_EXT_NAME(glMatrixIndexubvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMatrixIndexusvARB) = (PFNGLMATRIXINDEXUSVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMatrixIndexusvARB");
        if (NULL == GLH_EXT_NAME(glMatrixIndexusvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMatrixIndexuivARB) = (PFNGLMATRIXINDEXUIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMatrixIndexuivARB");
        if (NULL == GLH_EXT_NAME(glMatrixIndexuivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMatrixIndexPointerARB) = (PFNGLMATRIXINDEXPOINTERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMatrixIndexPointerARB");
        if (NULL == GLH_EXT_NAME(glMatrixIndexPointerARB))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_texture_env_combine
    }
    if (0 == strcmp(extension, "GL_ARB_texture_env_combine")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_texture_env_crossbar
    }
    if (0 == strcmp(extension, "GL_ARB_texture_env_crossbar")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_texture_env_dot3
    }
    if (0 == strcmp(extension, "GL_ARB_texture_env_dot3")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_texture_mirrored_repeat
    }
    if (0 == strcmp(extension, "GL_ARB_texture_mirrored_repeat")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_depth_texture
    }
    if (0 == strcmp(extension, "GL_ARB_depth_texture")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_shadow
    }
    if (0 == strcmp(extension, "GL_ARB_shadow")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_shadow_ambient
    }
    if (0 == strcmp(extension, "GL_ARB_shadow_ambient")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_window_pos
    }
    if (0 == strcmp(extension, "GL_ARB_window_pos")) {
        GLH_EXT_NAME(glWindowPos2dARB) = (PFNGLWINDOWPOS2DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2dvARB) = (PFNGLWINDOWPOS2DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dvARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2fARB) = (PFNGLWINDOWPOS2FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2fvARB) = (PFNGLWINDOWPOS2FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fvARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2iARB) = (PFNGLWINDOWPOS2IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2iARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2ivARB) = (PFNGLWINDOWPOS2IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2ivARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2sARB) = (PFNGLWINDOWPOS2SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2sARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2svARB) = (PFNGLWINDOWPOS2SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2svARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3dARB) = (PFNGLWINDOWPOS3DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3dvARB) = (PFNGLWINDOWPOS3DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dvARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3fARB) = (PFNGLWINDOWPOS3FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3fvARB) = (PFNGLWINDOWPOS3FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fvARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3iARB) = (PFNGLWINDOWPOS3IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3iARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3ivARB) = (PFNGLWINDOWPOS3IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3ivARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3sARB) = (PFNGLWINDOWPOS3SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3sARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3svARB) = (PFNGLWINDOWPOS3SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3svARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3svARB))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_vertex_program
    }
    if (0 == strcmp(extension, "GL_ARB_vertex_program")) {
        GLH_EXT_NAME(glVertexAttrib1dARB) = (PFNGLVERTEXATTRIB1DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1dARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1dvARB) = (PFNGLVERTEXATTRIB1DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1dvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1fARB) = (PFNGLVERTEXATTRIB1FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1fARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1fvARB) = (PFNGLVERTEXATTRIB1FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1fvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1sARB) = (PFNGLVERTEXATTRIB1SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1sARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1svARB) = (PFNGLVERTEXATTRIB1SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1svARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2dARB) = (PFNGLVERTEXATTRIB2DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2dARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2dvARB) = (PFNGLVERTEXATTRIB2DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2dvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2fARB) = (PFNGLVERTEXATTRIB2FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2fARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2fvARB) = (PFNGLVERTEXATTRIB2FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2fvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2sARB) = (PFNGLVERTEXATTRIB2SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2sARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2svARB) = (PFNGLVERTEXATTRIB2SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2svARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3dARB) = (PFNGLVERTEXATTRIB3DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3dARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3dvARB) = (PFNGLVERTEXATTRIB3DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3dvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3fARB) = (PFNGLVERTEXATTRIB3FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3fARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3fvARB) = (PFNGLVERTEXATTRIB3FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3fvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3sARB) = (PFNGLVERTEXATTRIB3SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3sARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3svARB) = (PFNGLVERTEXATTRIB3SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3svARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4NbvARB) = (PFNGLVERTEXATTRIB4NBVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4NbvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4NbvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4NivARB) = (PFNGLVERTEXATTRIB4NIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4NivARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4NivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4NsvARB) = (PFNGLVERTEXATTRIB4NSVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4NsvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4NsvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4NubARB) = (PFNGLVERTEXATTRIB4NUBARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4NubARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4NubARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4NubvARB) = (PFNGLVERTEXATTRIB4NUBVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4NubvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4NubvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4NuivARB) = (PFNGLVERTEXATTRIB4NUIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4NuivARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4NuivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4NusvARB) = (PFNGLVERTEXATTRIB4NUSVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4NusvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4NusvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4bvARB) = (PFNGLVERTEXATTRIB4BVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4bvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4bvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4dARB) = (PFNGLVERTEXATTRIB4DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4dARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4dvARB) = (PFNGLVERTEXATTRIB4DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4dvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4fARB) = (PFNGLVERTEXATTRIB4FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4fARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4fvARB) = (PFNGLVERTEXATTRIB4FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4fvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4ivARB) = (PFNGLVERTEXATTRIB4IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4ivARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4sARB) = (PFNGLVERTEXATTRIB4SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4sARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4svARB) = (PFNGLVERTEXATTRIB4SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4svARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4ubvARB) = (PFNGLVERTEXATTRIB4UBVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4ubvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4ubvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4uivARB) = (PFNGLVERTEXATTRIB4UIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4uivARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4uivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4usvARB) = (PFNGLVERTEXATTRIB4USVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4usvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4usvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribPointerARB) = (PFNGLVERTEXATTRIBPOINTERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribPointerARB");
        if (NULL == GLH_EXT_NAME(glVertexAttribPointerARB))
            return GL_FALSE;
        GLH_EXT_NAME(glEnableVertexAttribArrayARB) = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC)GLH_EXT_GET_PROC_ADDRESS("glEnableVertexAttribArrayARB");
        if (NULL == GLH_EXT_NAME(glEnableVertexAttribArrayARB))
            return GL_FALSE;
        GLH_EXT_NAME(glDisableVertexAttribArrayARB) = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)GLH_EXT_GET_PROC_ADDRESS("glDisableVertexAttribArrayARB");
        if (NULL == GLH_EXT_NAME(glDisableVertexAttribArrayARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramStringARB) = (PFNGLPROGRAMSTRINGARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramStringARB");
        if (NULL == GLH_EXT_NAME(glProgramStringARB))
            return GL_FALSE;
        GLH_EXT_NAME(glBindProgramARB) = (PFNGLBINDPROGRAMARBPROC)GLH_EXT_GET_PROC_ADDRESS("glBindProgramARB");
        if (NULL == GLH_EXT_NAME(glBindProgramARB))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteProgramsARB) = (PFNGLDELETEPROGRAMSARBPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteProgramsARB");
        if (NULL == GLH_EXT_NAME(glDeleteProgramsARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGenProgramsARB) = (PFNGLGENPROGRAMSARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGenProgramsARB");
        if (NULL == GLH_EXT_NAME(glGenProgramsARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameter4dARB) = (PFNGLPROGRAMENVPARAMETER4DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameter4dARB");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameter4dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameter4dvARB) = (PFNGLPROGRAMENVPARAMETER4DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameter4dvARB");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameter4dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameter4fARB) = (PFNGLPROGRAMENVPARAMETER4FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameter4fARB");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameter4fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameter4fvARB) = (PFNGLPROGRAMENVPARAMETER4FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameter4fvARB");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameter4fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParameter4dARB) = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameter4dARB");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameter4dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParameter4dvARB) = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameter4dvARB");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameter4dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParameter4fARB) = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameter4fARB");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameter4fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParameter4fvARB) = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameter4fvARB");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameter4fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramEnvParameterdvARB) = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramEnvParameterdvARB");
        if (NULL == GLH_EXT_NAME(glGetProgramEnvParameterdvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramEnvParameterfvARB) = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramEnvParameterfvARB");
        if (NULL == GLH_EXT_NAME(glGetProgramEnvParameterfvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramLocalParameterdvARB) = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramLocalParameterdvARB");
        if (NULL == GLH_EXT_NAME(glGetProgramLocalParameterdvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramLocalParameterfvARB) = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramLocalParameterfvARB");
        if (NULL == GLH_EXT_NAME(glGetProgramLocalParameterfvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramivARB) = (PFNGLGETPROGRAMIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramivARB");
        if (NULL == GLH_EXT_NAME(glGetProgramivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramStringARB) = (PFNGLGETPROGRAMSTRINGARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramStringARB");
        if (NULL == GLH_EXT_NAME(glGetProgramStringARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribdvARB) = (PFNGLGETVERTEXATTRIBDVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribdvARB");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribdvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribfvARB) = (PFNGLGETVERTEXATTRIBFVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribfvARB");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribfvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribivARB) = (PFNGLGETVERTEXATTRIBIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribivARB");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribPointervARB) = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribPointervARB");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribPointervARB))
            return GL_FALSE;
        GLH_EXT_NAME(glIsProgramARB) = (PFNGLISPROGRAMARBPROC)GLH_EXT_GET_PROC_ADDRESS("glIsProgramARB");
        if (NULL == GLH_EXT_NAME(glIsProgramARB))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_fragment_program
    }
    if (0 == strcmp(extension, "GL_ARB_fragment_program")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_vertex_buffer_object
    }
    if (0 == strcmp(extension, "GL_ARB_vertex_buffer_object")) {
        GLH_EXT_NAME(glBindBufferARB) = (PFNGLBINDBUFFERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glBindBufferARB");
        if (NULL == GLH_EXT_NAME(glBindBufferARB))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteBuffersARB) = (PFNGLDELETEBUFFERSARBPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteBuffersARB");
        if (NULL == GLH_EXT_NAME(glDeleteBuffersARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGenBuffersARB) = (PFNGLGENBUFFERSARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGenBuffersARB");
        if (NULL == GLH_EXT_NAME(glGenBuffersARB))
            return GL_FALSE;
        GLH_EXT_NAME(glIsBufferARB) = (PFNGLISBUFFERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glIsBufferARB");
        if (NULL == GLH_EXT_NAME(glIsBufferARB))
            return GL_FALSE;
        GLH_EXT_NAME(glBufferDataARB) = (PFNGLBUFFERDATAARBPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferDataARB");
        if (NULL == GLH_EXT_NAME(glBufferDataARB))
            return GL_FALSE;
        GLH_EXT_NAME(glBufferSubDataARB) = (PFNGLBUFFERSUBDATAARBPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferSubDataARB");
        if (NULL == GLH_EXT_NAME(glBufferSubDataARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetBufferSubDataARB) = (PFNGLGETBUFFERSUBDATAARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferSubDataARB");
        if (NULL == GLH_EXT_NAME(glGetBufferSubDataARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMapBufferARB) = (PFNGLMAPBUFFERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMapBufferARB");
        if (NULL == GLH_EXT_NAME(glMapBufferARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUnmapBufferARB) = (PFNGLUNMAPBUFFERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUnmapBufferARB");
        if (NULL == GLH_EXT_NAME(glUnmapBufferARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetBufferParameterivARB) = (PFNGLGETBUFFERPARAMETERIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferParameterivARB");
        if (NULL == GLH_EXT_NAME(glGetBufferParameterivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetBufferPointervARB) = (PFNGLGETBUFFERPOINTERVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferPointervARB");
        if (NULL == GLH_EXT_NAME(glGetBufferPointervARB))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_occlusion_query
    }
    if (0 == strcmp(extension, "GL_ARB_occlusion_query")) {
        GLH_EXT_NAME(glGenQueriesARB) = (PFNGLGENQUERIESARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGenQueriesARB");
        if (NULL == GLH_EXT_NAME(glGenQueriesARB))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteQueriesARB) = (PFNGLDELETEQUERIESARBPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteQueriesARB");
        if (NULL == GLH_EXT_NAME(glDeleteQueriesARB))
            return GL_FALSE;
        GLH_EXT_NAME(glIsQueryARB) = (PFNGLISQUERYARBPROC)GLH_EXT_GET_PROC_ADDRESS("glIsQueryARB");
        if (NULL == GLH_EXT_NAME(glIsQueryARB))
            return GL_FALSE;
        GLH_EXT_NAME(glBeginQueryARB) = (PFNGLBEGINQUERYARBPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginQueryARB");
        if (NULL == GLH_EXT_NAME(glBeginQueryARB))
            return GL_FALSE;
        GLH_EXT_NAME(glEndQueryARB) = (PFNGLENDQUERYARBPROC)GLH_EXT_GET_PROC_ADDRESS("glEndQueryARB");
        if (NULL == GLH_EXT_NAME(glEndQueryARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetQueryivARB) = (PFNGLGETQUERYIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryivARB");
        if (NULL == GLH_EXT_NAME(glGetQueryivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetQueryObjectivARB) = (PFNGLGETQUERYOBJECTIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectivARB");
        if (NULL == GLH_EXT_NAME(glGetQueryObjectivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetQueryObjectuivARB) = (PFNGLGETQUERYOBJECTUIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectuivARB");
        if (NULL == GLH_EXT_NAME(glGetQueryObjectuivARB))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_shader_objects
    }
    if (0 == strcmp(extension, "GL_ARB_shader_objects")) {
        GLH_EXT_NAME(glDeleteObjectARB) = (PFNGLDELETEOBJECTARBPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteObjectARB");
        if (NULL == GLH_EXT_NAME(glDeleteObjectARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetHandleARB) = (PFNGLGETHANDLEARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHandleARB");
        if (NULL == GLH_EXT_NAME(glGetHandleARB))
            return GL_FALSE;
        GLH_EXT_NAME(glDetachObjectARB) = (PFNGLDETACHOBJECTARBPROC)GLH_EXT_GET_PROC_ADDRESS("glDetachObjectARB");
        if (NULL == GLH_EXT_NAME(glDetachObjectARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCreateShaderObjectARB) = (PFNGLCREATESHADEROBJECTARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCreateShaderObjectARB");
        if (NULL == GLH_EXT_NAME(glCreateShaderObjectARB))
            return GL_FALSE;
        GLH_EXT_NAME(glShaderSourceARB) = (PFNGLSHADERSOURCEARBPROC)GLH_EXT_GET_PROC_ADDRESS("glShaderSourceARB");
        if (NULL == GLH_EXT_NAME(glShaderSourceARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCompileShaderARB) = (PFNGLCOMPILESHADERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompileShaderARB");
        if (NULL == GLH_EXT_NAME(glCompileShaderARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCreateProgramObjectARB) = (PFNGLCREATEPROGRAMOBJECTARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCreateProgramObjectARB");
        if (NULL == GLH_EXT_NAME(glCreateProgramObjectARB))
            return GL_FALSE;
        GLH_EXT_NAME(glAttachObjectARB) = (PFNGLATTACHOBJECTARBPROC)GLH_EXT_GET_PROC_ADDRESS("glAttachObjectARB");
        if (NULL == GLH_EXT_NAME(glAttachObjectARB))
            return GL_FALSE;
        GLH_EXT_NAME(glLinkProgramARB) = (PFNGLLINKPROGRAMARBPROC)GLH_EXT_GET_PROC_ADDRESS("glLinkProgramARB");
        if (NULL == GLH_EXT_NAME(glLinkProgramARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUseProgramObjectARB) = (PFNGLUSEPROGRAMOBJECTARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUseProgramObjectARB");
        if (NULL == GLH_EXT_NAME(glUseProgramObjectARB))
            return GL_FALSE;
        GLH_EXT_NAME(glValidateProgramARB) = (PFNGLVALIDATEPROGRAMARBPROC)GLH_EXT_GET_PROC_ADDRESS("glValidateProgramARB");
        if (NULL == GLH_EXT_NAME(glValidateProgramARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform1fARB) = (PFNGLUNIFORM1FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1fARB");
        if (NULL == GLH_EXT_NAME(glUniform1fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform2fARB) = (PFNGLUNIFORM2FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2fARB");
        if (NULL == GLH_EXT_NAME(glUniform2fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform3fARB) = (PFNGLUNIFORM3FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3fARB");
        if (NULL == GLH_EXT_NAME(glUniform3fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform4fARB) = (PFNGLUNIFORM4FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4fARB");
        if (NULL == GLH_EXT_NAME(glUniform4fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform1iARB) = (PFNGLUNIFORM1IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1iARB");
        if (NULL == GLH_EXT_NAME(glUniform1iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform2iARB) = (PFNGLUNIFORM2IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2iARB");
        if (NULL == GLH_EXT_NAME(glUniform2iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform3iARB) = (PFNGLUNIFORM3IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3iARB");
        if (NULL == GLH_EXT_NAME(glUniform3iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform4iARB) = (PFNGLUNIFORM4IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4iARB");
        if (NULL == GLH_EXT_NAME(glUniform4iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform1fvARB) = (PFNGLUNIFORM1FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1fvARB");
        if (NULL == GLH_EXT_NAME(glUniform1fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform2fvARB) = (PFNGLUNIFORM2FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2fvARB");
        if (NULL == GLH_EXT_NAME(glUniform2fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform3fvARB) = (PFNGLUNIFORM3FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3fvARB");
        if (NULL == GLH_EXT_NAME(glUniform3fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform4fvARB) = (PFNGLUNIFORM4FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4fvARB");
        if (NULL == GLH_EXT_NAME(glUniform4fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform1ivARB) = (PFNGLUNIFORM1IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1ivARB");
        if (NULL == GLH_EXT_NAME(glUniform1ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform2ivARB) = (PFNGLUNIFORM2IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2ivARB");
        if (NULL == GLH_EXT_NAME(glUniform2ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform3ivARB) = (PFNGLUNIFORM3IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3ivARB");
        if (NULL == GLH_EXT_NAME(glUniform3ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform4ivARB) = (PFNGLUNIFORM4IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4ivARB");
        if (NULL == GLH_EXT_NAME(glUniform4ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniformMatrix2fvARB) = (PFNGLUNIFORMMATRIX2FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix2fvARB");
        if (NULL == GLH_EXT_NAME(glUniformMatrix2fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniformMatrix3fvARB) = (PFNGLUNIFORMMATRIX3FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix3fvARB");
        if (NULL == GLH_EXT_NAME(glUniformMatrix3fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniformMatrix4fvARB) = (PFNGLUNIFORMMATRIX4FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix4fvARB");
        if (NULL == GLH_EXT_NAME(glUniformMatrix4fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetObjectParameterfvARB) = (PFNGLGETOBJECTPARAMETERFVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetObjectParameterfvARB");
        if (NULL == GLH_EXT_NAME(glGetObjectParameterfvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetObjectParameterivARB) = (PFNGLGETOBJECTPARAMETERIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetObjectParameterivARB");
        if (NULL == GLH_EXT_NAME(glGetObjectParameterivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetInfoLogARB) = (PFNGLGETINFOLOGARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetInfoLogARB");
        if (NULL == GLH_EXT_NAME(glGetInfoLogARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetAttachedObjectsARB) = (PFNGLGETATTACHEDOBJECTSARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetAttachedObjectsARB");
        if (NULL == GLH_EXT_NAME(glGetAttachedObjectsARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetUniformLocationARB) = (PFNGLGETUNIFORMLOCATIONARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformLocationARB");
        if (NULL == GLH_EXT_NAME(glGetUniformLocationARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetActiveUniformARB) = (PFNGLGETACTIVEUNIFORMARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetActiveUniformARB");
        if (NULL == GLH_EXT_NAME(glGetActiveUniformARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetUniformfvARB) = (PFNGLGETUNIFORMFVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformfvARB");
        if (NULL == GLH_EXT_NAME(glGetUniformfvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetUniformivARB) = (PFNGLGETUNIFORMIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformivARB");
        if (NULL == GLH_EXT_NAME(glGetUniformivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetShaderSourceARB) = (PFNGLGETSHADERSOURCEARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetShaderSourceARB");
        if (NULL == GLH_EXT_NAME(glGetShaderSourceARB))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_vertex_shader
    }
    if (0 == strcmp(extension, "GL_ARB_vertex_shader")) {
        GLH_EXT_NAME(glBindAttribLocationARB) = (PFNGLBINDATTRIBLOCATIONARBPROC)GLH_EXT_GET_PROC_ADDRESS("glBindAttribLocationARB");
        if (NULL == GLH_EXT_NAME(glBindAttribLocationARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetActiveAttribARB) = (PFNGLGETACTIVEATTRIBARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetActiveAttribARB");
        if (NULL == GLH_EXT_NAME(glGetActiveAttribARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetAttribLocationARB) = (PFNGLGETATTRIBLOCATIONARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetAttribLocationARB");
        if (NULL == GLH_EXT_NAME(glGetAttribLocationARB))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_fragment_shader
    }
    if (0 == strcmp(extension, "GL_ARB_fragment_shader")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_shading_language_100
    }
    if (0 == strcmp(extension, "GL_ARB_shading_language_100")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_texture_non_power_of_two
    }
    if (0 == strcmp(extension, "GL_ARB_texture_non_power_of_two")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_point_sprite
    }
    if (0 == strcmp(extension, "GL_ARB_point_sprite")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_fragment_program_shadow
    }
    if (0 == strcmp(extension, "GL_ARB_fragment_program_shadow")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_draw_buffers
    }
    if (0 == strcmp(extension, "GL_ARB_draw_buffers")) {
        GLH_EXT_NAME(glDrawBuffersARB) = (PFNGLDRAWBUFFERSARBPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawBuffersARB");
        if (NULL == GLH_EXT_NAME(glDrawBuffersARB))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_texture_rectangle
    }
    if (0 == strcmp(extension, "GL_ARB_texture_rectangle")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_color_buffer_float
    }
    if (0 == strcmp(extension, "GL_ARB_color_buffer_float")) {
        GLH_EXT_NAME(glClampColorARB) = (PFNGLCLAMPCOLORARBPROC)GLH_EXT_GET_PROC_ADDRESS("glClampColorARB");
        if (NULL == GLH_EXT_NAME(glClampColorARB))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ARB_half_float_pixel
    }
    if (0 == strcmp(extension, "GL_ARB_half_float_pixel")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_texture_float
    }
    if (0 == strcmp(extension, "GL_ARB_texture_float")) {
        return GL_TRUE;
#endif

#ifdef GL_ARB_pixel_buffer_object
    }
    if (0 == strcmp(extension, "GL_ARB_pixel_buffer_object")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_abgr
    }
    if (0 == strcmp(extension, "GL_EXT_abgr")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_blend_color
    }
    if (0 == strcmp(extension, "GL_EXT_blend_color")) {
        GLH_EXT_NAME(glBlendColorEXT) = (PFNGLBLENDCOLOREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColorEXT");
        if (NULL == GLH_EXT_NAME(glBlendColorEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_polygon_offset
    }
    if (0 == strcmp(extension, "GL_EXT_polygon_offset")) {
        GLH_EXT_NAME(glPolygonOffsetEXT) = (PFNGLPOLYGONOFFSETEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPolygonOffsetEXT");
        if (NULL == GLH_EXT_NAME(glPolygonOffsetEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture
    }
    if (0 == strcmp(extension, "GL_EXT_texture")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture3D
    }
    if (0 == strcmp(extension, "GL_EXT_texture3D")) {
        GLH_EXT_NAME(glTexImage3DEXT) = (PFNGLTEXIMAGE3DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage3DEXT");
        if (NULL == GLH_EXT_NAME(glTexImage3DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTexSubImage3DEXT) = (PFNGLTEXSUBIMAGE3DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage3DEXT");
        if (NULL == GLH_EXT_NAME(glTexSubImage3DEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIS_texture_filter4
    }
    if (0 == strcmp(extension, "GL_SGIS_texture_filter4")) {
        GLH_EXT_NAME(glGetTexFilterFuncSGIS) = (PFNGLGETTEXFILTERFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glGetTexFilterFuncSGIS");
        if (NULL == GLH_EXT_NAME(glGetTexFilterFuncSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glTexFilterFuncSGIS) = (PFNGLTEXFILTERFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glTexFilterFuncSGIS");
        if (NULL == GLH_EXT_NAME(glTexFilterFuncSGIS))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_subtexture
    }
    if (0 == strcmp(extension, "GL_EXT_subtexture")) {
        GLH_EXT_NAME(glTexSubImage1DEXT) = (PFNGLTEXSUBIMAGE1DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage1DEXT");
        if (NULL == GLH_EXT_NAME(glTexSubImage1DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTexSubImage2DEXT) = (PFNGLTEXSUBIMAGE2DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage2DEXT");
        if (NULL == GLH_EXT_NAME(glTexSubImage2DEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_copy_texture
    }
    if (0 == strcmp(extension, "GL_EXT_copy_texture")) {
        GLH_EXT_NAME(glCopyTexImage1DEXT) = (PFNGLCOPYTEXIMAGE1DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexImage1DEXT");
        if (NULL == GLH_EXT_NAME(glCopyTexImage1DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyTexImage2DEXT) = (PFNGLCOPYTEXIMAGE2DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexImage2DEXT");
        if (NULL == GLH_EXT_NAME(glCopyTexImage2DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyTexSubImage1DEXT) = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage1DEXT");
        if (NULL == GLH_EXT_NAME(glCopyTexSubImage1DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyTexSubImage2DEXT) = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage2DEXT");
        if (NULL == GLH_EXT_NAME(glCopyTexSubImage2DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyTexSubImage3DEXT) = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage3DEXT");
        if (NULL == GLH_EXT_NAME(glCopyTexSubImage3DEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_histogram
    }
    if (0 == strcmp(extension, "GL_EXT_histogram")) {
        GLH_EXT_NAME(glGetHistogramEXT) = (PFNGLGETHISTOGRAMEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramEXT");
        if (NULL == GLH_EXT_NAME(glGetHistogramEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetHistogramParameterfvEXT) = (PFNGLGETHISTOGRAMPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glGetHistogramParameterfvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetHistogramParameterivEXT) = (PFNGLGETHISTOGRAMPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterivEXT");
        if (NULL == GLH_EXT_NAME(glGetHistogramParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMinmaxEXT) = (PFNGLGETMINMAXEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxEXT");
        if (NULL == GLH_EXT_NAME(glGetMinmaxEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMinmaxParameterfvEXT) = (PFNGLGETMINMAXPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glGetMinmaxParameterfvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMinmaxParameterivEXT) = (PFNGLGETMINMAXPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterivEXT");
        if (NULL == GLH_EXT_NAME(glGetMinmaxParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glHistogramEXT) = (PFNGLHISTOGRAMEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glHistogramEXT");
        if (NULL == GLH_EXT_NAME(glHistogramEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glMinmaxEXT) = (PFNGLMINMAXEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glMinmaxEXT");
        if (NULL == GLH_EXT_NAME(glMinmaxEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glResetHistogramEXT) = (PFNGLRESETHISTOGRAMEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glResetHistogramEXT");
        if (NULL == GLH_EXT_NAME(glResetHistogramEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glResetMinmaxEXT) = (PFNGLRESETMINMAXEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glResetMinmaxEXT");
        if (NULL == GLH_EXT_NAME(glResetMinmaxEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_convolution
    }
    if (0 == strcmp(extension, "GL_EXT_convolution")) {
        GLH_EXT_NAME(glConvolutionFilter1DEXT) = (PFNGLCONVOLUTIONFILTER1DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter1DEXT");
        if (NULL == GLH_EXT_NAME(glConvolutionFilter1DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glConvolutionFilter2DEXT) = (PFNGLCONVOLUTIONFILTER2DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter2DEXT");
        if (NULL == GLH_EXT_NAME(glConvolutionFilter2DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glConvolutionParameterfEXT) = (PFNGLCONVOLUTIONPARAMETERFEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfEXT");
        if (NULL == GLH_EXT_NAME(glConvolutionParameterfEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glConvolutionParameterfvEXT) = (PFNGLCONVOLUTIONPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glConvolutionParameterfvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glConvolutionParameteriEXT) = (PFNGLCONVOLUTIONPARAMETERIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteriEXT");
        if (NULL == GLH_EXT_NAME(glConvolutionParameteriEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glConvolutionParameterivEXT) = (PFNGLCONVOLUTIONPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterivEXT");
        if (NULL == GLH_EXT_NAME(glConvolutionParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyConvolutionFilter1DEXT) = (PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter1DEXT");
        if (NULL == GLH_EXT_NAME(glCopyConvolutionFilter1DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyConvolutionFilter2DEXT) = (PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter2DEXT");
        if (NULL == GLH_EXT_NAME(glCopyConvolutionFilter2DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetConvolutionFilterEXT) = (PFNGLGETCONVOLUTIONFILTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionFilterEXT");
        if (NULL == GLH_EXT_NAME(glGetConvolutionFilterEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetConvolutionParameterfvEXT) = (PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glGetConvolutionParameterfvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetConvolutionParameterivEXT) = (PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterivEXT");
        if (NULL == GLH_EXT_NAME(glGetConvolutionParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetSeparableFilterEXT) = (PFNGLGETSEPARABLEFILTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSeparableFilterEXT");
        if (NULL == GLH_EXT_NAME(glGetSeparableFilterEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSeparableFilter2DEXT) = (PFNGLSEPARABLEFILTER2DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSeparableFilter2DEXT");
        if (NULL == GLH_EXT_NAME(glSeparableFilter2DEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_color_matrix
    }
    if (0 == strcmp(extension, "GL_EXT_color_matrix")) {
        return GL_TRUE;
#endif

#ifdef GL_SGI_color_table
    }
    if (0 == strcmp(extension, "GL_SGI_color_table")) {
        GLH_EXT_NAME(glColorTableSGI) = (PFNGLCOLORTABLESGIPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableSGI");
        if (NULL == GLH_EXT_NAME(glColorTableSGI))
            return GL_FALSE;
        GLH_EXT_NAME(glColorTableParameterfvSGI) = (PFNGLCOLORTABLEPARAMETERFVSGIPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterfvSGI");
        if (NULL == GLH_EXT_NAME(glColorTableParameterfvSGI))
            return GL_FALSE;
        GLH_EXT_NAME(glColorTableParameterivSGI) = (PFNGLCOLORTABLEPARAMETERIVSGIPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterivSGI");
        if (NULL == GLH_EXT_NAME(glColorTableParameterivSGI))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyColorTableSGI) = (PFNGLCOPYCOLORTABLESGIPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorTableSGI");
        if (NULL == GLH_EXT_NAME(glCopyColorTableSGI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetColorTableSGI) = (PFNGLGETCOLORTABLESGIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableSGI");
        if (NULL == GLH_EXT_NAME(glGetColorTableSGI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetColorTableParameterfvSGI) = (PFNGLGETCOLORTABLEPARAMETERFVSGIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfvSGI");
        if (NULL == GLH_EXT_NAME(glGetColorTableParameterfvSGI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetColorTableParameterivSGI) = (PFNGLGETCOLORTABLEPARAMETERIVSGIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterivSGI");
        if (NULL == GLH_EXT_NAME(glGetColorTableParameterivSGI))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_pixel_texture
    }
    if (0 == strcmp(extension, "GL_SGIX_pixel_texture")) {
        GLH_EXT_NAME(glPixelTexGenSGIX) = (PFNGLPIXELTEXGENSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTexGenSGIX");
        if (NULL == GLH_EXT_NAME(glPixelTexGenSGIX))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIS_pixel_texture
    }
    if (0 == strcmp(extension, "GL_SGIS_pixel_texture")) {
        GLH_EXT_NAME(glPixelTexGenParameteriSGIS) = (PFNGLPIXELTEXGENPARAMETERISGISPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTexGenParameteriSGIS");
        if (NULL == GLH_EXT_NAME(glPixelTexGenParameteriSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glPixelTexGenParameterivSGIS) = (PFNGLPIXELTEXGENPARAMETERIVSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTexGenParameterivSGIS");
        if (NULL == GLH_EXT_NAME(glPixelTexGenParameterivSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glPixelTexGenParameterfSGIS) = (PFNGLPIXELTEXGENPARAMETERFSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTexGenParameterfSGIS");
        if (NULL == GLH_EXT_NAME(glPixelTexGenParameterfSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glPixelTexGenParameterfvSGIS) = (PFNGLPIXELTEXGENPARAMETERFVSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTexGenParameterfvSGIS");
        if (NULL == GLH_EXT_NAME(glPixelTexGenParameterfvSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glGetPixelTexGenParameterivSGIS) = (PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glGetPixelTexGenParameterivSGIS");
        if (NULL == GLH_EXT_NAME(glGetPixelTexGenParameterivSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glGetPixelTexGenParameterfvSGIS) = (PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glGetPixelTexGenParameterfvSGIS");
        if (NULL == GLH_EXT_NAME(glGetPixelTexGenParameterfvSGIS))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIS_texture4D
    }
    if (0 == strcmp(extension, "GL_SGIS_texture4D")) {
        GLH_EXT_NAME(glTexImage4DSGIS) = (PFNGLTEXIMAGE4DSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage4DSGIS");
        if (NULL == GLH_EXT_NAME(glTexImage4DSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glTexSubImage4DSGIS) = (PFNGLTEXSUBIMAGE4DSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage4DSGIS");
        if (NULL == GLH_EXT_NAME(glTexSubImage4DSGIS))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGI_texture_color_table
    }
    if (0 == strcmp(extension, "GL_SGI_texture_color_table")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_cmyka
    }
    if (0 == strcmp(extension, "GL_EXT_cmyka")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture_object
    }
    if (0 == strcmp(extension, "GL_EXT_texture_object")) {
        GLH_EXT_NAME(glAreTexturesResidentEXT) = (PFNGLARETEXTURESRESIDENTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glAreTexturesResidentEXT");
        if (NULL == GLH_EXT_NAME(glAreTexturesResidentEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindTextureEXT) = (PFNGLBINDTEXTUREEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindTextureEXT");
        if (NULL == GLH_EXT_NAME(glBindTextureEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteTexturesEXT) = (PFNGLDELETETEXTURESEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteTexturesEXT");
        if (NULL == GLH_EXT_NAME(glDeleteTexturesEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGenTexturesEXT) = (PFNGLGENTEXTURESEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGenTexturesEXT");
        if (NULL == GLH_EXT_NAME(glGenTexturesEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glIsTextureEXT) = (PFNGLISTEXTUREEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIsTextureEXT");
        if (NULL == GLH_EXT_NAME(glIsTextureEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glPrioritizeTexturesEXT) = (PFNGLPRIORITIZETEXTURESEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPrioritizeTexturesEXT");
        if (NULL == GLH_EXT_NAME(glPrioritizeTexturesEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIS_detail_texture
    }
    if (0 == strcmp(extension, "GL_SGIS_detail_texture")) {
        GLH_EXT_NAME(glDetailTexFuncSGIS) = (PFNGLDETAILTEXFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glDetailTexFuncSGIS");
        if (NULL == GLH_EXT_NAME(glDetailTexFuncSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glGetDetailTexFuncSGIS) = (PFNGLGETDETAILTEXFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glGetDetailTexFuncSGIS");
        if (NULL == GLH_EXT_NAME(glGetDetailTexFuncSGIS))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIS_sharpen_texture
    }
    if (0 == strcmp(extension, "GL_SGIS_sharpen_texture")) {
        GLH_EXT_NAME(glSharpenTexFuncSGIS) = (PFNGLSHARPENTEXFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glSharpenTexFuncSGIS");
        if (NULL == GLH_EXT_NAME(glSharpenTexFuncSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glGetSharpenTexFuncSGIS) = (PFNGLGETSHARPENTEXFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSharpenTexFuncSGIS");
        if (NULL == GLH_EXT_NAME(glGetSharpenTexFuncSGIS))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_packed_pixels
    }
    if (0 == strcmp(extension, "GL_EXT_packed_pixels")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIS_texture_lod
    }
    if (0 == strcmp(extension, "GL_SGIS_texture_lod")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIS_multisample
    }
    if (0 == strcmp(extension, "GL_SGIS_multisample")) {
        GLH_EXT_NAME(glSampleMaskSGIS) = (PFNGLSAMPLEMASKSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleMaskSGIS");
        if (NULL == GLH_EXT_NAME(glSampleMaskSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glSamplePatternSGIS) = (PFNGLSAMPLEPATTERNSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glSamplePatternSGIS");
        if (NULL == GLH_EXT_NAME(glSamplePatternSGIS))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_rescale_normal
    }
    if (0 == strcmp(extension, "GL_EXT_rescale_normal")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_vertex_array
    }
    if (0 == strcmp(extension, "GL_EXT_vertex_array")) {
        GLH_EXT_NAME(glArrayElementEXT) = (PFNGLARRAYELEMENTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glArrayElementEXT");
        if (NULL == GLH_EXT_NAME(glArrayElementEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glColorPointerEXT) = (PFNGLCOLORPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glColorPointerEXT");
        if (NULL == GLH_EXT_NAME(glColorPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDrawArraysEXT) = (PFNGLDRAWARRAYSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawArraysEXT");
        if (NULL == GLH_EXT_NAME(glDrawArraysEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glEdgeFlagPointerEXT) = (PFNGLEDGEFLAGPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glEdgeFlagPointerEXT");
        if (NULL == GLH_EXT_NAME(glEdgeFlagPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetPointervEXT) = (PFNGLGETPOINTERVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetPointervEXT");
        if (NULL == GLH_EXT_NAME(glGetPointervEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glIndexPointerEXT) = (PFNGLINDEXPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIndexPointerEXT");
        if (NULL == GLH_EXT_NAME(glIndexPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalPointerEXT) = (PFNGLNORMALPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalPointerEXT");
        if (NULL == GLH_EXT_NAME(glNormalPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoordPointerEXT) = (PFNGLTEXCOORDPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoordPointerEXT");
        if (NULL == GLH_EXT_NAME(glTexCoordPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexPointerEXT) = (PFNGLVERTEXPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexPointerEXT");
        if (NULL == GLH_EXT_NAME(glVertexPointerEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_misc_attribute
    }
    if (0 == strcmp(extension, "GL_EXT_misc_attribute")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIS_generate_mipmap
    }
    if (0 == strcmp(extension, "GL_SGIS_generate_mipmap")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_clipmap
    }
    if (0 == strcmp(extension, "GL_SGIX_clipmap")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_shadow
    }
    if (0 == strcmp(extension, "GL_SGIX_shadow")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIS_texture_edge_clamp
    }
    if (0 == strcmp(extension, "GL_SGIS_texture_edge_clamp")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIS_texture_border_clamp
    }
    if (0 == strcmp(extension, "GL_SGIS_texture_border_clamp")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_blend_minmax
    }
    if (0 == strcmp(extension, "GL_EXT_blend_minmax")) {
        GLH_EXT_NAME(glBlendEquationEXT) = (PFNGLBLENDEQUATIONEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquationEXT");
        if (NULL == GLH_EXT_NAME(glBlendEquationEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_blend_subtract
    }
    if (0 == strcmp(extension, "GL_EXT_blend_subtract")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_blend_logic_op
    }
    if (0 == strcmp(extension, "GL_EXT_blend_logic_op")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_interlace
    }
    if (0 == strcmp(extension, "GL_SGIX_interlace")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_pixel_tiles
    }
    if (0 == strcmp(extension, "GL_SGIX_pixel_tiles")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_texture_select
    }
    if (0 == strcmp(extension, "GL_SGIX_texture_select")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_sprite
    }
    if (0 == strcmp(extension, "GL_SGIX_sprite")) {
        GLH_EXT_NAME(glSpriteParameterfSGIX) = (PFNGLSPRITEPARAMETERFSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glSpriteParameterfSGIX");
        if (NULL == GLH_EXT_NAME(glSpriteParameterfSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glSpriteParameterfvSGIX) = (PFNGLSPRITEPARAMETERFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glSpriteParameterfvSGIX");
        if (NULL == GLH_EXT_NAME(glSpriteParameterfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glSpriteParameteriSGIX) = (PFNGLSPRITEPARAMETERISGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glSpriteParameteriSGIX");
        if (NULL == GLH_EXT_NAME(glSpriteParameteriSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glSpriteParameterivSGIX) = (PFNGLSPRITEPARAMETERIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glSpriteParameterivSGIX");
        if (NULL == GLH_EXT_NAME(glSpriteParameterivSGIX))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_texture_multi_buffer
    }
    if (0 == strcmp(extension, "GL_SGIX_texture_multi_buffer")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_point_parameters
    }
    if (0 == strcmp(extension, "GL_EXT_point_parameters")) {
        GLH_EXT_NAME(glPointParameterfEXT) = (PFNGLPOINTPARAMETERFEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfEXT");
        if (NULL == GLH_EXT_NAME(glPointParameterfEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glPointParameterfvEXT) = (PFNGLPOINTPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glPointParameterfvEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIS_point_parameters
    }
    if (0 == strcmp(extension, "GL_SGIS_point_parameters")) {
        GLH_EXT_NAME(glPointParameterfSGIS) = (PFNGLPOINTPARAMETERFSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfSGIS");
        if (NULL == GLH_EXT_NAME(glPointParameterfSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glPointParameterfvSGIS) = (PFNGLPOINTPARAMETERFVSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfvSGIS");
        if (NULL == GLH_EXT_NAME(glPointParameterfvSGIS))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_instruments
    }
    if (0 == strcmp(extension, "GL_SGIX_instruments")) {
        GLH_EXT_NAME(glGetInstrumentsSGIX) = (PFNGLGETINSTRUMENTSSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetInstrumentsSGIX");
        if (NULL == GLH_EXT_NAME(glGetInstrumentsSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glInstrumentsBufferSGIX) = (PFNGLINSTRUMENTSBUFFERSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glInstrumentsBufferSGIX");
        if (NULL == GLH_EXT_NAME(glInstrumentsBufferSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glPollInstrumentsSGIX) = (PFNGLPOLLINSTRUMENTSSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glPollInstrumentsSGIX");
        if (NULL == GLH_EXT_NAME(glPollInstrumentsSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glReadInstrumentsSGIX) = (PFNGLREADINSTRUMENTSSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glReadInstrumentsSGIX");
        if (NULL == GLH_EXT_NAME(glReadInstrumentsSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glStartInstrumentsSGIX) = (PFNGLSTARTINSTRUMENTSSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glStartInstrumentsSGIX");
        if (NULL == GLH_EXT_NAME(glStartInstrumentsSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glStopInstrumentsSGIX) = (PFNGLSTOPINSTRUMENTSSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glStopInstrumentsSGIX");
        if (NULL == GLH_EXT_NAME(glStopInstrumentsSGIX))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_texture_scale_bias
    }
    if (0 == strcmp(extension, "GL_SGIX_texture_scale_bias")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_framezoom
    }
    if (0 == strcmp(extension, "GL_SGIX_framezoom")) {
        GLH_EXT_NAME(glFrameZoomSGIX) = (PFNGLFRAMEZOOMSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFrameZoomSGIX");
        if (NULL == GLH_EXT_NAME(glFrameZoomSGIX))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_tag_sample_buffer
    }
    if (0 == strcmp(extension, "GL_SGIX_tag_sample_buffer")) {
        GLH_EXT_NAME(glTagSampleBufferSGIX) = (PFNGLTAGSAMPLEBUFFERSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glTagSampleBufferSGIX");
        if (NULL == GLH_EXT_NAME(glTagSampleBufferSGIX))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_polynomial_ffd
    }
    if (0 == strcmp(extension, "GL_SGIX_polynomial_ffd")) {
        GLH_EXT_NAME(glDeformationMap3dSGIX) = (PFNGLDEFORMATIONMAP3DSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glDeformationMap3dSGIX");
        if (NULL == GLH_EXT_NAME(glDeformationMap3dSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glDeformationMap3fSGIX) = (PFNGLDEFORMATIONMAP3FSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glDeformationMap3fSGIX");
        if (NULL == GLH_EXT_NAME(glDeformationMap3fSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glDeformSGIX) = (PFNGLDEFORMSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glDeformSGIX");
        if (NULL == GLH_EXT_NAME(glDeformSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glLoadIdentityDeformationMapSGIX) = (PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadIdentityDeformationMapSGIX");
        if (NULL == GLH_EXT_NAME(glLoadIdentityDeformationMapSGIX))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_reference_plane
    }
    if (0 == strcmp(extension, "GL_SGIX_reference_plane")) {
        GLH_EXT_NAME(glReferencePlaneSGIX) = (PFNGLREFERENCEPLANESGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glReferencePlaneSGIX");
        if (NULL == GLH_EXT_NAME(glReferencePlaneSGIX))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_flush_raster
    }
    if (0 == strcmp(extension, "GL_SGIX_flush_raster")) {
        GLH_EXT_NAME(glFlushRasterSGIX) = (PFNGLFLUSHRASTERSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFlushRasterSGIX");
        if (NULL == GLH_EXT_NAME(glFlushRasterSGIX))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_depth_texture
    }
    if (0 == strcmp(extension, "GL_SGIX_depth_texture")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIS_fog_function
    }
    if (0 == strcmp(extension, "GL_SGIS_fog_function")) {
        GLH_EXT_NAME(glFogFuncSGIS) = (PFNGLFOGFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glFogFuncSGIS");
        if (NULL == GLH_EXT_NAME(glFogFuncSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFogFuncSGIS) = (PFNGLGETFOGFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFogFuncSGIS");
        if (NULL == GLH_EXT_NAME(glGetFogFuncSGIS))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_fog_offset
    }
    if (0 == strcmp(extension, "GL_SGIX_fog_offset")) {
        return GL_TRUE;
#endif

#ifdef GL_HP_image_transform
    }
    if (0 == strcmp(extension, "GL_HP_image_transform")) {
        GLH_EXT_NAME(glImageTransformParameteriHP) = (PFNGLIMAGETRANSFORMPARAMETERIHPPROC)GLH_EXT_GET_PROC_ADDRESS("glImageTransformParameteriHP");
        if (NULL == GLH_EXT_NAME(glImageTransformParameteriHP))
            return GL_FALSE;
        GLH_EXT_NAME(glImageTransformParameterfHP) = (PFNGLIMAGETRANSFORMPARAMETERFHPPROC)GLH_EXT_GET_PROC_ADDRESS("glImageTransformParameterfHP");
        if (NULL == GLH_EXT_NAME(glImageTransformParameterfHP))
            return GL_FALSE;
        GLH_EXT_NAME(glImageTransformParameterivHP) = (PFNGLIMAGETRANSFORMPARAMETERIVHPPROC)GLH_EXT_GET_PROC_ADDRESS("glImageTransformParameterivHP");
        if (NULL == GLH_EXT_NAME(glImageTransformParameterivHP))
            return GL_FALSE;
        GLH_EXT_NAME(glImageTransformParameterfvHP) = (PFNGLIMAGETRANSFORMPARAMETERFVHPPROC)GLH_EXT_GET_PROC_ADDRESS("glImageTransformParameterfvHP");
        if (NULL == GLH_EXT_NAME(glImageTransformParameterfvHP))
            return GL_FALSE;
        GLH_EXT_NAME(glGetImageTransformParameterivHP) = (PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC)GLH_EXT_GET_PROC_ADDRESS("glGetImageTransformParameterivHP");
        if (NULL == GLH_EXT_NAME(glGetImageTransformParameterivHP))
            return GL_FALSE;
        GLH_EXT_NAME(glGetImageTransformParameterfvHP) = (PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC)GLH_EXT_GET_PROC_ADDRESS("glGetImageTransformParameterfvHP");
        if (NULL == GLH_EXT_NAME(glGetImageTransformParameterfvHP))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_HP_convolution_border_modes
    }
    if (0 == strcmp(extension, "GL_HP_convolution_border_modes")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_texture_add_env
    }
    if (0 == strcmp(extension, "GL_SGIX_texture_add_env")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_color_subtable
    }
    if (0 == strcmp(extension, "GL_EXT_color_subtable")) {
        GLH_EXT_NAME(glColorSubTableEXT) = (PFNGLCOLORSUBTABLEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glColorSubTableEXT");
        if (NULL == GLH_EXT_NAME(glColorSubTableEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyColorSubTableEXT) = (PFNGLCOPYCOLORSUBTABLEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorSubTableEXT");
        if (NULL == GLH_EXT_NAME(glCopyColorSubTableEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_PGI_vertex_hints
    }
    if (0 == strcmp(extension, "GL_PGI_vertex_hints")) {
        return GL_TRUE;
#endif

#ifdef GL_PGI_misc_hints
    }
    if (0 == strcmp(extension, "GL_PGI_misc_hints")) {
        GLH_EXT_NAME(glHintPGI) = (PFNGLHINTPGIPROC)GLH_EXT_GET_PROC_ADDRESS("glHintPGI");
        if (NULL == GLH_EXT_NAME(glHintPGI))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_paletted_texture
    }
    if (0 == strcmp(extension, "GL_EXT_paletted_texture")) {
        GLH_EXT_NAME(glColorTableEXT) = (PFNGLCOLORTABLEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableEXT");
        if (NULL == GLH_EXT_NAME(glColorTableEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetColorTableEXT) = (PFNGLGETCOLORTABLEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableEXT");
        if (NULL == GLH_EXT_NAME(glGetColorTableEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetColorTableParameterivEXT) = (PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterivEXT");
        if (NULL == GLH_EXT_NAME(glGetColorTableParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetColorTableParameterfvEXT) = (PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glGetColorTableParameterfvEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_clip_volume_hint
    }
    if (0 == strcmp(extension, "GL_EXT_clip_volume_hint")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_list_priority
    }
    if (0 == strcmp(extension, "GL_SGIX_list_priority")) {
        GLH_EXT_NAME(glGetListParameterfvSGIX) = (PFNGLGETLISTPARAMETERFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetListParameterfvSGIX");
        if (NULL == GLH_EXT_NAME(glGetListParameterfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glGetListParameterivSGIX) = (PFNGLGETLISTPARAMETERIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetListParameterivSGIX");
        if (NULL == GLH_EXT_NAME(glGetListParameterivSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glListParameterfSGIX) = (PFNGLLISTPARAMETERFSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glListParameterfSGIX");
        if (NULL == GLH_EXT_NAME(glListParameterfSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glListParameterfvSGIX) = (PFNGLLISTPARAMETERFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glListParameterfvSGIX");
        if (NULL == GLH_EXT_NAME(glListParameterfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glListParameteriSGIX) = (PFNGLLISTPARAMETERISGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glListParameteriSGIX");
        if (NULL == GLH_EXT_NAME(glListParameteriSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glListParameterivSGIX) = (PFNGLLISTPARAMETERIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glListParameterivSGIX");
        if (NULL == GLH_EXT_NAME(glListParameterivSGIX))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_ir_instrument1
    }
    if (0 == strcmp(extension, "GL_SGIX_ir_instrument1")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_calligraphic_fragment
    }
    if (0 == strcmp(extension, "GL_SGIX_calligraphic_fragment")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_texture_lod_bias
    }
    if (0 == strcmp(extension, "GL_SGIX_texture_lod_bias")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_shadow_ambient
    }
    if (0 == strcmp(extension, "GL_SGIX_shadow_ambient")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_index_texture
    }
    if (0 == strcmp(extension, "GL_EXT_index_texture")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_index_material
    }
    if (0 == strcmp(extension, "GL_EXT_index_material")) {
        GLH_EXT_NAME(glIndexMaterialEXT) = (PFNGLINDEXMATERIALEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIndexMaterialEXT");
        if (NULL == GLH_EXT_NAME(glIndexMaterialEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_index_func
    }
    if (0 == strcmp(extension, "GL_EXT_index_func")) {
        GLH_EXT_NAME(glIndexFuncEXT) = (PFNGLINDEXFUNCEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIndexFuncEXT");
        if (NULL == GLH_EXT_NAME(glIndexFuncEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_index_array_formats
    }
    if (0 == strcmp(extension, "GL_EXT_index_array_formats")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_compiled_vertex_array
    }
    if (0 == strcmp(extension, "GL_EXT_compiled_vertex_array")) {
        GLH_EXT_NAME(glLockArraysEXT) = (PFNGLLOCKARRAYSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glLockArraysEXT");
        if (NULL == GLH_EXT_NAME(glLockArraysEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUnlockArraysEXT) = (PFNGLUNLOCKARRAYSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUnlockArraysEXT");
        if (NULL == GLH_EXT_NAME(glUnlockArraysEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_cull_vertex
    }
    if (0 == strcmp(extension, "GL_EXT_cull_vertex")) {
        GLH_EXT_NAME(glCullParameterdvEXT) = (PFNGLCULLPARAMETERDVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCullParameterdvEXT");
        if (NULL == GLH_EXT_NAME(glCullParameterdvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCullParameterfvEXT) = (PFNGLCULLPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCullParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glCullParameterfvEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_ycrcb
    }
    if (0 == strcmp(extension, "GL_SGIX_ycrcb")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_fragment_lighting
    }
    if (0 == strcmp(extension, "GL_SGIX_fragment_lighting")) {
        GLH_EXT_NAME(glFragmentColorMaterialSGIX) = (PFNGLFRAGMENTCOLORMATERIALSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentColorMaterialSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentColorMaterialSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightfSGIX) = (PFNGLFRAGMENTLIGHTFSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightfSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightfSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightfvSGIX) = (PFNGLFRAGMENTLIGHTFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightfvSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightiSGIX) = (PFNGLFRAGMENTLIGHTISGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightiSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightiSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightivSGIX) = (PFNGLFRAGMENTLIGHTIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightivSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightivSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightModelfSGIX) = (PFNGLFRAGMENTLIGHTMODELFSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightModelfSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightModelfSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightModelfvSGIX) = (PFNGLFRAGMENTLIGHTMODELFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightModelfvSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightModelfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightModeliSGIX) = (PFNGLFRAGMENTLIGHTMODELISGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightModeliSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightModeliSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightModelivSGIX) = (PFNGLFRAGMENTLIGHTMODELIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightModelivSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightModelivSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentMaterialfSGIX) = (PFNGLFRAGMENTMATERIALFSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentMaterialfSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentMaterialfSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentMaterialfvSGIX) = (PFNGLFRAGMENTMATERIALFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentMaterialfvSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentMaterialfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentMaterialiSGIX) = (PFNGLFRAGMENTMATERIALISGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentMaterialiSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentMaterialiSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentMaterialivSGIX) = (PFNGLFRAGMENTMATERIALIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentMaterialivSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentMaterialivSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFragmentLightfvSGIX) = (PFNGLGETFRAGMENTLIGHTFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFragmentLightfvSGIX");
        if (NULL == GLH_EXT_NAME(glGetFragmentLightfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFragmentLightivSGIX) = (PFNGLGETFRAGMENTLIGHTIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFragmentLightivSGIX");
        if (NULL == GLH_EXT_NAME(glGetFragmentLightivSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFragmentMaterialfvSGIX) = (PFNGLGETFRAGMENTMATERIALFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFragmentMaterialfvSGIX");
        if (NULL == GLH_EXT_NAME(glGetFragmentMaterialfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFragmentMaterialivSGIX) = (PFNGLGETFRAGMENTMATERIALIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFragmentMaterialivSGIX");
        if (NULL == GLH_EXT_NAME(glGetFragmentMaterialivSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glLightEnviSGIX) = (PFNGLLIGHTENVISGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glLightEnviSGIX");
        if (NULL == GLH_EXT_NAME(glLightEnviSGIX))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_IBM_rasterpos_clip
    }
    if (0 == strcmp(extension, "GL_IBM_rasterpos_clip")) {
        return GL_TRUE;
#endif

#ifdef GL_HP_texture_lighting
    }
    if (0 == strcmp(extension, "GL_HP_texture_lighting")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_draw_range_elements
    }
    if (0 == strcmp(extension, "GL_EXT_draw_range_elements")) {
        GLH_EXT_NAME(glDrawRangeElementsEXT) = (PFNGLDRAWRANGEELEMENTSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElementsEXT");
        if (NULL == GLH_EXT_NAME(glDrawRangeElementsEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_WIN_phong_shading
    }
    if (0 == strcmp(extension, "GL_WIN_phong_shading")) {
        return GL_TRUE;
#endif

#ifdef GL_WIN_specular_fog
    }
    if (0 == strcmp(extension, "GL_WIN_specular_fog")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_light_texture
    }
    if (0 == strcmp(extension, "GL_EXT_light_texture")) {
        GLH_EXT_NAME(glApplyTextureEXT) = (PFNGLAPPLYTEXTUREEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glApplyTextureEXT");
        if (NULL == GLH_EXT_NAME(glApplyTextureEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTextureLightEXT) = (PFNGLTEXTURELIGHTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTextureLightEXT");
        if (NULL == GLH_EXT_NAME(glTextureLightEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTextureMaterialEXT) = (PFNGLTEXTUREMATERIALEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTextureMaterialEXT");
        if (NULL == GLH_EXT_NAME(glTextureMaterialEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_blend_alpha_minmax
    }
    if (0 == strcmp(extension, "GL_SGIX_blend_alpha_minmax")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_bgra
    }
    if (0 == strcmp(extension, "GL_EXT_bgra")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_async
    }
    if (0 == strcmp(extension, "GL_SGIX_async")) {
        GLH_EXT_NAME(glAsyncMarkerSGIX) = (PFNGLASYNCMARKERSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glAsyncMarkerSGIX");
        if (NULL == GLH_EXT_NAME(glAsyncMarkerSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFinishAsyncSGIX) = (PFNGLFINISHASYNCSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFinishAsyncSGIX");
        if (NULL == GLH_EXT_NAME(glFinishAsyncSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glPollAsyncSGIX) = (PFNGLPOLLASYNCSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glPollAsyncSGIX");
        if (NULL == GLH_EXT_NAME(glPollAsyncSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glGenAsyncMarkersSGIX) = (PFNGLGENASYNCMARKERSSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGenAsyncMarkersSGIX");
        if (NULL == GLH_EXT_NAME(glGenAsyncMarkersSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteAsyncMarkersSGIX) = (PFNGLDELETEASYNCMARKERSSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteAsyncMarkersSGIX");
        if (NULL == GLH_EXT_NAME(glDeleteAsyncMarkersSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glIsAsyncMarkerSGIX) = (PFNGLISASYNCMARKERSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glIsAsyncMarkerSGIX");
        if (NULL == GLH_EXT_NAME(glIsAsyncMarkerSGIX))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_async_pixel
    }
    if (0 == strcmp(extension, "GL_SGIX_async_pixel")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_async_histogram
    }
    if (0 == strcmp(extension, "GL_SGIX_async_histogram")) {
        return GL_TRUE;
#endif

#ifdef GL_INTEL_parallel_arrays
    }
    if (0 == strcmp(extension, "GL_INTEL_parallel_arrays")) {
        GLH_EXT_NAME(glVertexPointervINTEL) = (PFNGLVERTEXPOINTERVINTELPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexPointervINTEL");
        if (NULL == GLH_EXT_NAME(glVertexPointervINTEL))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalPointervINTEL) = (PFNGLNORMALPOINTERVINTELPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalPointervINTEL");
        if (NULL == GLH_EXT_NAME(glNormalPointervINTEL))
            return GL_FALSE;
        GLH_EXT_NAME(glColorPointervINTEL) = (PFNGLCOLORPOINTERVINTELPROC)GLH_EXT_GET_PROC_ADDRESS("glColorPointervINTEL");
        if (NULL == GLH_EXT_NAME(glColorPointervINTEL))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoordPointervINTEL) = (PFNGLTEXCOORDPOINTERVINTELPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoordPointervINTEL");
        if (NULL == GLH_EXT_NAME(glTexCoordPointervINTEL))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_HP_occlusion_test
    }
    if (0 == strcmp(extension, "GL_HP_occlusion_test")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_pixel_transform
    }
    if (0 == strcmp(extension, "GL_EXT_pixel_transform")) {
        GLH_EXT_NAME(glPixelTransformParameteriEXT) = (PFNGLPIXELTRANSFORMPARAMETERIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTransformParameteriEXT");
        if (NULL == GLH_EXT_NAME(glPixelTransformParameteriEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glPixelTransformParameterfEXT) = (PFNGLPIXELTRANSFORMPARAMETERFEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTransformParameterfEXT");
        if (NULL == GLH_EXT_NAME(glPixelTransformParameterfEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glPixelTransformParameterivEXT) = (PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTransformParameterivEXT");
        if (NULL == GLH_EXT_NAME(glPixelTransformParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glPixelTransformParameterfvEXT) = (PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTransformParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glPixelTransformParameterfvEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_pixel_transform_color_table
    }
    if (0 == strcmp(extension, "GL_EXT_pixel_transform_color_table")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_shared_texture_palette
    }
    if (0 == strcmp(extension, "GL_EXT_shared_texture_palette")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_separate_specular_color
    }
    if (0 == strcmp(extension, "GL_EXT_separate_specular_color")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_secondary_color
    }
    if (0 == strcmp(extension, "GL_EXT_secondary_color")) {
        GLH_EXT_NAME(glSecondaryColor3bEXT) = (PFNGLSECONDARYCOLOR3BEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3bEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3bEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3bvEXT) = (PFNGLSECONDARYCOLOR3BVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3bvEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3bvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3dEXT) = (PFNGLSECONDARYCOLOR3DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3dEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3dEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3dvEXT) = (PFNGLSECONDARYCOLOR3DVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3dvEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3dvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3fEXT) = (PFNGLSECONDARYCOLOR3FEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3fEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3fEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3fvEXT) = (PFNGLSECONDARYCOLOR3FVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3fvEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3fvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3iEXT) = (PFNGLSECONDARYCOLOR3IEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3iEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3iEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3ivEXT) = (PFNGLSECONDARYCOLOR3IVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ivEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3ivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3sEXT) = (PFNGLSECONDARYCOLOR3SEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3sEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3sEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3svEXT) = (PFNGLSECONDARYCOLOR3SVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3svEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3svEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3ubEXT) = (PFNGLSECONDARYCOLOR3UBEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ubEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3ubEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3ubvEXT) = (PFNGLSECONDARYCOLOR3UBVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ubvEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3ubvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3uiEXT) = (PFNGLSECONDARYCOLOR3UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3uiEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3uivEXT) = (PFNGLSECONDARYCOLOR3UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3uivEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3usEXT) = (PFNGLSECONDARYCOLOR3USEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3usEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3usEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3usvEXT) = (PFNGLSECONDARYCOLOR3USVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3usvEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3usvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColorPointerEXT) = (PFNGLSECONDARYCOLORPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColorPointerEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColorPointerEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture_perturb_normal
    }
    if (0 == strcmp(extension, "GL_EXT_texture_perturb_normal")) {
        GLH_EXT_NAME(glTextureNormalEXT) = (PFNGLTEXTURENORMALEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTextureNormalEXT");
        if (NULL == GLH_EXT_NAME(glTextureNormalEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_multi_draw_arrays
    }
    if (0 == strcmp(extension, "GL_EXT_multi_draw_arrays")) {
        GLH_EXT_NAME(glMultiDrawArraysEXT) = (PFNGLMULTIDRAWARRAYSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawArraysEXT");
        if (NULL == GLH_EXT_NAME(glMultiDrawArraysEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiDrawElementsEXT) = (PFNGLMULTIDRAWELEMENTSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawElementsEXT");
        if (NULL == GLH_EXT_NAME(glMultiDrawElementsEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_fog_coord
    }
    if (0 == strcmp(extension, "GL_EXT_fog_coord")) {
        GLH_EXT_NAME(glFogCoordfEXT) = (PFNGLFOGCOORDFEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordfEXT");
        if (NULL == GLH_EXT_NAME(glFogCoordfEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFogCoordfvEXT) = (PFNGLFOGCOORDFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordfvEXT");
        if (NULL == GLH_EXT_NAME(glFogCoordfvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFogCoorddEXT) = (PFNGLFOGCOORDDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoorddEXT");
        if (NULL == GLH_EXT_NAME(glFogCoorddEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFogCoorddvEXT) = (PFNGLFOGCOORDDVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoorddvEXT");
        if (NULL == GLH_EXT_NAME(glFogCoorddvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFogCoordPointerEXT) = (PFNGLFOGCOORDPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordPointerEXT");
        if (NULL == GLH_EXT_NAME(glFogCoordPointerEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_REND_screen_coordinates
    }
    if (0 == strcmp(extension, "GL_REND_screen_coordinates")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_coordinate_frame
    }
    if (0 == strcmp(extension, "GL_EXT_coordinate_frame")) {
        GLH_EXT_NAME(glTangent3bEXT) = (PFNGLTANGENT3BEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3bEXT");
        if (NULL == GLH_EXT_NAME(glTangent3bEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3bvEXT) = (PFNGLTANGENT3BVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3bvEXT");
        if (NULL == GLH_EXT_NAME(glTangent3bvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3dEXT) = (PFNGLTANGENT3DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3dEXT");
        if (NULL == GLH_EXT_NAME(glTangent3dEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3dvEXT) = (PFNGLTANGENT3DVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3dvEXT");
        if (NULL == GLH_EXT_NAME(glTangent3dvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3fEXT) = (PFNGLTANGENT3FEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3fEXT");
        if (NULL == GLH_EXT_NAME(glTangent3fEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3fvEXT) = (PFNGLTANGENT3FVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3fvEXT");
        if (NULL == GLH_EXT_NAME(glTangent3fvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3iEXT) = (PFNGLTANGENT3IEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3iEXT");
        if (NULL == GLH_EXT_NAME(glTangent3iEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3ivEXT) = (PFNGLTANGENT3IVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3ivEXT");
        if (NULL == GLH_EXT_NAME(glTangent3ivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3sEXT) = (PFNGLTANGENT3SEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3sEXT");
        if (NULL == GLH_EXT_NAME(glTangent3sEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3svEXT) = (PFNGLTANGENT3SVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3svEXT");
        if (NULL == GLH_EXT_NAME(glTangent3svEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3bEXT) = (PFNGLBINORMAL3BEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3bEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3bEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3bvEXT) = (PFNGLBINORMAL3BVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3bvEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3bvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3dEXT) = (PFNGLBINORMAL3DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3dEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3dEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3dvEXT) = (PFNGLBINORMAL3DVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3dvEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3dvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3fEXT) = (PFNGLBINORMAL3FEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3fEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3fEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3fvEXT) = (PFNGLBINORMAL3FVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3fvEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3fvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3iEXT) = (PFNGLBINORMAL3IEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3iEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3iEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3ivEXT) = (PFNGLBINORMAL3IVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3ivEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3ivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3sEXT) = (PFNGLBINORMAL3SEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3sEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3sEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3svEXT) = (PFNGLBINORMAL3SVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3svEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3svEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangentPointerEXT) = (PFNGLTANGENTPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangentPointerEXT");
        if (NULL == GLH_EXT_NAME(glTangentPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormalPointerEXT) = (PFNGLBINORMALPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormalPointerEXT");
        if (NULL == GLH_EXT_NAME(glBinormalPointerEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture_env_combine
    }
    if (0 == strcmp(extension, "GL_EXT_texture_env_combine")) {
        return GL_TRUE;
#endif

#ifdef GL_APPLE_specular_vector
    }
    if (0 == strcmp(extension, "GL_APPLE_specular_vector")) {
        return GL_TRUE;
#endif

#ifdef GL_APPLE_transform_hint
    }
    if (0 == strcmp(extension, "GL_APPLE_transform_hint")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_fog_scale
    }
    if (0 == strcmp(extension, "GL_SGIX_fog_scale")) {
        return GL_TRUE;
#endif

#ifdef GL_SUNX_constant_data
    }
    if (0 == strcmp(extension, "GL_SUNX_constant_data")) {
        GLH_EXT_NAME(glFinishTextureSUNX) = (PFNGLFINISHTEXTURESUNXPROC)GLH_EXT_GET_PROC_ADDRESS("glFinishTextureSUNX");
        if (NULL == GLH_EXT_NAME(glFinishTextureSUNX))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SUN_global_alpha
    }
    if (0 == strcmp(extension, "GL_SUN_global_alpha")) {
        GLH_EXT_NAME(glGlobalAlphaFactorbSUN) = (PFNGLGLOBALALPHAFACTORBSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactorbSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactorbSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glGlobalAlphaFactorsSUN) = (PFNGLGLOBALALPHAFACTORSSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactorsSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactorsSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glGlobalAlphaFactoriSUN) = (PFNGLGLOBALALPHAFACTORISUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactoriSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactoriSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glGlobalAlphaFactorfSUN) = (PFNGLGLOBALALPHAFACTORFSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactorfSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactorfSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glGlobalAlphaFactordSUN) = (PFNGLGLOBALALPHAFACTORDSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactordSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactordSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glGlobalAlphaFactorubSUN) = (PFNGLGLOBALALPHAFACTORUBSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactorubSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactorubSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glGlobalAlphaFactorusSUN) = (PFNGLGLOBALALPHAFACTORUSSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactorusSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactorusSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glGlobalAlphaFactoruiSUN) = (PFNGLGLOBALALPHAFACTORUISUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactoruiSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactoruiSUN))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SUN_triangle_list
    }
    if (0 == strcmp(extension, "GL_SUN_triangle_list")) {
        GLH_EXT_NAME(glReplacementCodeuiSUN) = (PFNGLREPLACEMENTCODEUISUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeusSUN) = (PFNGLREPLACEMENTCODEUSSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeusSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeusSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeubSUN) = (PFNGLREPLACEMENTCODEUBSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeubSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeubSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuivSUN) = (PFNGLREPLACEMENTCODEUIVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuivSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuivSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeusvSUN) = (PFNGLREPLACEMENTCODEUSVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeusvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeusvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeubvSUN) = (PFNGLREPLACEMENTCODEUBVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeubvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeubvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodePointerSUN) = (PFNGLREPLACEMENTCODEPOINTERSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodePointerSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodePointerSUN))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SUN_vertex
    }
    if (0 == strcmp(extension, "GL_SUN_vertex")) {
        GLH_EXT_NAME(glColor4ubVertex2fSUN) = (PFNGLCOLOR4UBVERTEX2FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4ubVertex2fSUN");
        if (NULL == GLH_EXT_NAME(glColor4ubVertex2fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glColor4ubVertex2fvSUN) = (PFNGLCOLOR4UBVERTEX2FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4ubVertex2fvSUN");
        if (NULL == GLH_EXT_NAME(glColor4ubVertex2fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glColor4ubVertex3fSUN) = (PFNGLCOLOR4UBVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4ubVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glColor4ubVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glColor4ubVertex3fvSUN) = (PFNGLCOLOR4UBVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4ubVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glColor4ubVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glColor3fVertex3fSUN) = (PFNGLCOLOR3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glColor3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glColor3fVertex3fvSUN) = (PFNGLCOLOR3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glColor3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glNormal3fVertex3fSUN) = (PFNGLNORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glNormal3fVertex3fvSUN) = (PFNGLNORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glNormal3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glColor4fNormal3fVertex3fSUN) = (PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4fNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glColor4fNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glColor4fNormal3fVertex3fvSUN) = (PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4fNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glColor4fNormal3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fVertex3fSUN) = (PFNGLTEXCOORD2FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fVertex3fvSUN) = (PFNGLTEXCOORD2FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord4fVertex4fSUN) = (PFNGLTEXCOORD4FVERTEX4FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord4fVertex4fSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord4fVertex4fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord4fVertex4fvSUN) = (PFNGLTEXCOORD4FVERTEX4FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord4fVertex4fvSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord4fVertex4fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fColor4ubVertex3fSUN) = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fColor4ubVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fColor4ubVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fColor4ubVertex3fvSUN) = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fColor4ubVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fColor4ubVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fColor3fVertex3fSUN) = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fColor3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fColor3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fColor3fVertex3fvSUN) = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fColor3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fColor3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fNormal3fVertex3fSUN) = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fNormal3fVertex3fvSUN) = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fNormal3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fColor4fNormal3fVertex3fSUN) = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fColor4fNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fColor4fNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fColor4fNormal3fVertex3fvSUN) = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fColor4fNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fColor4fNormal3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord4fColor4fNormal3fVertex4fSUN) = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord4fColor4fNormal3fVertex4fSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord4fColor4fNormal3fVertex4fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord4fColor4fNormal3fVertex4fvSUN) = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord4fColor4fNormal3fVertex4fvSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord4fColor4fNormal3fVertex4fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiVertex3fSUN) = (PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiVertex3fvSUN) = (PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiColor4ubVertex3fSUN) = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiColor4ubVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiColor4ubVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiColor4ubVertex3fvSUN) = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiColor4ubVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiColor4ubVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiColor3fVertex3fSUN) = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiColor3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiColor3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiColor3fVertex3fvSUN) = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiColor3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiColor3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiNormal3fVertex3fSUN) = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiNormal3fVertex3fvSUN) = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiNormal3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiColor4fNormal3fVertex3fSUN) = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiColor4fNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiColor4fNormal3fVertex3fvSUN) = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiColor4fNormal3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiTexCoord2fVertex3fSUN) = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiTexCoord2fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiTexCoord2fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiTexCoord2fVertex3fvSUN) = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiTexCoord2fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiTexCoord2fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_blend_func_separate
    }
    if (0 == strcmp(extension, "GL_EXT_blend_func_separate")) {
        GLH_EXT_NAME(glBlendFuncSeparateEXT) = (PFNGLBLENDFUNCSEPARATEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendFuncSeparateEXT");
        if (NULL == GLH_EXT_NAME(glBlendFuncSeparateEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_INGR_blend_func_separate
    }
    if (0 == strcmp(extension, "GL_INGR_blend_func_separate")) {
        GLH_EXT_NAME(glBlendFuncSeparateINGR) = (PFNGLBLENDFUNCSEPARATEINGRPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendFuncSeparateINGR");
        if (NULL == GLH_EXT_NAME(glBlendFuncSeparateINGR))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_INGR_color_clamp
    }
    if (0 == strcmp(extension, "GL_INGR_color_clamp")) {
        return GL_TRUE;
#endif

#ifdef GL_INGR_interlace_read
    }
    if (0 == strcmp(extension, "GL_INGR_interlace_read")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_stencil_wrap
    }
    if (0 == strcmp(extension, "GL_EXT_stencil_wrap")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_422_pixels
    }
    if (0 == strcmp(extension, "GL_EXT_422_pixels")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_texgen_reflection
    }
    if (0 == strcmp(extension, "GL_NV_texgen_reflection")) {
        return GL_TRUE;
#endif

#ifdef GL_SUN_convolution_border_modes
    }
    if (0 == strcmp(extension, "GL_SUN_convolution_border_modes")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture_env_add
    }
    if (0 == strcmp(extension, "GL_EXT_texture_env_add")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture_lod_bias
    }
    if (0 == strcmp(extension, "GL_EXT_texture_lod_bias")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture_filter_anisotropic
    }
    if (0 == strcmp(extension, "GL_EXT_texture_filter_anisotropic")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_vertex_weighting
    }
    if (0 == strcmp(extension, "GL_EXT_vertex_weighting")) {
        GLH_EXT_NAME(glVertexWeightfEXT) = (PFNGLVERTEXWEIGHTFEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexWeightfEXT");
        if (NULL == GLH_EXT_NAME(glVertexWeightfEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexWeightfvEXT) = (PFNGLVERTEXWEIGHTFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexWeightfvEXT");
        if (NULL == GLH_EXT_NAME(glVertexWeightfvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexWeightPointerEXT) = (PFNGLVERTEXWEIGHTPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexWeightPointerEXT");
        if (NULL == GLH_EXT_NAME(glVertexWeightPointerEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_light_max_exponent
    }
    if (0 == strcmp(extension, "GL_NV_light_max_exponent")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_vertex_array_range
    }
    if (0 == strcmp(extension, "GL_NV_vertex_array_range")) {
        GLH_EXT_NAME(glFlushVertexArrayRangeNV) = (PFNGLFLUSHVERTEXARRAYRANGENVPROC)GLH_EXT_GET_PROC_ADDRESS("glFlushVertexArrayRangeNV");
        if (NULL == GLH_EXT_NAME(glFlushVertexArrayRangeNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexArrayRangeNV) = (PFNGLVERTEXARRAYRANGENVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexArrayRangeNV");
        if (NULL == GLH_EXT_NAME(glVertexArrayRangeNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_register_combiners
    }
    if (0 == strcmp(extension, "GL_NV_register_combiners")) {
        GLH_EXT_NAME(glCombinerParameterfvNV) = (PFNGLCOMBINERPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerParameterfvNV");
        if (NULL == GLH_EXT_NAME(glCombinerParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glCombinerParameterfNV) = (PFNGLCOMBINERPARAMETERFNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerParameterfNV");
        if (NULL == GLH_EXT_NAME(glCombinerParameterfNV))
            return GL_FALSE;
        GLH_EXT_NAME(glCombinerParameterivNV) = (PFNGLCOMBINERPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerParameterivNV");
        if (NULL == GLH_EXT_NAME(glCombinerParameterivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glCombinerParameteriNV) = (PFNGLCOMBINERPARAMETERINVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerParameteriNV");
        if (NULL == GLH_EXT_NAME(glCombinerParameteriNV))
            return GL_FALSE;
        GLH_EXT_NAME(glCombinerInputNV) = (PFNGLCOMBINERINPUTNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerInputNV");
        if (NULL == GLH_EXT_NAME(glCombinerInputNV))
            return GL_FALSE;
        GLH_EXT_NAME(glCombinerOutputNV) = (PFNGLCOMBINEROUTPUTNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerOutputNV");
        if (NULL == GLH_EXT_NAME(glCombinerOutputNV))
            return GL_FALSE;
        GLH_EXT_NAME(glFinalCombinerInputNV) = (PFNGLFINALCOMBINERINPUTNVPROC)GLH_EXT_GET_PROC_ADDRESS("glFinalCombinerInputNV");
        if (NULL == GLH_EXT_NAME(glFinalCombinerInputNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetCombinerInputParameterfvNV) = (PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCombinerInputParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetCombinerInputParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetCombinerInputParameterivNV) = (PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCombinerInputParameterivNV");
        if (NULL == GLH_EXT_NAME(glGetCombinerInputParameterivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetCombinerOutputParameterfvNV) = (PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCombinerOutputParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetCombinerOutputParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetCombinerOutputParameterivNV) = (PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCombinerOutputParameterivNV");
        if (NULL == GLH_EXT_NAME(glGetCombinerOutputParameterivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFinalCombinerInputParameterfvNV) = (PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFinalCombinerInputParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetFinalCombinerInputParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFinalCombinerInputParameterivNV) = (PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFinalCombinerInputParameterivNV");
        if (NULL == GLH_EXT_NAME(glGetFinalCombinerInputParameterivNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_fog_distance
    }
    if (0 == strcmp(extension, "GL_NV_fog_distance")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_texgen_emboss
    }
    if (0 == strcmp(extension, "GL_NV_texgen_emboss")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_blend_square
    }
    if (0 == strcmp(extension, "GL_NV_blend_square")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_texture_env_combine4
    }
    if (0 == strcmp(extension, "GL_NV_texture_env_combine4")) {
        return GL_TRUE;
#endif

#ifdef GL_MESA_resize_buffers
    }
    if (0 == strcmp(extension, "GL_MESA_resize_buffers")) {
        GLH_EXT_NAME(glResizeBuffersMESA) = (PFNGLRESIZEBUFFERSMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glResizeBuffersMESA");
        if (NULL == GLH_EXT_NAME(glResizeBuffersMESA))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_MESA_window_pos
    }
    if (0 == strcmp(extension, "GL_MESA_window_pos")) {
        GLH_EXT_NAME(glWindowPos2dMESA) = (PFNGLWINDOWPOS2DMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2dMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2dvMESA) = (PFNGLWINDOWPOS2DVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dvMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2dvMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2fMESA) = (PFNGLWINDOWPOS2FMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2fMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2fvMESA) = (PFNGLWINDOWPOS2FVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fvMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2fvMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2iMESA) = (PFNGLWINDOWPOS2IMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2iMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2iMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2ivMESA) = (PFNGLWINDOWPOS2IVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2ivMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2ivMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2sMESA) = (PFNGLWINDOWPOS2SMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2sMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2sMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2svMESA) = (PFNGLWINDOWPOS2SVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2svMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2svMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3dMESA) = (PFNGLWINDOWPOS3DMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3dMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3dvMESA) = (PFNGLWINDOWPOS3DVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dvMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3dvMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3fMESA) = (PFNGLWINDOWPOS3FMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3fMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3fvMESA) = (PFNGLWINDOWPOS3FVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fvMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3fvMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3iMESA) = (PFNGLWINDOWPOS3IMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3iMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3iMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3ivMESA) = (PFNGLWINDOWPOS3IVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3ivMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3ivMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3sMESA) = (PFNGLWINDOWPOS3SMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3sMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3sMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3svMESA) = (PFNGLWINDOWPOS3SVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3svMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3svMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4dMESA) = (PFNGLWINDOWPOS4DMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4dMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4dMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4dvMESA) = (PFNGLWINDOWPOS4DVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4dvMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4dvMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4fMESA) = (PFNGLWINDOWPOS4FMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4fMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4fMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4fvMESA) = (PFNGLWINDOWPOS4FVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4fvMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4fvMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4iMESA) = (PFNGLWINDOWPOS4IMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4iMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4iMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4ivMESA) = (PFNGLWINDOWPOS4IVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4ivMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4ivMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4sMESA) = (PFNGLWINDOWPOS4SMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4sMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4sMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4svMESA) = (PFNGLWINDOWPOS4SVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4svMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4svMESA))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture_compression_s3tc
    }
    if (0 == strcmp(extension, "GL_EXT_texture_compression_s3tc")) {
        return GL_TRUE;
#endif

#ifdef GL_IBM_cull_vertex
    }
    if (0 == strcmp(extension, "GL_IBM_cull_vertex")) {
        return GL_TRUE;
#endif

#ifdef GL_IBM_multimode_draw_arrays
    }
    if (0 == strcmp(extension, "GL_IBM_multimode_draw_arrays")) {
        GLH_EXT_NAME(glMultiModeDrawArraysIBM) = (PFNGLMULTIMODEDRAWARRAYSIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiModeDrawArraysIBM");
        if (NULL == GLH_EXT_NAME(glMultiModeDrawArraysIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiModeDrawElementsIBM) = (PFNGLMULTIMODEDRAWELEMENTSIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiModeDrawElementsIBM");
        if (NULL == GLH_EXT_NAME(glMultiModeDrawElementsIBM))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_IBM_vertex_array_lists
    }
    if (0 == strcmp(extension, "GL_IBM_vertex_array_lists")) {
        GLH_EXT_NAME(glColorPointerListIBM) = (PFNGLCOLORPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glColorPointerListIBM");
        if (NULL == GLH_EXT_NAME(glColorPointerListIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColorPointerListIBM) = (PFNGLSECONDARYCOLORPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColorPointerListIBM");
        if (NULL == GLH_EXT_NAME(glSecondaryColorPointerListIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glEdgeFlagPointerListIBM) = (PFNGLEDGEFLAGPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glEdgeFlagPointerListIBM");
        if (NULL == GLH_EXT_NAME(glEdgeFlagPointerListIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glFogCoordPointerListIBM) = (PFNGLFOGCOORDPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordPointerListIBM");
        if (NULL == GLH_EXT_NAME(glFogCoordPointerListIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glIndexPointerListIBM) = (PFNGLINDEXPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glIndexPointerListIBM");
        if (NULL == GLH_EXT_NAME(glIndexPointerListIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalPointerListIBM) = (PFNGLNORMALPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalPointerListIBM");
        if (NULL == GLH_EXT_NAME(glNormalPointerListIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoordPointerListIBM) = (PFNGLTEXCOORDPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoordPointerListIBM");
        if (NULL == GLH_EXT_NAME(glTexCoordPointerListIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexPointerListIBM) = (PFNGLVERTEXPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexPointerListIBM");
        if (NULL == GLH_EXT_NAME(glVertexPointerListIBM))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_subsample
    }
    if (0 == strcmp(extension, "GL_SGIX_subsample")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_ycrcba
    }
    if (0 == strcmp(extension, "GL_SGIX_ycrcba")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_ycrcb_subsample
    }
    if (0 == strcmp(extension, "GL_SGIX_ycrcb_subsample")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_depth_pass_instrument
    }
    if (0 == strcmp(extension, "GL_SGIX_depth_pass_instrument")) {
        return GL_TRUE;
#endif

#ifdef GL_3DFX_texture_compression_FXT1
    }
    if (0 == strcmp(extension, "GL_3DFX_texture_compression_FXT1")) {
        return GL_TRUE;
#endif

#ifdef GL_3DFX_multisample
    }
    if (0 == strcmp(extension, "GL_3DFX_multisample")) {
        return GL_TRUE;
#endif

#ifdef GL_3DFX_tbuffer
    }
    if (0 == strcmp(extension, "GL_3DFX_tbuffer")) {
        GLH_EXT_NAME(glTbufferMask3DFX) = (PFNGLTBUFFERMASK3DFXPROC)GLH_EXT_GET_PROC_ADDRESS("glTbufferMask3DFX");
        if (NULL == GLH_EXT_NAME(glTbufferMask3DFX))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_multisample
    }
    if (0 == strcmp(extension, "GL_EXT_multisample")) {
        GLH_EXT_NAME(glSampleMaskEXT) = (PFNGLSAMPLEMASKEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleMaskEXT");
        if (NULL == GLH_EXT_NAME(glSampleMaskEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSamplePatternEXT) = (PFNGLSAMPLEPATTERNEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSamplePatternEXT");
        if (NULL == GLH_EXT_NAME(glSamplePatternEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_vertex_preclip
    }
    if (0 == strcmp(extension, "GL_SGIX_vertex_preclip")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_convolution_accuracy
    }
    if (0 == strcmp(extension, "GL_SGIX_convolution_accuracy")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_resample
    }
    if (0 == strcmp(extension, "GL_SGIX_resample")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIS_point_line_texgen
    }
    if (0 == strcmp(extension, "GL_SGIS_point_line_texgen")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIS_texture_color_mask
    }
    if (0 == strcmp(extension, "GL_SGIS_texture_color_mask")) {
        GLH_EXT_NAME(glTextureColorMaskSGIS) = (PFNGLTEXTURECOLORMASKSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glTextureColorMaskSGIS");
        if (NULL == GLH_EXT_NAME(glTextureColorMaskSGIS))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_igloo_interface
    }
    if (0 == strcmp(extension, "GL_SGIX_igloo_interface")) {
        GLH_EXT_NAME(glIglooInterfaceSGIX) = (PFNGLIGLOOINTERFACESGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glIglooInterfaceSGIX");
        if (NULL == GLH_EXT_NAME(glIglooInterfaceSGIX))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture_env_dot3
    }
    if (0 == strcmp(extension, "GL_EXT_texture_env_dot3")) {
        return GL_TRUE;
#endif

#ifdef GL_ATI_texture_mirror_once
    }
    if (0 == strcmp(extension, "GL_ATI_texture_mirror_once")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_fence
    }
    if (0 == strcmp(extension, "GL_NV_fence")) {
        GLH_EXT_NAME(glDeleteFencesNV) = (PFNGLDELETEFENCESNVPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteFencesNV");
        if (NULL == GLH_EXT_NAME(glDeleteFencesNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGenFencesNV) = (PFNGLGENFENCESNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGenFencesNV");
        if (NULL == GLH_EXT_NAME(glGenFencesNV))
            return GL_FALSE;
        GLH_EXT_NAME(glIsFenceNV) = (PFNGLISFENCENVPROC)GLH_EXT_GET_PROC_ADDRESS("glIsFenceNV");
        if (NULL == GLH_EXT_NAME(glIsFenceNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTestFenceNV) = (PFNGLTESTFENCENVPROC)GLH_EXT_GET_PROC_ADDRESS("glTestFenceNV");
        if (NULL == GLH_EXT_NAME(glTestFenceNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFenceivNV) = (PFNGLGETFENCEIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFenceivNV");
        if (NULL == GLH_EXT_NAME(glGetFenceivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glFinishFenceNV) = (PFNGLFINISHFENCENVPROC)GLH_EXT_GET_PROC_ADDRESS("glFinishFenceNV");
        if (NULL == GLH_EXT_NAME(glFinishFenceNV))
            return GL_FALSE;
        GLH_EXT_NAME(glSetFenceNV) = (PFNGLSETFENCENVPROC)GLH_EXT_GET_PROC_ADDRESS("glSetFenceNV");
        if (NULL == GLH_EXT_NAME(glSetFenceNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_evaluators
    }
    if (0 == strcmp(extension, "GL_NV_evaluators")) {
        GLH_EXT_NAME(glMapControlPointsNV) = (PFNGLMAPCONTROLPOINTSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMapControlPointsNV");
        if (NULL == GLH_EXT_NAME(glMapControlPointsNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMapParameterivNV) = (PFNGLMAPPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMapParameterivNV");
        if (NULL == GLH_EXT_NAME(glMapParameterivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMapParameterfvNV) = (PFNGLMAPPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMapParameterfvNV");
        if (NULL == GLH_EXT_NAME(glMapParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMapControlPointsNV) = (PFNGLGETMAPCONTROLPOINTSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMapControlPointsNV");
        if (NULL == GLH_EXT_NAME(glGetMapControlPointsNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMapParameterivNV) = (PFNGLGETMAPPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMapParameterivNV");
        if (NULL == GLH_EXT_NAME(glGetMapParameterivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMapParameterfvNV) = (PFNGLGETMAPPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMapParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetMapParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMapAttribParameterivNV) = (PFNGLGETMAPATTRIBPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMapAttribParameterivNV");
        if (NULL == GLH_EXT_NAME(glGetMapAttribParameterivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMapAttribParameterfvNV) = (PFNGLGETMAPATTRIBPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMapAttribParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetMapAttribParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glEvalMapsNV) = (PFNGLEVALMAPSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glEvalMapsNV");
        if (NULL == GLH_EXT_NAME(glEvalMapsNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_packed_depth_stencil
    }
    if (0 == strcmp(extension, "GL_NV_packed_depth_stencil")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_register_combiners2
    }
    if (0 == strcmp(extension, "GL_NV_register_combiners2")) {
        GLH_EXT_NAME(glCombinerStageParameterfvNV) = (PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerStageParameterfvNV");
        if (NULL == GLH_EXT_NAME(glCombinerStageParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetCombinerStageParameterfvNV) = (PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCombinerStageParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetCombinerStageParameterfvNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_texture_compression_vtc
    }
    if (0 == strcmp(extension, "GL_NV_texture_compression_vtc")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_texture_rectangle
    }
    if (0 == strcmp(extension, "GL_NV_texture_rectangle")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_texture_shader
    }
    if (0 == strcmp(extension, "GL_NV_texture_shader")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_texture_shader2
    }
    if (0 == strcmp(extension, "GL_NV_texture_shader2")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_vertex_array_range2
    }
    if (0 == strcmp(extension, "GL_NV_vertex_array_range2")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_vertex_program
    }
    if (0 == strcmp(extension, "GL_NV_vertex_program")) {
        GLH_EXT_NAME(glAreProgramsResidentNV) = (PFNGLAREPROGRAMSRESIDENTNVPROC)GLH_EXT_GET_PROC_ADDRESS("glAreProgramsResidentNV");
        if (NULL == GLH_EXT_NAME(glAreProgramsResidentNV))
            return GL_FALSE;
        GLH_EXT_NAME(glBindProgramNV) = (PFNGLBINDPROGRAMNVPROC)GLH_EXT_GET_PROC_ADDRESS("glBindProgramNV");
        if (NULL == GLH_EXT_NAME(glBindProgramNV))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteProgramsNV) = (PFNGLDELETEPROGRAMSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteProgramsNV");
        if (NULL == GLH_EXT_NAME(glDeleteProgramsNV))
            return GL_FALSE;
        GLH_EXT_NAME(glExecuteProgramNV) = (PFNGLEXECUTEPROGRAMNVPROC)GLH_EXT_GET_PROC_ADDRESS("glExecuteProgramNV");
        if (NULL == GLH_EXT_NAME(glExecuteProgramNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGenProgramsNV) = (PFNGLGENPROGRAMSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGenProgramsNV");
        if (NULL == GLH_EXT_NAME(glGenProgramsNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramParameterdvNV) = (PFNGLGETPROGRAMPARAMETERDVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramParameterdvNV");
        if (NULL == GLH_EXT_NAME(glGetProgramParameterdvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramParameterfvNV) = (PFNGLGETPROGRAMPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetProgramParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramivNV) = (PFNGLGETPROGRAMIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramivNV");
        if (NULL == GLH_EXT_NAME(glGetProgramivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramStringNV) = (PFNGLGETPROGRAMSTRINGNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramStringNV");
        if (NULL == GLH_EXT_NAME(glGetProgramStringNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetTrackMatrixivNV) = (PFNGLGETTRACKMATRIXIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetTrackMatrixivNV");
        if (NULL == GLH_EXT_NAME(glGetTrackMatrixivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribdvNV) = (PFNGLGETVERTEXATTRIBDVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribdvNV");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribdvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribfvNV) = (PFNGLGETVERTEXATTRIBFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribfvNV");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribivNV) = (PFNGLGETVERTEXATTRIBIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribivNV");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribPointervNV) = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribPointervNV");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribPointervNV))
            return GL_FALSE;
        GLH_EXT_NAME(glIsProgramNV) = (PFNGLISPROGRAMNVPROC)GLH_EXT_GET_PROC_ADDRESS("glIsProgramNV");
        if (NULL == GLH_EXT_NAME(glIsProgramNV))
            return GL_FALSE;
        GLH_EXT_NAME(glLoadProgramNV) = (PFNGLLOADPROGRAMNVPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadProgramNV");
        if (NULL == GLH_EXT_NAME(glLoadProgramNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramParameter4dNV) = (PFNGLPROGRAMPARAMETER4DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameter4dNV");
        if (NULL == GLH_EXT_NAME(glProgramParameter4dNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramParameter4dvNV) = (PFNGLPROGRAMPARAMETER4DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameter4dvNV");
        if (NULL == GLH_EXT_NAME(glProgramParameter4dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramParameter4fNV) = (PFNGLPROGRAMPARAMETER4FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameter4fNV");
        if (NULL == GLH_EXT_NAME(glProgramParameter4fNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramParameter4fvNV) = (PFNGLPROGRAMPARAMETER4FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameter4fvNV");
        if (NULL == GLH_EXT_NAME(glProgramParameter4fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramParameters4dvNV) = (PFNGLPROGRAMPARAMETERS4DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameters4dvNV");
        if (NULL == GLH_EXT_NAME(glProgramParameters4dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramParameters4fvNV) = (PFNGLPROGRAMPARAMETERS4FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameters4fvNV");
        if (NULL == GLH_EXT_NAME(glProgramParameters4fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glRequestResidentProgramsNV) = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glRequestResidentProgramsNV");
        if (NULL == GLH_EXT_NAME(glRequestResidentProgramsNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTrackMatrixNV) = (PFNGLTRACKMATRIXNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTrackMatrixNV");
        if (NULL == GLH_EXT_NAME(glTrackMatrixNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribPointerNV) = (PFNGLVERTEXATTRIBPOINTERNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribPointerNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribPointerNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1dNV) = (PFNGLVERTEXATTRIB1DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1dNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1dNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1dvNV) = (PFNGLVERTEXATTRIB1DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1fNV) = (PFNGLVERTEXATTRIB1FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1fNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1fNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1fvNV) = (PFNGLVERTEXATTRIB1FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1sNV) = (PFNGLVERTEXATTRIB1SNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1sNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1sNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1svNV) = (PFNGLVERTEXATTRIB1SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2dNV) = (PFNGLVERTEXATTRIB2DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2dNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2dNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2dvNV) = (PFNGLVERTEXATTRIB2DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2fNV) = (PFNGLVERTEXATTRIB2FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2fNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2fNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2fvNV) = (PFNGLVERTEXATTRIB2FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2sNV) = (PFNGLVERTEXATTRIB2SNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2sNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2sNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2svNV) = (PFNGLVERTEXATTRIB2SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3dNV) = (PFNGLVERTEXATTRIB3DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3dNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3dNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3dvNV) = (PFNGLVERTEXATTRIB3DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3fNV) = (PFNGLVERTEXATTRIB3FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3fNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3fNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3fvNV) = (PFNGLVERTEXATTRIB3FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3sNV) = (PFNGLVERTEXATTRIB3SNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3sNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3sNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3svNV) = (PFNGLVERTEXATTRIB3SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4dNV) = (PFNGLVERTEXATTRIB4DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4dNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4dNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4dvNV) = (PFNGLVERTEXATTRIB4DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4fNV) = (PFNGLVERTEXATTRIB4FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4fNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4fNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4fvNV) = (PFNGLVERTEXATTRIB4FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4sNV) = (PFNGLVERTEXATTRIB4SNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4sNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4sNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4svNV) = (PFNGLVERTEXATTRIB4SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4ubNV) = (PFNGLVERTEXATTRIB4UBNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4ubNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4ubNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4ubvNV) = (PFNGLVERTEXATTRIB4UBVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4ubvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4ubvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs1dvNV) = (PFNGLVERTEXATTRIBS1DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs1dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs1dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs1fvNV) = (PFNGLVERTEXATTRIBS1FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs1fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs1fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs1svNV) = (PFNGLVERTEXATTRIBS1SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs1svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs1svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs2dvNV) = (PFNGLVERTEXATTRIBS2DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs2dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs2dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs2fvNV) = (PFNGLVERTEXATTRIBS2FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs2fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs2fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs2svNV) = (PFNGLVERTEXATTRIBS2SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs2svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs2svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs3dvNV) = (PFNGLVERTEXATTRIBS3DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs3dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs3dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs3fvNV) = (PFNGLVERTEXATTRIBS3FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs3fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs3fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs3svNV) = (PFNGLVERTEXATTRIBS3SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs3svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs3svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs4dvNV) = (PFNGLVERTEXATTRIBS4DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs4dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs4dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs4fvNV) = (PFNGLVERTEXATTRIBS4FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs4fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs4fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs4svNV) = (PFNGLVERTEXATTRIBS4SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs4svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs4svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs4ubvNV) = (PFNGLVERTEXATTRIBS4UBVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs4ubvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs4ubvNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SGIX_texture_coordinate_clamp
    }
    if (0 == strcmp(extension, "GL_SGIX_texture_coordinate_clamp")) {
        return GL_TRUE;
#endif

#ifdef GL_SGIX_scalebias_hint
    }
    if (0 == strcmp(extension, "GL_SGIX_scalebias_hint")) {
        return GL_TRUE;
#endif

#ifdef GL_OML_interlace
    }
    if (0 == strcmp(extension, "GL_OML_interlace")) {
        return GL_TRUE;
#endif

#ifdef GL_OML_subsample
    }
    if (0 == strcmp(extension, "GL_OML_subsample")) {
        return GL_TRUE;
#endif

#ifdef GL_OML_resample
    }
    if (0 == strcmp(extension, "GL_OML_resample")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_copy_depth_to_color
    }
    if (0 == strcmp(extension, "GL_NV_copy_depth_to_color")) {
        return GL_TRUE;
#endif

#ifdef GL_ATI_envmap_bumpmap
    }
    if (0 == strcmp(extension, "GL_ATI_envmap_bumpmap")) {
        GLH_EXT_NAME(glTexBumpParameterivATI) = (PFNGLTEXBUMPPARAMETERIVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glTexBumpParameterivATI");
        if (NULL == GLH_EXT_NAME(glTexBumpParameterivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glTexBumpParameterfvATI) = (PFNGLTEXBUMPPARAMETERFVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glTexBumpParameterfvATI");
        if (NULL == GLH_EXT_NAME(glTexBumpParameterfvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetTexBumpParameterivATI) = (PFNGLGETTEXBUMPPARAMETERIVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetTexBumpParameterivATI");
        if (NULL == GLH_EXT_NAME(glGetTexBumpParameterivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetTexBumpParameterfvATI) = (PFNGLGETTEXBUMPPARAMETERFVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetTexBumpParameterfvATI");
        if (NULL == GLH_EXT_NAME(glGetTexBumpParameterfvATI))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ATI_fragment_shader
    }
    if (0 == strcmp(extension, "GL_ATI_fragment_shader")) {
        GLH_EXT_NAME(glGenFragmentShadersATI) = (PFNGLGENFRAGMENTSHADERSATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGenFragmentShadersATI");
        if (NULL == GLH_EXT_NAME(glGenFragmentShadersATI))
            return GL_FALSE;
        GLH_EXT_NAME(glBindFragmentShaderATI) = (PFNGLBINDFRAGMENTSHADERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glBindFragmentShaderATI");
        if (NULL == GLH_EXT_NAME(glBindFragmentShaderATI))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteFragmentShaderATI) = (PFNGLDELETEFRAGMENTSHADERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteFragmentShaderATI");
        if (NULL == GLH_EXT_NAME(glDeleteFragmentShaderATI))
            return GL_FALSE;
        GLH_EXT_NAME(glBeginFragmentShaderATI) = (PFNGLBEGINFRAGMENTSHADERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginFragmentShaderATI");
        if (NULL == GLH_EXT_NAME(glBeginFragmentShaderATI))
            return GL_FALSE;
        GLH_EXT_NAME(glEndFragmentShaderATI) = (PFNGLENDFRAGMENTSHADERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glEndFragmentShaderATI");
        if (NULL == GLH_EXT_NAME(glEndFragmentShaderATI))
            return GL_FALSE;
        GLH_EXT_NAME(glPassTexCoordATI) = (PFNGLPASSTEXCOORDATIPROC)GLH_EXT_GET_PROC_ADDRESS("glPassTexCoordATI");
        if (NULL == GLH_EXT_NAME(glPassTexCoordATI))
            return GL_FALSE;
        GLH_EXT_NAME(glSampleMapATI) = (PFNGLSAMPLEMAPATIPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleMapATI");
        if (NULL == GLH_EXT_NAME(glSampleMapATI))
            return GL_FALSE;
        GLH_EXT_NAME(glColorFragmentOp1ATI) = (PFNGLCOLORFRAGMENTOP1ATIPROC)GLH_EXT_GET_PROC_ADDRESS("glColorFragmentOp1ATI");
        if (NULL == GLH_EXT_NAME(glColorFragmentOp1ATI))
            return GL_FALSE;
        GLH_EXT_NAME(glColorFragmentOp2ATI) = (PFNGLCOLORFRAGMENTOP2ATIPROC)GLH_EXT_GET_PROC_ADDRESS("glColorFragmentOp2ATI");
        if (NULL == GLH_EXT_NAME(glColorFragmentOp2ATI))
            return GL_FALSE;
        GLH_EXT_NAME(glColorFragmentOp3ATI) = (PFNGLCOLORFRAGMENTOP3ATIPROC)GLH_EXT_GET_PROC_ADDRESS("glColorFragmentOp3ATI");
        if (NULL == GLH_EXT_NAME(glColorFragmentOp3ATI))
            return GL_FALSE;
        GLH_EXT_NAME(glAlphaFragmentOp1ATI) = (PFNGLALPHAFRAGMENTOP1ATIPROC)GLH_EXT_GET_PROC_ADDRESS("glAlphaFragmentOp1ATI");
        if (NULL == GLH_EXT_NAME(glAlphaFragmentOp1ATI))
            return GL_FALSE;
        GLH_EXT_NAME(glAlphaFragmentOp2ATI) = (PFNGLALPHAFRAGMENTOP2ATIPROC)GLH_EXT_GET_PROC_ADDRESS("glAlphaFragmentOp2ATI");
        if (NULL == GLH_EXT_NAME(glAlphaFragmentOp2ATI))
            return GL_FALSE;
        GLH_EXT_NAME(glAlphaFragmentOp3ATI) = (PFNGLALPHAFRAGMENTOP3ATIPROC)GLH_EXT_GET_PROC_ADDRESS("glAlphaFragmentOp3ATI");
        if (NULL == GLH_EXT_NAME(glAlphaFragmentOp3ATI))
            return GL_FALSE;
        GLH_EXT_NAME(glSetFragmentShaderConstantATI) = (PFNGLSETFRAGMENTSHADERCONSTANTATIPROC)GLH_EXT_GET_PROC_ADDRESS("glSetFragmentShaderConstantATI");
        if (NULL == GLH_EXT_NAME(glSetFragmentShaderConstantATI))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ATI_pn_triangles
    }
    if (0 == strcmp(extension, "GL_ATI_pn_triangles")) {
        GLH_EXT_NAME(glPNTrianglesiATI) = (PFNGLPNTRIANGLESIATIPROC)GLH_EXT_GET_PROC_ADDRESS("glPNTrianglesiATI");
        if (NULL == GLH_EXT_NAME(glPNTrianglesiATI))
            return GL_FALSE;
        GLH_EXT_NAME(glPNTrianglesfATI) = (PFNGLPNTRIANGLESFATIPROC)GLH_EXT_GET_PROC_ADDRESS("glPNTrianglesfATI");
        if (NULL == GLH_EXT_NAME(glPNTrianglesfATI))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ATI_vertex_array_object
    }
    if (0 == strcmp(extension, "GL_ATI_vertex_array_object")) {
        GLH_EXT_NAME(glNewObjectBufferATI) = (PFNGLNEWOBJECTBUFFERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNewObjectBufferATI");
        if (NULL == GLH_EXT_NAME(glNewObjectBufferATI))
            return GL_FALSE;
        GLH_EXT_NAME(glIsObjectBufferATI) = (PFNGLISOBJECTBUFFERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glIsObjectBufferATI");
        if (NULL == GLH_EXT_NAME(glIsObjectBufferATI))
            return GL_FALSE;
        GLH_EXT_NAME(glUpdateObjectBufferATI) = (PFNGLUPDATEOBJECTBUFFERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glUpdateObjectBufferATI");
        if (NULL == GLH_EXT_NAME(glUpdateObjectBufferATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetObjectBufferfvATI) = (PFNGLGETOBJECTBUFFERFVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetObjectBufferfvATI");
        if (NULL == GLH_EXT_NAME(glGetObjectBufferfvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetObjectBufferivATI) = (PFNGLGETOBJECTBUFFERIVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetObjectBufferivATI");
        if (NULL == GLH_EXT_NAME(glGetObjectBufferivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glFreeObjectBufferATI) = (PFNGLFREEOBJECTBUFFERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glFreeObjectBufferATI");
        if (NULL == GLH_EXT_NAME(glFreeObjectBufferATI))
            return GL_FALSE;
        GLH_EXT_NAME(glArrayObjectATI) = (PFNGLARRAYOBJECTATIPROC)GLH_EXT_GET_PROC_ADDRESS("glArrayObjectATI");
        if (NULL == GLH_EXT_NAME(glArrayObjectATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetArrayObjectfvATI) = (PFNGLGETARRAYOBJECTFVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetArrayObjectfvATI");
        if (NULL == GLH_EXT_NAME(glGetArrayObjectfvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetArrayObjectivATI) = (PFNGLGETARRAYOBJECTIVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetArrayObjectivATI");
        if (NULL == GLH_EXT_NAME(glGetArrayObjectivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantArrayObjectATI) = (PFNGLVARIANTARRAYOBJECTATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantArrayObjectATI");
        if (NULL == GLH_EXT_NAME(glVariantArrayObjectATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVariantArrayObjectfvATI) = (PFNGLGETVARIANTARRAYOBJECTFVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVariantArrayObjectfvATI");
        if (NULL == GLH_EXT_NAME(glGetVariantArrayObjectfvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVariantArrayObjectivATI) = (PFNGLGETVARIANTARRAYOBJECTIVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVariantArrayObjectivATI");
        if (NULL == GLH_EXT_NAME(glGetVariantArrayObjectivATI))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_vertex_shader
    }
    if (0 == strcmp(extension, "GL_EXT_vertex_shader")) {
        GLH_EXT_NAME(glBeginVertexShaderEXT) = (PFNGLBEGINVERTEXSHADEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginVertexShaderEXT");
        if (NULL == GLH_EXT_NAME(glBeginVertexShaderEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glEndVertexShaderEXT) = (PFNGLENDVERTEXSHADEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glEndVertexShaderEXT");
        if (NULL == GLH_EXT_NAME(glEndVertexShaderEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindVertexShaderEXT) = (PFNGLBINDVERTEXSHADEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindVertexShaderEXT");
        if (NULL == GLH_EXT_NAME(glBindVertexShaderEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGenVertexShadersEXT) = (PFNGLGENVERTEXSHADERSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGenVertexShadersEXT");
        if (NULL == GLH_EXT_NAME(glGenVertexShadersEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteVertexShaderEXT) = (PFNGLDELETEVERTEXSHADEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteVertexShaderEXT");
        if (NULL == GLH_EXT_NAME(glDeleteVertexShaderEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glShaderOp1EXT) = (PFNGLSHADEROP1EXTPROC)GLH_EXT_GET_PROC_ADDRESS("glShaderOp1EXT");
        if (NULL == GLH_EXT_NAME(glShaderOp1EXT))
            return GL_FALSE;
        GLH_EXT_NAME(glShaderOp2EXT) = (PFNGLSHADEROP2EXTPROC)GLH_EXT_GET_PROC_ADDRESS("glShaderOp2EXT");
        if (NULL == GLH_EXT_NAME(glShaderOp2EXT))
            return GL_FALSE;
        GLH_EXT_NAME(glShaderOp3EXT) = (PFNGLSHADEROP3EXTPROC)GLH_EXT_GET_PROC_ADDRESS("glShaderOp3EXT");
        if (NULL == GLH_EXT_NAME(glShaderOp3EXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSwizzleEXT) = (PFNGLSWIZZLEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSwizzleEXT");
        if (NULL == GLH_EXT_NAME(glSwizzleEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glWriteMaskEXT) = (PFNGLWRITEMASKEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glWriteMaskEXT");
        if (NULL == GLH_EXT_NAME(glWriteMaskEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glInsertComponentEXT) = (PFNGLINSERTCOMPONENTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glInsertComponentEXT");
        if (NULL == GLH_EXT_NAME(glInsertComponentEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glExtractComponentEXT) = (PFNGLEXTRACTCOMPONENTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glExtractComponentEXT");
        if (NULL == GLH_EXT_NAME(glExtractComponentEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGenSymbolsEXT) = (PFNGLGENSYMBOLSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGenSymbolsEXT");
        if (NULL == GLH_EXT_NAME(glGenSymbolsEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSetInvariantEXT) = (PFNGLSETINVARIANTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSetInvariantEXT");
        if (NULL == GLH_EXT_NAME(glSetInvariantEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSetLocalConstantEXT) = (PFNGLSETLOCALCONSTANTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSetLocalConstantEXT");
        if (NULL == GLH_EXT_NAME(glSetLocalConstantEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantbvEXT) = (PFNGLVARIANTBVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantbvEXT");
        if (NULL == GLH_EXT_NAME(glVariantbvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantsvEXT) = (PFNGLVARIANTSVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantsvEXT");
        if (NULL == GLH_EXT_NAME(glVariantsvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantivEXT) = (PFNGLVARIANTIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantivEXT");
        if (NULL == GLH_EXT_NAME(glVariantivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantfvEXT) = (PFNGLVARIANTFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantfvEXT");
        if (NULL == GLH_EXT_NAME(glVariantfvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantdvEXT) = (PFNGLVARIANTDVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantdvEXT");
        if (NULL == GLH_EXT_NAME(glVariantdvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantubvEXT) = (PFNGLVARIANTUBVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantubvEXT");
        if (NULL == GLH_EXT_NAME(glVariantubvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantusvEXT) = (PFNGLVARIANTUSVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantusvEXT");
        if (NULL == GLH_EXT_NAME(glVariantusvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantuivEXT) = (PFNGLVARIANTUIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantuivEXT");
        if (NULL == GLH_EXT_NAME(glVariantuivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantPointerEXT) = (PFNGLVARIANTPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantPointerEXT");
        if (NULL == GLH_EXT_NAME(glVariantPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glEnableVariantClientStateEXT) = (PFNGLENABLEVARIANTCLIENTSTATEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glEnableVariantClientStateEXT");
        if (NULL == GLH_EXT_NAME(glEnableVariantClientStateEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDisableVariantClientStateEXT) = (PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDisableVariantClientStateEXT");
        if (NULL == GLH_EXT_NAME(glDisableVariantClientStateEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindLightParameterEXT) = (PFNGLBINDLIGHTPARAMETEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindLightParameterEXT");
        if (NULL == GLH_EXT_NAME(glBindLightParameterEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindMaterialParameterEXT) = (PFNGLBINDMATERIALPARAMETEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindMaterialParameterEXT");
        if (NULL == GLH_EXT_NAME(glBindMaterialParameterEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindTexGenParameterEXT) = (PFNGLBINDTEXGENPARAMETEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindTexGenParameterEXT");
        if (NULL == GLH_EXT_NAME(glBindTexGenParameterEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindTextureUnitParameterEXT) = (PFNGLBINDTEXTUREUNITPARAMETEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindTextureUnitParameterEXT");
        if (NULL == GLH_EXT_NAME(glBindTextureUnitParameterEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindParameterEXT) = (PFNGLBINDPARAMETEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindParameterEXT");
        if (NULL == GLH_EXT_NAME(glBindParameterEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glIsVariantEnabledEXT) = (PFNGLISVARIANTENABLEDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIsVariantEnabledEXT");
        if (NULL == GLH_EXT_NAME(glIsVariantEnabledEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVariantBooleanvEXT) = (PFNGLGETVARIANTBOOLEANVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVariantBooleanvEXT");
        if (NULL == GLH_EXT_NAME(glGetVariantBooleanvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVariantIntegervEXT) = (PFNGLGETVARIANTINTEGERVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVariantIntegervEXT");
        if (NULL == GLH_EXT_NAME(glGetVariantIntegervEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVariantFloatvEXT) = (PFNGLGETVARIANTFLOATVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVariantFloatvEXT");
        if (NULL == GLH_EXT_NAME(glGetVariantFloatvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVariantPointervEXT) = (PFNGLGETVARIANTPOINTERVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVariantPointervEXT");
        if (NULL == GLH_EXT_NAME(glGetVariantPointervEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetInvariantBooleanvEXT) = (PFNGLGETINVARIANTBOOLEANVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetInvariantBooleanvEXT");
        if (NULL == GLH_EXT_NAME(glGetInvariantBooleanvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetInvariantIntegervEXT) = (PFNGLGETINVARIANTINTEGERVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetInvariantIntegervEXT");
        if (NULL == GLH_EXT_NAME(glGetInvariantIntegervEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetInvariantFloatvEXT) = (PFNGLGETINVARIANTFLOATVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetInvariantFloatvEXT");
        if (NULL == GLH_EXT_NAME(glGetInvariantFloatvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetLocalConstantBooleanvEXT) = (PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetLocalConstantBooleanvEXT");
        if (NULL == GLH_EXT_NAME(glGetLocalConstantBooleanvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetLocalConstantIntegervEXT) = (PFNGLGETLOCALCONSTANTINTEGERVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetLocalConstantIntegervEXT");
        if (NULL == GLH_EXT_NAME(glGetLocalConstantIntegervEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetLocalConstantFloatvEXT) = (PFNGLGETLOCALCONSTANTFLOATVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetLocalConstantFloatvEXT");
        if (NULL == GLH_EXT_NAME(glGetLocalConstantFloatvEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ATI_vertex_streams
    }
    if (0 == strcmp(extension, "GL_ATI_vertex_streams")) {
        GLH_EXT_NAME(glVertexStream1sATI) = (PFNGLVERTEXSTREAM1SATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1sATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1sATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream1svATI) = (PFNGLVERTEXSTREAM1SVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1svATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1svATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream1iATI) = (PFNGLVERTEXSTREAM1IATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1iATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1iATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream1ivATI) = (PFNGLVERTEXSTREAM1IVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1ivATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1ivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream1fATI) = (PFNGLVERTEXSTREAM1FATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1fATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1fATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream1fvATI) = (PFNGLVERTEXSTREAM1FVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1fvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1fvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream1dATI) = (PFNGLVERTEXSTREAM1DATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1dATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1dATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream1dvATI) = (PFNGLVERTEXSTREAM1DVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1dvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1dvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2sATI) = (PFNGLVERTEXSTREAM2SATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2sATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2sATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2svATI) = (PFNGLVERTEXSTREAM2SVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2svATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2svATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2iATI) = (PFNGLVERTEXSTREAM2IATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2iATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2iATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2ivATI) = (PFNGLVERTEXSTREAM2IVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2ivATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2ivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2fATI) = (PFNGLVERTEXSTREAM2FATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2fATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2fATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2fvATI) = (PFNGLVERTEXSTREAM2FVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2fvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2fvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2dATI) = (PFNGLVERTEXSTREAM2DATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2dATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2dATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2dvATI) = (PFNGLVERTEXSTREAM2DVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2dvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2dvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3sATI) = (PFNGLVERTEXSTREAM3SATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3sATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3sATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3svATI) = (PFNGLVERTEXSTREAM3SVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3svATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3svATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3iATI) = (PFNGLVERTEXSTREAM3IATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3iATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3iATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3ivATI) = (PFNGLVERTEXSTREAM3IVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3ivATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3ivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3fATI) = (PFNGLVERTEXSTREAM3FATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3fATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3fATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3fvATI) = (PFNGLVERTEXSTREAM3FVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3fvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3fvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3dATI) = (PFNGLVERTEXSTREAM3DATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3dATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3dATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3dvATI) = (PFNGLVERTEXSTREAM3DVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3dvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3dvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4sATI) = (PFNGLVERTEXSTREAM4SATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4sATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4sATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4svATI) = (PFNGLVERTEXSTREAM4SVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4svATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4svATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4iATI) = (PFNGLVERTEXSTREAM4IATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4iATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4iATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4ivATI) = (PFNGLVERTEXSTREAM4IVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4ivATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4ivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4fATI) = (PFNGLVERTEXSTREAM4FATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4fATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4fATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4fvATI) = (PFNGLVERTEXSTREAM4FVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4fvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4fvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4dATI) = (PFNGLVERTEXSTREAM4DATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4dATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4dATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4dvATI) = (PFNGLVERTEXSTREAM4DVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4dvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4dvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3bATI) = (PFNGLNORMALSTREAM3BATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3bATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3bATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3bvATI) = (PFNGLNORMALSTREAM3BVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3bvATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3bvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3sATI) = (PFNGLNORMALSTREAM3SATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3sATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3sATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3svATI) = (PFNGLNORMALSTREAM3SVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3svATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3svATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3iATI) = (PFNGLNORMALSTREAM3IATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3iATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3iATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3ivATI) = (PFNGLNORMALSTREAM3IVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3ivATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3ivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3fATI) = (PFNGLNORMALSTREAM3FATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3fATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3fATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3fvATI) = (PFNGLNORMALSTREAM3FVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3fvATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3fvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3dATI) = (PFNGLNORMALSTREAM3DATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3dATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3dATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3dvATI) = (PFNGLNORMALSTREAM3DVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3dvATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3dvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glClientActiveVertexStreamATI) = (PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC)GLH_EXT_GET_PROC_ADDRESS("glClientActiveVertexStreamATI");
        if (NULL == GLH_EXT_NAME(glClientActiveVertexStreamATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexBlendEnviATI) = (PFNGLVERTEXBLENDENVIATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexBlendEnviATI");
        if (NULL == GLH_EXT_NAME(glVertexBlendEnviATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexBlendEnvfATI) = (PFNGLVERTEXBLENDENVFATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexBlendEnvfATI");
        if (NULL == GLH_EXT_NAME(glVertexBlendEnvfATI))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ATI_element_array
    }
    if (0 == strcmp(extension, "GL_ATI_element_array")) {
        GLH_EXT_NAME(glElementPointerATI) = (PFNGLELEMENTPOINTERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glElementPointerATI");
        if (NULL == GLH_EXT_NAME(glElementPointerATI))
            return GL_FALSE;
        GLH_EXT_NAME(glDrawElementArrayATI) = (PFNGLDRAWELEMENTARRAYATIPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawElementArrayATI");
        if (NULL == GLH_EXT_NAME(glDrawElementArrayATI))
            return GL_FALSE;
        GLH_EXT_NAME(glDrawRangeElementArrayATI) = (PFNGLDRAWRANGEELEMENTARRAYATIPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElementArrayATI");
        if (NULL == GLH_EXT_NAME(glDrawRangeElementArrayATI))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SUN_mesh_array
    }
    if (0 == strcmp(extension, "GL_SUN_mesh_array")) {
        GLH_EXT_NAME(glDrawMeshArraysSUN) = (PFNGLDRAWMESHARRAYSSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawMeshArraysSUN");
        if (NULL == GLH_EXT_NAME(glDrawMeshArraysSUN))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_SUN_slice_accum
    }
    if (0 == strcmp(extension, "GL_SUN_slice_accum")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_multisample_filter_hint
    }
    if (0 == strcmp(extension, "GL_NV_multisample_filter_hint")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_depth_clamp
    }
    if (0 == strcmp(extension, "GL_NV_depth_clamp")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_occlusion_query
    }
    if (0 == strcmp(extension, "GL_NV_occlusion_query")) {
        GLH_EXT_NAME(glGenOcclusionQueriesNV) = (PFNGLGENOCCLUSIONQUERIESNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGenOcclusionQueriesNV");
        if (NULL == GLH_EXT_NAME(glGenOcclusionQueriesNV))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteOcclusionQueriesNV) = (PFNGLDELETEOCCLUSIONQUERIESNVPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteOcclusionQueriesNV");
        if (NULL == GLH_EXT_NAME(glDeleteOcclusionQueriesNV))
            return GL_FALSE;
        GLH_EXT_NAME(glIsOcclusionQueryNV) = (PFNGLISOCCLUSIONQUERYNVPROC)GLH_EXT_GET_PROC_ADDRESS("glIsOcclusionQueryNV");
        if (NULL == GLH_EXT_NAME(glIsOcclusionQueryNV))
            return GL_FALSE;
        GLH_EXT_NAME(glBeginOcclusionQueryNV) = (PFNGLBEGINOCCLUSIONQUERYNVPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginOcclusionQueryNV");
        if (NULL == GLH_EXT_NAME(glBeginOcclusionQueryNV))
            return GL_FALSE;
        GLH_EXT_NAME(glEndOcclusionQueryNV) = (PFNGLENDOCCLUSIONQUERYNVPROC)GLH_EXT_GET_PROC_ADDRESS("glEndOcclusionQueryNV");
        if (NULL == GLH_EXT_NAME(glEndOcclusionQueryNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetOcclusionQueryivNV) = (PFNGLGETOCCLUSIONQUERYIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetOcclusionQueryivNV");
        if (NULL == GLH_EXT_NAME(glGetOcclusionQueryivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetOcclusionQueryuivNV) = (PFNGLGETOCCLUSIONQUERYUIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetOcclusionQueryuivNV");
        if (NULL == GLH_EXT_NAME(glGetOcclusionQueryuivNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_point_sprite
    }
    if (0 == strcmp(extension, "GL_NV_point_sprite")) {
        GLH_EXT_NAME(glPointParameteriNV) = (PFNGLPOINTPARAMETERINVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteriNV");
        if (NULL == GLH_EXT_NAME(glPointParameteriNV))
            return GL_FALSE;
        GLH_EXT_NAME(glPointParameterivNV) = (PFNGLPOINTPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterivNV");
        if (NULL == GLH_EXT_NAME(glPointParameterivNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_texture_shader3
    }
    if (0 == strcmp(extension, "GL_NV_texture_shader3")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_vertex_program1_1
    }
    if (0 == strcmp(extension, "GL_NV_vertex_program1_1")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_shadow_funcs
    }
    if (0 == strcmp(extension, "GL_EXT_shadow_funcs")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_stencil_two_side
    }
    if (0 == strcmp(extension, "GL_EXT_stencil_two_side")) {
        GLH_EXT_NAME(glActiveStencilFaceEXT) = (PFNGLACTIVESTENCILFACEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveStencilFaceEXT");
        if (NULL == GLH_EXT_NAME(glActiveStencilFaceEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ATI_text_fragment_shader
    }
    if (0 == strcmp(extension, "GL_ATI_text_fragment_shader")) {
        return GL_TRUE;
#endif

#ifdef GL_APPLE_client_storage
    }
    if (0 == strcmp(extension, "GL_APPLE_client_storage")) {
        return GL_TRUE;
#endif

#ifdef GL_APPLE_element_array
    }
    if (0 == strcmp(extension, "GL_APPLE_element_array")) {
        GLH_EXT_NAME(glElementPointerAPPLE) = (PFNGLELEMENTPOINTERAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glElementPointerAPPLE");
        if (NULL == GLH_EXT_NAME(glElementPointerAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glDrawElementArrayAPPLE) = (PFNGLDRAWELEMENTARRAYAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawElementArrayAPPLE");
        if (NULL == GLH_EXT_NAME(glDrawElementArrayAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glDrawRangeElementArrayAPPLE) = (PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElementArrayAPPLE");
        if (NULL == GLH_EXT_NAME(glDrawRangeElementArrayAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiDrawElementArrayAPPLE) = (PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawElementArrayAPPLE");
        if (NULL == GLH_EXT_NAME(glMultiDrawElementArrayAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiDrawRangeElementArrayAPPLE) = (PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawRangeElementArrayAPPLE");
        if (NULL == GLH_EXT_NAME(glMultiDrawRangeElementArrayAPPLE))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_APPLE_fence
    }
    if (0 == strcmp(extension, "GL_APPLE_fence")) {
        GLH_EXT_NAME(glGenFencesAPPLE) = (PFNGLGENFENCESAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGenFencesAPPLE");
        if (NULL == GLH_EXT_NAME(glGenFencesAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteFencesAPPLE) = (PFNGLDELETEFENCESAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteFencesAPPLE");
        if (NULL == GLH_EXT_NAME(glDeleteFencesAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glSetFenceAPPLE) = (PFNGLSETFENCEAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glSetFenceAPPLE");
        if (NULL == GLH_EXT_NAME(glSetFenceAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glIsFenceAPPLE) = (PFNGLISFENCEAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glIsFenceAPPLE");
        if (NULL == GLH_EXT_NAME(glIsFenceAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glTestFenceAPPLE) = (PFNGLTESTFENCEAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glTestFenceAPPLE");
        if (NULL == GLH_EXT_NAME(glTestFenceAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glFinishFenceAPPLE) = (PFNGLFINISHFENCEAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glFinishFenceAPPLE");
        if (NULL == GLH_EXT_NAME(glFinishFenceAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glTestObjectAPPLE) = (PFNGLTESTOBJECTAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glTestObjectAPPLE");
        if (NULL == GLH_EXT_NAME(glTestObjectAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glFinishObjectAPPLE) = (PFNGLFINISHOBJECTAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glFinishObjectAPPLE");
        if (NULL == GLH_EXT_NAME(glFinishObjectAPPLE))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_APPLE_vertex_array_object
    }
    if (0 == strcmp(extension, "GL_APPLE_vertex_array_object")) {
        GLH_EXT_NAME(glBindVertexArrayAPPLE) = (PFNGLBINDVERTEXARRAYAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glBindVertexArrayAPPLE");
        if (NULL == GLH_EXT_NAME(glBindVertexArrayAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteVertexArraysAPPLE) = (PFNGLDELETEVERTEXARRAYSAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteVertexArraysAPPLE");
        if (NULL == GLH_EXT_NAME(glDeleteVertexArraysAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glGenVertexArraysAPPLE) = (PFNGLGENVERTEXARRAYSAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGenVertexArraysAPPLE");
        if (NULL == GLH_EXT_NAME(glGenVertexArraysAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glIsVertexArrayAPPLE) = (PFNGLISVERTEXARRAYAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glIsVertexArrayAPPLE");
        if (NULL == GLH_EXT_NAME(glIsVertexArrayAPPLE))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_APPLE_vertex_array_range
    }
    if (0 == strcmp(extension, "GL_APPLE_vertex_array_range")) {
        GLH_EXT_NAME(glVertexArrayRangeAPPLE) = (PFNGLVERTEXARRAYRANGEAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexArrayRangeAPPLE");
        if (NULL == GLH_EXT_NAME(glVertexArrayRangeAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glFlushVertexArrayRangeAPPLE) = (PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glFlushVertexArrayRangeAPPLE");
        if (NULL == GLH_EXT_NAME(glFlushVertexArrayRangeAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexArrayParameteriAPPLE) = (PFNGLVERTEXARRAYPARAMETERIAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexArrayParameteriAPPLE");
        if (NULL == GLH_EXT_NAME(glVertexArrayParameteriAPPLE))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_APPLE_ycbcr_422
    }
    if (0 == strcmp(extension, "GL_APPLE_ycbcr_422")) {
        return GL_TRUE;
#endif

#ifdef GL_S3_s3tc
    }
    if (0 == strcmp(extension, "GL_S3_s3tc")) {
        return GL_TRUE;
#endif

#ifdef GL_ATI_draw_buffers
    }
    if (0 == strcmp(extension, "GL_ATI_draw_buffers")) {
        GLH_EXT_NAME(glDrawBuffersATI) = (PFNGLDRAWBUFFERSATIPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawBuffersATI");
        if (NULL == GLH_EXT_NAME(glDrawBuffersATI))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ATI_pixel_format_float
    }
    if (0 == strcmp(extension, "GL_ATI_pixel_format_float")) {
        return GL_TRUE;
#endif

#ifdef GL_ATI_texture_env_combine3
    }
    if (0 == strcmp(extension, "GL_ATI_texture_env_combine3")) {
        return GL_TRUE;
#endif

#ifdef GL_ATI_texture_float
    }
    if (0 == strcmp(extension, "GL_ATI_texture_float")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_float_buffer
    }
    if (0 == strcmp(extension, "GL_NV_float_buffer")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_fragment_program
    }
    if (0 == strcmp(extension, "GL_NV_fragment_program")) {
        GLH_EXT_NAME(glProgramNamedParameter4fNV) = (PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramNamedParameter4fNV");
        if (NULL == GLH_EXT_NAME(glProgramNamedParameter4fNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramNamedParameter4dNV) = (PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramNamedParameter4dNV");
        if (NULL == GLH_EXT_NAME(glProgramNamedParameter4dNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramNamedParameter4fvNV) = (PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramNamedParameter4fvNV");
        if (NULL == GLH_EXT_NAME(glProgramNamedParameter4fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramNamedParameter4dvNV) = (PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramNamedParameter4dvNV");
        if (NULL == GLH_EXT_NAME(glProgramNamedParameter4dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramNamedParameterfvNV) = (PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramNamedParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetProgramNamedParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramNamedParameterdvNV) = (PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramNamedParameterdvNV");
        if (NULL == GLH_EXT_NAME(glGetProgramNamedParameterdvNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_half_float
    }
    if (0 == strcmp(extension, "GL_NV_half_float")) {
        GLH_EXT_NAME(glVertex2hNV) = (PFNGLVERTEX2HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertex2hNV");
        if (NULL == GLH_EXT_NAME(glVertex2hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertex2hvNV) = (PFNGLVERTEX2HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertex2hvNV");
        if (NULL == GLH_EXT_NAME(glVertex2hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertex3hNV) = (PFNGLVERTEX3HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertex3hNV");
        if (NULL == GLH_EXT_NAME(glVertex3hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertex3hvNV) = (PFNGLVERTEX3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertex3hvNV");
        if (NULL == GLH_EXT_NAME(glVertex3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertex4hNV) = (PFNGLVERTEX4HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertex4hNV");
        if (NULL == GLH_EXT_NAME(glVertex4hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertex4hvNV) = (PFNGLVERTEX4HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertex4hvNV");
        if (NULL == GLH_EXT_NAME(glVertex4hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glNormal3hNV) = (PFNGLNORMAL3HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glNormal3hNV");
        if (NULL == GLH_EXT_NAME(glNormal3hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glNormal3hvNV) = (PFNGLNORMAL3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glNormal3hvNV");
        if (NULL == GLH_EXT_NAME(glNormal3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glColor3hNV) = (PFNGLCOLOR3HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glColor3hNV");
        if (NULL == GLH_EXT_NAME(glColor3hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glColor3hvNV) = (PFNGLCOLOR3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glColor3hvNV");
        if (NULL == GLH_EXT_NAME(glColor3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glColor4hNV) = (PFNGLCOLOR4HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4hNV");
        if (NULL == GLH_EXT_NAME(glColor4hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glColor4hvNV) = (PFNGLCOLOR4HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4hvNV");
        if (NULL == GLH_EXT_NAME(glColor4hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord1hNV) = (PFNGLTEXCOORD1HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord1hNV");
        if (NULL == GLH_EXT_NAME(glTexCoord1hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord1hvNV) = (PFNGLTEXCOORD1HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord1hvNV");
        if (NULL == GLH_EXT_NAME(glTexCoord1hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2hNV) = (PFNGLTEXCOORD2HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2hNV");
        if (NULL == GLH_EXT_NAME(glTexCoord2hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2hvNV) = (PFNGLTEXCOORD2HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2hvNV");
        if (NULL == GLH_EXT_NAME(glTexCoord2hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord3hNV) = (PFNGLTEXCOORD3HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord3hNV");
        if (NULL == GLH_EXT_NAME(glTexCoord3hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord3hvNV) = (PFNGLTEXCOORD3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord3hvNV");
        if (NULL == GLH_EXT_NAME(glTexCoord3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord4hNV) = (PFNGLTEXCOORD4HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord4hNV");
        if (NULL == GLH_EXT_NAME(glTexCoord4hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord4hvNV) = (PFNGLTEXCOORD4HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord4hvNV");
        if (NULL == GLH_EXT_NAME(glTexCoord4hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1hNV) = (PFNGLMULTITEXCOORD1HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1hNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1hvNV) = (PFNGLMULTITEXCOORD1HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1hvNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2hNV) = (PFNGLMULTITEXCOORD2HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2hNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2hvNV) = (PFNGLMULTITEXCOORD2HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2hvNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3hNV) = (PFNGLMULTITEXCOORD3HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3hNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3hvNV) = (PFNGLMULTITEXCOORD3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3hvNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4hNV) = (PFNGLMULTITEXCOORD4HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4hNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4hvNV) = (PFNGLMULTITEXCOORD4HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4hvNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glFogCoordhNV) = (PFNGLFOGCOORDHNVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordhNV");
        if (NULL == GLH_EXT_NAME(glFogCoordhNV))
            return GL_FALSE;
        GLH_EXT_NAME(glFogCoordhvNV) = (PFNGLFOGCOORDHVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordhvNV");
        if (NULL == GLH_EXT_NAME(glFogCoordhvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3hNV) = (PFNGLSECONDARYCOLOR3HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3hNV");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3hvNV) = (PFNGLSECONDARYCOLOR3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3hvNV");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexWeighthNV) = (PFNGLVERTEXWEIGHTHNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexWeighthNV");
        if (NULL == GLH_EXT_NAME(glVertexWeighthNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexWeighthvNV) = (PFNGLVERTEXWEIGHTHVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexWeighthvNV");
        if (NULL == GLH_EXT_NAME(glVertexWeighthvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1hNV) = (PFNGLVERTEXATTRIB1HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1hNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1hvNV) = (PFNGLVERTEXATTRIB1HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2hNV) = (PFNGLVERTEXATTRIB2HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2hNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2hvNV) = (PFNGLVERTEXATTRIB2HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3hNV) = (PFNGLVERTEXATTRIB3HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3hNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3hvNV) = (PFNGLVERTEXATTRIB3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4hNV) = (PFNGLVERTEXATTRIB4HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4hNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4hvNV) = (PFNGLVERTEXATTRIB4HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs1hvNV) = (PFNGLVERTEXATTRIBS1HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs1hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs1hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs2hvNV) = (PFNGLVERTEXATTRIBS2HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs2hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs2hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs3hvNV) = (PFNGLVERTEXATTRIBS3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs3hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs4hvNV) = (PFNGLVERTEXATTRIBS4HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs4hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs4hvNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_pixel_data_range
    }
    if (0 == strcmp(extension, "GL_NV_pixel_data_range")) {
        GLH_EXT_NAME(glPixelDataRangeNV) = (PFNGLPIXELDATARANGENVPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelDataRangeNV");
        if (NULL == GLH_EXT_NAME(glPixelDataRangeNV))
            return GL_FALSE;
        GLH_EXT_NAME(glFlushPixelDataRangeNV) = (PFNGLFLUSHPIXELDATARANGENVPROC)GLH_EXT_GET_PROC_ADDRESS("glFlushPixelDataRangeNV");
        if (NULL == GLH_EXT_NAME(glFlushPixelDataRangeNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_primitive_restart
    }
    if (0 == strcmp(extension, "GL_NV_primitive_restart")) {
        GLH_EXT_NAME(glPrimitiveRestartNV) = (PFNGLPRIMITIVERESTARTNVPROC)GLH_EXT_GET_PROC_ADDRESS("glPrimitiveRestartNV");
        if (NULL == GLH_EXT_NAME(glPrimitiveRestartNV))
            return GL_FALSE;
        GLH_EXT_NAME(glPrimitiveRestartIndexNV) = (PFNGLPRIMITIVERESTARTINDEXNVPROC)GLH_EXT_GET_PROC_ADDRESS("glPrimitiveRestartIndexNV");
        if (NULL == GLH_EXT_NAME(glPrimitiveRestartIndexNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_texture_expand_normal
    }
    if (0 == strcmp(extension, "GL_NV_texture_expand_normal")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_vertex_program2
    }
    if (0 == strcmp(extension, "GL_NV_vertex_program2")) {
        return GL_TRUE;
#endif

#ifdef GL_ATI_map_object_buffer
    }
    if (0 == strcmp(extension, "GL_ATI_map_object_buffer")) {
        GLH_EXT_NAME(glMapObjectBufferATI) = (PFNGLMAPOBJECTBUFFERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glMapObjectBufferATI");
        if (NULL == GLH_EXT_NAME(glMapObjectBufferATI))
            return GL_FALSE;
        GLH_EXT_NAME(glUnmapObjectBufferATI) = (PFNGLUNMAPOBJECTBUFFERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glUnmapObjectBufferATI");
        if (NULL == GLH_EXT_NAME(glUnmapObjectBufferATI))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ATI_separate_stencil
    }
    if (0 == strcmp(extension, "GL_ATI_separate_stencil")) {
        GLH_EXT_NAME(glStencilOpSeparateATI) = (PFNGLSTENCILOPSEPARATEATIPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilOpSeparateATI");
        if (NULL == GLH_EXT_NAME(glStencilOpSeparateATI))
            return GL_FALSE;
        GLH_EXT_NAME(glStencilFuncSeparateATI) = (PFNGLSTENCILFUNCSEPARATEATIPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilFuncSeparateATI");
        if (NULL == GLH_EXT_NAME(glStencilFuncSeparateATI))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_ATI_vertex_attrib_array_object
    }
    if (0 == strcmp(extension, "GL_ATI_vertex_attrib_array_object")) {
        GLH_EXT_NAME(glVertexAttribArrayObjectATI) = (PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribArrayObjectATI");
        if (NULL == GLH_EXT_NAME(glVertexAttribArrayObjectATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribArrayObjectfvATI) = (PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribArrayObjectfvATI");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribArrayObjectfvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribArrayObjectivATI) = (PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribArrayObjectivATI");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribArrayObjectivATI))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_OES_read_format
    }
    if (0 == strcmp(extension, "GL_OES_read_format")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_depth_bounds_test
    }
    if (0 == strcmp(extension, "GL_EXT_depth_bounds_test")) {
        GLH_EXT_NAME(glDepthBoundsEXT) = (PFNGLDEPTHBOUNDSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDepthBoundsEXT");
        if (NULL == GLH_EXT_NAME(glDepthBoundsEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture_mirror_clamp
    }
    if (0 == strcmp(extension, "GL_EXT_texture_mirror_clamp")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_blend_equation_separate
    }
    if (0 == strcmp(extension, "GL_EXT_blend_equation_separate")) {
        GLH_EXT_NAME(glBlendEquationSeparateEXT) = (PFNGLBLENDEQUATIONSEPARATEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquationSeparateEXT");
        if (NULL == GLH_EXT_NAME(glBlendEquationSeparateEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_MESA_pack_invert
    }
    if (0 == strcmp(extension, "GL_MESA_pack_invert")) {
        return GL_TRUE;
#endif

#ifdef GL_MESA_ycbcr_texture
    }
    if (0 == strcmp(extension, "GL_MESA_ycbcr_texture")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_pixel_buffer_object
    }
    if (0 == strcmp(extension, "GL_EXT_pixel_buffer_object")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_fragment_program_option
    }
    if (0 == strcmp(extension, "GL_NV_fragment_program_option")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_fragment_program2
    }
    if (0 == strcmp(extension, "GL_NV_fragment_program2")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_vertex_program2_option
    }
    if (0 == strcmp(extension, "GL_NV_vertex_program2_option")) {
        return GL_TRUE;
#endif

#ifdef GL_NV_vertex_program3
    }
    if (0 == strcmp(extension, "GL_NV_vertex_program3")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_framebuffer_object
    }
    if (0 == strcmp(extension, "GL_EXT_framebuffer_object")) {
        GLH_EXT_NAME(glIsRenderbufferEXT) = (PFNGLISRENDERBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIsRenderbufferEXT");
        if (NULL == GLH_EXT_NAME(glIsRenderbufferEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindRenderbufferEXT) = (PFNGLBINDRENDERBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindRenderbufferEXT");
        if (NULL == GLH_EXT_NAME(glBindRenderbufferEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteRenderbuffersEXT) = (PFNGLDELETERENDERBUFFERSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteRenderbuffersEXT");
        if (NULL == GLH_EXT_NAME(glDeleteRenderbuffersEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGenRenderbuffersEXT) = (PFNGLGENRENDERBUFFERSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGenRenderbuffersEXT");
        if (NULL == GLH_EXT_NAME(glGenRenderbuffersEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glRenderbufferStorageEXT) = (PFNGLRENDERBUFFERSTORAGEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glRenderbufferStorageEXT");
        if (NULL == GLH_EXT_NAME(glRenderbufferStorageEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetRenderbufferParameterivEXT) = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetRenderbufferParameterivEXT");
        if (NULL == GLH_EXT_NAME(glGetRenderbufferParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glIsFramebufferEXT) = (PFNGLISFRAMEBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIsFramebufferEXT");
        if (NULL == GLH_EXT_NAME(glIsFramebufferEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindFramebufferEXT) = (PFNGLBINDFRAMEBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindFramebufferEXT");
        if (NULL == GLH_EXT_NAME(glBindFramebufferEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteFramebuffersEXT) = (PFNGLDELETEFRAMEBUFFERSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteFramebuffersEXT");
        if (NULL == GLH_EXT_NAME(glDeleteFramebuffersEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGenFramebuffersEXT) = (PFNGLGENFRAMEBUFFERSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGenFramebuffersEXT");
        if (NULL == GLH_EXT_NAME(glGenFramebuffersEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCheckFramebufferStatusEXT) = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCheckFramebufferStatusEXT");
        if (NULL == GLH_EXT_NAME(glCheckFramebufferStatusEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFramebufferTexture1DEXT) = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFramebufferTexture1DEXT");
        if (NULL == GLH_EXT_NAME(glFramebufferTexture1DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFramebufferTexture2DEXT) = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFramebufferTexture2DEXT");
        if (NULL == GLH_EXT_NAME(glFramebufferTexture2DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFramebufferTexture3DEXT) = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFramebufferTexture3DEXT");
        if (NULL == GLH_EXT_NAME(glFramebufferTexture3DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFramebufferRenderbufferEXT) = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFramebufferRenderbufferEXT");
        if (NULL == GLH_EXT_NAME(glFramebufferRenderbufferEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFramebufferAttachmentParameterivEXT) = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFramebufferAttachmentParameterivEXT");
        if (NULL == GLH_EXT_NAME(glGetFramebufferAttachmentParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGenerateMipmapEXT) = (PFNGLGENERATEMIPMAPEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGenerateMipmapEXT");
        if (NULL == GLH_EXT_NAME(glGenerateMipmapEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_GREMEDY_string_marker
    }
    if (0 == strcmp(extension, "GL_GREMEDY_string_marker")) {
        GLH_EXT_NAME(glStringMarkerGREMEDY) = (PFNGLSTRINGMARKERGREMEDYPROC)GLH_EXT_GET_PROC_ADDRESS("glStringMarkerGREMEDY");
        if (NULL == GLH_EXT_NAME(glStringMarkerGREMEDY))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_Cg_shader
    }
    if (0 == strcmp(extension, "GL_EXT_Cg_shader")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_timer_query
    }
    if (0 == strcmp(extension, "GL_EXT_timer_query")) {
        GLH_EXT_NAME(glGetQueryObjecti64vEXT) = (PFNGLGETQUERYOBJECTI64VEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjecti64vEXT");
        if (NULL == GLH_EXT_NAME(glGetQueryObjecti64vEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetQueryObjectui64vEXT) = (PFNGLGETQUERYOBJECTUI64VEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectui64vEXT");
        if (NULL == GLH_EXT_NAME(glGetQueryObjectui64vEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture_buffer_object
    }
    if (0 == strcmp(extension, "GL_EXT_texture_buffer_object")) {
        GLH_EXT_NAME(glTexBufferEXT) = (PFNGLTEXBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexBufferEXT");
        if (NULL == GLH_EXT_NAME(glTexBufferEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_transform_feedback
    }
    if (0 == strcmp(extension, "GL_NV_transform_feedback")) {
        GLH_EXT_NAME(glBeginTransformFeedbackNV) = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginTransformFeedbackNV");
        if (NULL == GLH_EXT_NAME(glBeginTransformFeedbackNV))
            return GL_FALSE;
        GLH_EXT_NAME(glEndTransformFeedbackNV) = (PFNGLENDTRANSFORMFEEDBACKNVPROC)GLH_EXT_GET_PROC_ADDRESS("glEndTransformFeedbackNV");
        if (NULL == GLH_EXT_NAME(glEndTransformFeedbackNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTransformFeedbackAttribsNV) = (PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTransformFeedbackAttribsNV");
        if (NULL == GLH_EXT_NAME(glTransformFeedbackAttribsNV))
            return GL_FALSE;
        GLH_EXT_NAME(glBindBufferRangeNV) = (PFNGLBINDBUFFERRANGENVPROC)GLH_EXT_GET_PROC_ADDRESS("glBindBufferRangeNV");
        if (NULL == GLH_EXT_NAME(glBindBufferRangeNV))
            return GL_FALSE;
        GLH_EXT_NAME(glBindBufferOffsetNV) = (PFNGLBINDBUFFEROFFSETNVPROC)GLH_EXT_GET_PROC_ADDRESS("glBindBufferOffsetNV");
        if (NULL == GLH_EXT_NAME(glBindBufferOffsetNV))
            return GL_FALSE;
        GLH_EXT_NAME(glBindBufferBaseNV) = (PFNGLBINDBUFFERBASENVPROC)GLH_EXT_GET_PROC_ADDRESS("glBindBufferBaseNV");
        if (NULL == GLH_EXT_NAME(glBindBufferBaseNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTransformFeedbackVaryingsNV) = (PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTransformFeedbackVaryingsNV");
        if (NULL == GLH_EXT_NAME(glTransformFeedbackVaryingsNV))
            return GL_FALSE;
        GLH_EXT_NAME(glActiveVaryingNV) = (PFNGLACTIVEVARYINGNVPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveVaryingNV");
        if (NULL == GLH_EXT_NAME(glActiveVaryingNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVaryingLocationNV) = (PFNGLGETVARYINGLOCATIONNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVaryingLocationNV");
        if (NULL == GLH_EXT_NAME(glGetVaryingLocationNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetActiveVaryingNV) = (PFNGLGETACTIVEVARYINGNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetActiveVaryingNV");
        if (NULL == GLH_EXT_NAME(glGetActiveVaryingNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetTransformFeedbackVaryingNV) = (PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetTransformFeedbackVaryingNV");
        if (NULL == GLH_EXT_NAME(glGetTransformFeedbackVaryingNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_depth_buffer_float
    }
    if (0 == strcmp(extension, "GL_NV_depth_buffer_float")) {
        GLH_EXT_NAME(glDepthRangedNV) = (PFNGLDEPTHRANGEDNVPROC)GLH_EXT_GET_PROC_ADDRESS("glDepthRangedNV");
        if (NULL == GLH_EXT_NAME(glDepthRangedNV))
            return GL_FALSE;
        GLH_EXT_NAME(glClearDepthdNV) = (PFNGLCLEARDEPTHDNVPROC)GLH_EXT_GET_PROC_ADDRESS("glClearDepthdNV");
        if (NULL == GLH_EXT_NAME(glClearDepthdNV))
            return GL_FALSE;
        GLH_EXT_NAME(glDepthBoundsdNV) = (PFNGLDEPTHBOUNDSDNVPROC)GLH_EXT_GET_PROC_ADDRESS("glDepthBoundsdNV");
        if (NULL == GLH_EXT_NAME(glDepthBoundsdNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture_compression_latc
    }
    if (0 == strcmp(extension, "GL_EXT_texture_compression_latc")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_framebuffer_sRGB
    }
    if (0 == strcmp(extension, "GL_EXT_framebuffer_sRGB")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture_shared_exponent
    }
    if (0 == strcmp(extension, "GL_EXT_texture_shared_exponent")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_packed_float
    }
    if (0 == strcmp(extension, "GL_EXT_packed_float")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture_array
    }
    if (0 == strcmp(extension, "GL_EXT_texture_array")) {
        return GL_TRUE;
#endif

#ifdef GL_EXT_draw_buffers2
    }
    if (0 == strcmp(extension, "GL_EXT_draw_buffers2")) {
        GLH_EXT_NAME(glColorMaskIndexedEXT) = (PFNGLCOLORMASKINDEXEDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glColorMaskIndexedEXT");
        if (NULL == GLH_EXT_NAME(glColorMaskIndexedEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetBooleanIndexedvEXT) = (PFNGLGETBOOLEANINDEXEDVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBooleanIndexedvEXT");
        if (NULL == GLH_EXT_NAME(glGetBooleanIndexedvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetIntegerIndexedvEXT) = (PFNGLGETINTEGERINDEXEDVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetIntegerIndexedvEXT");
        if (NULL == GLH_EXT_NAME(glGetIntegerIndexedvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glEnableIndexedEXT) = (PFNGLENABLEINDEXEDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glEnableIndexedEXT");
        if (NULL == GLH_EXT_NAME(glEnableIndexedEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDisableIndexedEXT) = (PFNGLDISABLEINDEXEDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDisableIndexedEXT");
        if (NULL == GLH_EXT_NAME(glDisableIndexedEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glIsEnabledIndexedEXT) = (PFNGLISENABLEDINDEXEDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIsEnabledIndexedEXT");
        if (NULL == GLH_EXT_NAME(glIsEnabledIndexedEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture_integer
    }
    if (0 == strcmp(extension, "GL_EXT_texture_integer")) {
        GLH_EXT_NAME(glTexParameterIivEXT) = (PFNGLTEXPARAMETERIIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexParameterIivEXT");
        if (NULL == GLH_EXT_NAME(glTexParameterIivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTexParameterIuivEXT) = (PFNGLTEXPARAMETERIUIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexParameterIuivEXT");
        if (NULL == GLH_EXT_NAME(glTexParameterIuivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetTexParameterIivEXT) = (PFNGLGETTEXPARAMETERIIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetTexParameterIivEXT");
        if (NULL == GLH_EXT_NAME(glGetTexParameterIivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetTexParameterIuivEXT) = (PFNGLGETTEXPARAMETERIUIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetTexParameterIuivEXT");
        if (NULL == GLH_EXT_NAME(glGetTexParameterIuivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glClearColorIiEXT) = (PFNGLCLEARCOLORIIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glClearColorIiEXT");
        if (NULL == GLH_EXT_NAME(glClearColorIiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glClearColorIuiEXT) = (PFNGLCLEARCOLORIUIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glClearColorIuiEXT");
        if (NULL == GLH_EXT_NAME(glClearColorIuiEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_bindable_uniform
    }
    if (0 == strcmp(extension, "GL_EXT_bindable_uniform")) {
        GLH_EXT_NAME(glUniformBufferEXT) = (PFNGLUNIFORMBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformBufferEXT");
        if (NULL == GLH_EXT_NAME(glUniformBufferEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetUniformBufferSizeEXT) = (PFNGLGETUNIFORMBUFFERSIZEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformBufferSizeEXT");
        if (NULL == GLH_EXT_NAME(glGetUniformBufferSizeEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetUniformOffsetEXT) = (PFNGLGETUNIFORMOFFSETEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformOffsetEXT");
        if (NULL == GLH_EXT_NAME(glGetUniformOffsetEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_gpu_shader4
    }
    if (0 == strcmp(extension, "GL_EXT_gpu_shader4")) {
        GLH_EXT_NAME(glGetUniformuivEXT) = (PFNGLGETUNIFORMUIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformuivEXT");
        if (NULL == GLH_EXT_NAME(glGetUniformuivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindFragDataLocationEXT) = (PFNGLBINDFRAGDATALOCATIONEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindFragDataLocationEXT");
        if (NULL == GLH_EXT_NAME(glBindFragDataLocationEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFragDataLocationEXT) = (PFNGLGETFRAGDATALOCATIONEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFragDataLocationEXT");
        if (NULL == GLH_EXT_NAME(glGetFragDataLocationEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform1uiEXT) = (PFNGLUNIFORM1UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1uiEXT");
        if (NULL == GLH_EXT_NAME(glUniform1uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform2uiEXT) = (PFNGLUNIFORM2UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2uiEXT");
        if (NULL == GLH_EXT_NAME(glUniform2uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform3uiEXT) = (PFNGLUNIFORM3UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3uiEXT");
        if (NULL == GLH_EXT_NAME(glUniform3uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform4uiEXT) = (PFNGLUNIFORM4UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4uiEXT");
        if (NULL == GLH_EXT_NAME(glUniform4uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform1uivEXT) = (PFNGLUNIFORM1UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1uivEXT");
        if (NULL == GLH_EXT_NAME(glUniform1uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform2uivEXT) = (PFNGLUNIFORM2UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2uivEXT");
        if (NULL == GLH_EXT_NAME(glUniform2uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform3uivEXT) = (PFNGLUNIFORM3UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3uivEXT");
        if (NULL == GLH_EXT_NAME(glUniform3uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform4uivEXT) = (PFNGLUNIFORM4UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4uivEXT");
        if (NULL == GLH_EXT_NAME(glUniform4uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI1iEXT) = (PFNGLVERTEXATTRIBI1IEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI1iEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI1iEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI2iEXT) = (PFNGLVERTEXATTRIBI2IEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI2iEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI2iEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI3iEXT) = (PFNGLVERTEXATTRIBI3IEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI3iEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI3iEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4iEXT) = (PFNGLVERTEXATTRIBI4IEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4iEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4iEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI1uiEXT) = (PFNGLVERTEXATTRIBI1UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI1uiEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI1uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI2uiEXT) = (PFNGLVERTEXATTRIBI2UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI2uiEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI2uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI3uiEXT) = (PFNGLVERTEXATTRIBI3UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI3uiEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI3uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4uiEXT) = (PFNGLVERTEXATTRIBI4UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4uiEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI1ivEXT) = (PFNGLVERTEXATTRIBI1IVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI1ivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI1ivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI2ivEXT) = (PFNGLVERTEXATTRIBI2IVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI2ivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI2ivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI3ivEXT) = (PFNGLVERTEXATTRIBI3IVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI3ivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI3ivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4ivEXT) = (PFNGLVERTEXATTRIBI4IVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4ivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4ivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI1uivEXT) = (PFNGLVERTEXATTRIBI1UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI1uivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI1uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI2uivEXT) = (PFNGLVERTEXATTRIBI2UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI2uivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI2uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI3uivEXT) = (PFNGLVERTEXATTRIBI3UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI3uivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI3uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4uivEXT) = (PFNGLVERTEXATTRIBI4UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4uivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4bvEXT) = (PFNGLVERTEXATTRIBI4BVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4bvEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4bvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4svEXT) = (PFNGLVERTEXATTRIBI4SVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4svEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4svEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4ubvEXT) = (PFNGLVERTEXATTRIBI4UBVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4ubvEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4ubvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4usvEXT) = (PFNGLVERTEXATTRIBI4USVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4usvEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4usvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribIPointerEXT) = (PFNGLVERTEXATTRIBIPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribIPointerEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribIPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribIivEXT) = (PFNGLGETVERTEXATTRIBIIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribIivEXT");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribIivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribIuivEXT) = (PFNGLGETVERTEXATTRIBIUIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribIuivEXT");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribIuivEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_geometry_shader4
    }
    if (0 == strcmp(extension, "GL_EXT_geometry_shader4")) {
        GLH_EXT_NAME(glProgramParameteriEXT) = (PFNGLPROGRAMPARAMETERIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameteriEXT");
        if (NULL == GLH_EXT_NAME(glProgramParameteriEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFramebufferTextureEXT) = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFramebufferTextureEXT");
        if (NULL == GLH_EXT_NAME(glFramebufferTextureEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFramebufferTextureLayerEXT) = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFramebufferTextureLayerEXT");
        if (NULL == GLH_EXT_NAME(glFramebufferTextureLayerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFramebufferTextureFaceEXT) = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFramebufferTextureFaceEXT");
        if (NULL == GLH_EXT_NAME(glFramebufferTextureFaceEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_geometry_program4
    }
    if (0 == strcmp(extension, "GL_NV_geometry_program4")) {
        GLH_EXT_NAME(glProgramVertexLimitNV) = (PFNGLPROGRAMVERTEXLIMITNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramVertexLimitNV");
        if (NULL == GLH_EXT_NAME(glProgramVertexLimitNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_gpu_program4
    }
    if (0 == strcmp(extension, "GL_NV_gpu_program4")) {
        GLH_EXT_NAME(glProgramLocalParameterI4iNV) = (PFNGLPROGRAMLOCALPARAMETERI4INVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameterI4iNV");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameterI4iNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParameterI4ivNV) = (PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameterI4ivNV");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameterI4ivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParametersI4ivNV) = (PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParametersI4ivNV");
        if (NULL == GLH_EXT_NAME(glProgramLocalParametersI4ivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParameterI4uiNV) = (PFNGLPROGRAMLOCALPARAMETERI4UINVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameterI4uiNV");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameterI4uiNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParameterI4uivNV) = (PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameterI4uivNV");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameterI4uivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParametersI4uivNV) = (PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParametersI4uivNV");
        if (NULL == GLH_EXT_NAME(glProgramLocalParametersI4uivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameterI4iNV) = (PFNGLPROGRAMENVPARAMETERI4INVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameterI4iNV");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameterI4iNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameterI4ivNV) = (PFNGLPROGRAMENVPARAMETERI4IVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameterI4ivNV");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameterI4ivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParametersI4ivNV) = (PFNGLPROGRAMENVPARAMETERSI4IVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParametersI4ivNV");
        if (NULL == GLH_EXT_NAME(glProgramEnvParametersI4ivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameterI4uiNV) = (PFNGLPROGRAMENVPARAMETERI4UINVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameterI4uiNV");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameterI4uiNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameterI4uivNV) = (PFNGLPROGRAMENVPARAMETERI4UIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameterI4uivNV");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameterI4uivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParametersI4uivNV) = (PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParametersI4uivNV");
        if (NULL == GLH_EXT_NAME(glProgramEnvParametersI4uivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramLocalParameterIivNV) = (PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramLocalParameterIivNV");
        if (NULL == GLH_EXT_NAME(glGetProgramLocalParameterIivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramLocalParameterIuivNV) = (PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramLocalParameterIuivNV");
        if (NULL == GLH_EXT_NAME(glGetProgramLocalParameterIuivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramEnvParameterIivNV) = (PFNGLGETPROGRAMENVPARAMETERIIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramEnvParameterIivNV");
        if (NULL == GLH_EXT_NAME(glGetProgramEnvParameterIivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramEnvParameterIuivNV) = (PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramEnvParameterIuivNV");
        if (NULL == GLH_EXT_NAME(glGetProgramEnvParameterIuivNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_parameter_buffer_object
    }
    if (0 == strcmp(extension, "GL_NV_parameter_buffer_object")) {
        GLH_EXT_NAME(glProgramBufferParametersfvNV) = (PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramBufferParametersfvNV");
        if (NULL == GLH_EXT_NAME(glProgramBufferParametersfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramBufferParametersIivNV) = (PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramBufferParametersIivNV");
        if (NULL == GLH_EXT_NAME(glProgramBufferParametersIivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramBufferParametersIuivNV) = (PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramBufferParametersIuivNV");
        if (NULL == GLH_EXT_NAME(glProgramBufferParametersIuivNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_framebuffer_multisample
    }
    if (0 == strcmp(extension, "GL_EXT_framebuffer_multisample")) {
        GLH_EXT_NAME(glRenderbufferStorageMultisampleEXT) = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glRenderbufferStorageMultisampleEXT");
        if (NULL == GLH_EXT_NAME(glRenderbufferStorageMultisampleEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_NV_framebuffer_multisample_coverage
    }
    if (0 == strcmp(extension, "GL_NV_framebuffer_multisample_coverage")) {
        GLH_EXT_NAME(glRenderbufferStorageMultisampleCoverageNV) = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC)GLH_EXT_GET_PROC_ADDRESS("glRenderbufferStorageMultisampleCoverageNV");
        if (NULL == GLH_EXT_NAME(glRenderbufferStorageMultisampleCoverageNV))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_framebuffer_blit
    }
    if (0 == strcmp(extension, "GL_EXT_framebuffer_blit")) {
        GLH_EXT_NAME(glBlitFramebufferEXT) = (PFNGLBLITFRAMEBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBlitFramebufferEXT");
        if (NULL == GLH_EXT_NAME(glBlitFramebufferEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_draw_instanced
    }
    if (0 == strcmp(extension, "GL_EXT_draw_instanced")) {
        GLH_EXT_NAME(glDrawArraysInstancedEXT) = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawArraysInstancedEXT");
        if (NULL == GLH_EXT_NAME(glDrawArraysInstancedEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDrawElementsInstancedEXT) = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawElementsInstancedEXT");
        if (NULL == GLH_EXT_NAME(glDrawElementsInstancedEXT))
            return GL_FALSE;
        return GL_TRUE;
#endif

#ifdef GL_EXT_texture_compression_rgtc
    }
    if (0 == strcmp(extension, "GL_EXT_texture_compression_rgtc")) {
        return GL_TRUE;
#endif

    }
    return GL_FALSE; /* requested extension not found */
}
#endif

#else /* (defined(__cplusplus) && defined(_MSC_VER)) */
/* END EDITED BY VIS 22.02.2007 */

#ifdef GLH_EXT_SINGLE_FILE

int glh_init_extension(const char* extension)
{
    if (NULL == extension) {
        return GL_FALSE;
#ifndef _WIN32
    } else if (0 == strcmp (extension, "GL_VERSION_1_2") || 0 == strcmp (extension, "GL_VERSION_1_3") || 0 == strcmp (extension, "GL_VERSION_1_4")) {
        return GL_TRUE;
#endif
#if defined(GL_VERSION_1_2) || defined(GL_VERSION_1_3) || defined(GL_VERSION_1_4) || defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    } else if (0 == strcmp(extension, "GL_VERSION_1_2")) {
        GLH_CORE_NAME(glBlendColor) = (PFNGLBLENDCOLORPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColor");
        if (NULL == GLH_CORE_NAME(glBlendColor))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquation) = (PFNGLBLENDEQUATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquation");
        if (NULL == GLH_CORE_NAME(glBlendEquation))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawRangeElements) = (PFNGLDRAWRANGEELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElements");
        if (NULL == GLH_CORE_NAME(glDrawRangeElements))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTable) = (PFNGLCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTable");
        if (NULL == GLH_CORE_NAME(glColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameterfv) = (PFNGLCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameteriv) = (PFNGLCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorTable) = (PFNGLCOPYCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorTable");
        if (NULL == GLH_CORE_NAME(glCopyColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTable) = (PFNGLGETCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTable");
        if (NULL == GLH_CORE_NAME(glGetColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameterfv) = (PFNGLGETCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameteriv) = (PFNGLGETCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorSubTable) = (PFNGLCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorSubTable");
        if (NULL == GLH_CORE_NAME(glColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorSubTable) = (PFNGLCOPYCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorSubTable");
        if (NULL == GLH_CORE_NAME(glCopyColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter1D) = (PFNGLCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter2D) = (PFNGLCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterf) = (PFNGLCONVOLUTIONPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterf");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterfv) = (PFNGLCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteri) = (PFNGLCONVOLUTIONPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteri");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteriv) = (PFNGLCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter1D) = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter2D) = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionFilter) = (PFNGLGETCONVOLUTIONFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionFilter");
        if (NULL == GLH_CORE_NAME(glGetConvolutionFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameterfv) = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameteriv) = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetSeparableFilter) = (PFNGLGETSEPARABLEFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSeparableFilter");
        if (NULL == GLH_CORE_NAME(glGetSeparableFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glSeparableFilter2D) = (PFNGLSEPARABLEFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glSeparableFilter2D");
        if (NULL == GLH_CORE_NAME(glSeparableFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogram) = (PFNGLGETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogram");
        if (NULL == GLH_CORE_NAME(glGetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameterfv) = (PFNGLGETHISTOGRAMPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterfv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameteriv) = (PFNGLGETHISTOGRAMPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameteriv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmax) = (PFNGLGETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmax");
        if (NULL == GLH_CORE_NAME(glGetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameterfv) = (PFNGLGETMINMAXPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterfv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameteriv) = (PFNGLGETMINMAXPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameteriv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glHistogram) = (PFNGLHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glHistogram");
        if (NULL == GLH_CORE_NAME(glHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glMinmax) = (PFNGLMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glMinmax");
        if (NULL == GLH_CORE_NAME(glMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glResetHistogram) = (PFNGLRESETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glResetHistogram");
        if (NULL == GLH_CORE_NAME(glResetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glResetMinmax) = (PFNGLRESETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glResetMinmax");
        if (NULL == GLH_CORE_NAME(glResetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glTexImage3D) = (PFNGLTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage3D");
        if (NULL == GLH_CORE_NAME(glTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glTexSubImage3D) = (PFNGLTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyTexSubImage3D) = (PFNGLCOPYTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCopyTexSubImage3D))
            return GL_FALSE;
#endif

#if defined(GL_VERSION_1_3) || defined(GL_VERSION_1_4) || defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    } else if (0 == strcmp(extension, "GL_VERSION_1_3")) {
        GLH_CORE_NAME(glBlendColor) = (PFNGLBLENDCOLORPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColor");
        if (NULL == GLH_CORE_NAME(glBlendColor))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquation) = (PFNGLBLENDEQUATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquation");
        if (NULL == GLH_CORE_NAME(glBlendEquation))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawRangeElements) = (PFNGLDRAWRANGEELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElements");
        if (NULL == GLH_CORE_NAME(glDrawRangeElements))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTable) = (PFNGLCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTable");
        if (NULL == GLH_CORE_NAME(glColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameterfv) = (PFNGLCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameteriv) = (PFNGLCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorTable) = (PFNGLCOPYCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorTable");
        if (NULL == GLH_CORE_NAME(glCopyColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTable) = (PFNGLGETCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTable");
        if (NULL == GLH_CORE_NAME(glGetColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameterfv) = (PFNGLGETCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameteriv) = (PFNGLGETCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorSubTable) = (PFNGLCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorSubTable");
        if (NULL == GLH_CORE_NAME(glColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorSubTable) = (PFNGLCOPYCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorSubTable");
        if (NULL == GLH_CORE_NAME(glCopyColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter1D) = (PFNGLCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter2D) = (PFNGLCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterf) = (PFNGLCONVOLUTIONPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterf");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterfv) = (PFNGLCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteri) = (PFNGLCONVOLUTIONPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteri");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteriv) = (PFNGLCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter1D) = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter2D) = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionFilter) = (PFNGLGETCONVOLUTIONFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionFilter");
        if (NULL == GLH_CORE_NAME(glGetConvolutionFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameterfv) = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameteriv) = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetSeparableFilter) = (PFNGLGETSEPARABLEFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSeparableFilter");
        if (NULL == GLH_CORE_NAME(glGetSeparableFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glSeparableFilter2D) = (PFNGLSEPARABLEFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glSeparableFilter2D");
        if (NULL == GLH_CORE_NAME(glSeparableFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogram) = (PFNGLGETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogram");
        if (NULL == GLH_CORE_NAME(glGetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameterfv) = (PFNGLGETHISTOGRAMPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterfv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameteriv) = (PFNGLGETHISTOGRAMPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameteriv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmax) = (PFNGLGETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmax");
        if (NULL == GLH_CORE_NAME(glGetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameterfv) = (PFNGLGETMINMAXPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterfv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameteriv) = (PFNGLGETMINMAXPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameteriv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glHistogram) = (PFNGLHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glHistogram");
        if (NULL == GLH_CORE_NAME(glHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glMinmax) = (PFNGLMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glMinmax");
        if (NULL == GLH_CORE_NAME(glMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glResetHistogram) = (PFNGLRESETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glResetHistogram");
        if (NULL == GLH_CORE_NAME(glResetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glResetMinmax) = (PFNGLRESETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glResetMinmax");
        if (NULL == GLH_CORE_NAME(glResetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glTexImage3D) = (PFNGLTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage3D");
        if (NULL == GLH_CORE_NAME(glTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glTexSubImage3D) = (PFNGLTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyTexSubImage3D) = (PFNGLCOPYTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCopyTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glActiveTexture) = (PFNGLACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveTexture");
        if (NULL == GLH_CORE_NAME(glActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glClientActiveTexture) = (PFNGLCLIENTACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glClientActiveTexture");
        if (NULL == GLH_CORE_NAME(glClientActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1d) = (PFNGLMULTITEXCOORD1DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1dv) = (PFNGLMULTITEXCOORD1DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1f) = (PFNGLMULTITEXCOORD1FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1fv) = (PFNGLMULTITEXCOORD1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1i) = (PFNGLMULTITEXCOORD1IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1iv) = (PFNGLMULTITEXCOORD1IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1s) = (PFNGLMULTITEXCOORD1SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1sv) = (PFNGLMULTITEXCOORD1SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2d) = (PFNGLMULTITEXCOORD2DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2dv) = (PFNGLMULTITEXCOORD2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2f) = (PFNGLMULTITEXCOORD2FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2fv) = (PFNGLMULTITEXCOORD2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2i) = (PFNGLMULTITEXCOORD2IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2iv) = (PFNGLMULTITEXCOORD2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2s) = (PFNGLMULTITEXCOORD2SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2sv) = (PFNGLMULTITEXCOORD2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3d) = (PFNGLMULTITEXCOORD3DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3dv) = (PFNGLMULTITEXCOORD3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3f) = (PFNGLMULTITEXCOORD3FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3fv) = (PFNGLMULTITEXCOORD3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3i) = (PFNGLMULTITEXCOORD3IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3iv) = (PFNGLMULTITEXCOORD3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3s) = (PFNGLMULTITEXCOORD3SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3sv) = (PFNGLMULTITEXCOORD3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4d) = (PFNGLMULTITEXCOORD4DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4dv) = (PFNGLMULTITEXCOORD4DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4f) = (PFNGLMULTITEXCOORD4FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4fv) = (PFNGLMULTITEXCOORD4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4i) = (PFNGLMULTITEXCOORD4IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4iv) = (PFNGLMULTITEXCOORD4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4s) = (PFNGLMULTITEXCOORD4SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4sv) = (PFNGLMULTITEXCOORD4SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4sv))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixf) = (PFNGLLOADTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixd) = (PFNGLLOADTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixf) = (PFNGLMULTTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixd) = (PFNGLMULTTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glSampleCoverage) = (PFNGLSAMPLECOVERAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleCoverage");
        if (NULL == GLH_CORE_NAME(glSampleCoverage))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage3D) = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage2D) = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage1D) = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage3D) = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage2D) = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage1D) = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetCompressedTexImage) = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCompressedTexImage");
        if (NULL == GLH_CORE_NAME(glGetCompressedTexImage))
            return GL_FALSE;
#endif

#if defined(GL_VERSION_1_4) || defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    } else if (0 == strcmp(extension, "GL_VERSION_1_4")) {
        GLH_CORE_NAME(glBlendColor) = (PFNGLBLENDCOLORPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColor");
        if (NULL == GLH_CORE_NAME(glBlendColor))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquation) = (PFNGLBLENDEQUATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquation");
        if (NULL == GLH_CORE_NAME(glBlendEquation))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawRangeElements) = (PFNGLDRAWRANGEELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElements");
        if (NULL == GLH_CORE_NAME(glDrawRangeElements))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTable) = (PFNGLCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTable");
        if (NULL == GLH_CORE_NAME(glColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameterfv) = (PFNGLCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameteriv) = (PFNGLCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorTable) = (PFNGLCOPYCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorTable");
        if (NULL == GLH_CORE_NAME(glCopyColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTable) = (PFNGLGETCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTable");
        if (NULL == GLH_CORE_NAME(glGetColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameterfv) = (PFNGLGETCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameteriv) = (PFNGLGETCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorSubTable) = (PFNGLCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorSubTable");
        if (NULL == GLH_CORE_NAME(glColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorSubTable) = (PFNGLCOPYCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorSubTable");
        if (NULL == GLH_CORE_NAME(glCopyColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter1D) = (PFNGLCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter2D) = (PFNGLCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterf) = (PFNGLCONVOLUTIONPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterf");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterfv) = (PFNGLCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteri) = (PFNGLCONVOLUTIONPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteri");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteriv) = (PFNGLCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter1D) = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter2D) = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionFilter) = (PFNGLGETCONVOLUTIONFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionFilter");
        if (NULL == GLH_CORE_NAME(glGetConvolutionFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameterfv) = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameteriv) = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetSeparableFilter) = (PFNGLGETSEPARABLEFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSeparableFilter");
        if (NULL == GLH_CORE_NAME(glGetSeparableFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glSeparableFilter2D) = (PFNGLSEPARABLEFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glSeparableFilter2D");
        if (NULL == GLH_CORE_NAME(glSeparableFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogram) = (PFNGLGETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogram");
        if (NULL == GLH_CORE_NAME(glGetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameterfv) = (PFNGLGETHISTOGRAMPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterfv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameteriv) = (PFNGLGETHISTOGRAMPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameteriv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmax) = (PFNGLGETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmax");
        if (NULL == GLH_CORE_NAME(glGetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameterfv) = (PFNGLGETMINMAXPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterfv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameteriv) = (PFNGLGETMINMAXPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameteriv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glHistogram) = (PFNGLHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glHistogram");
        if (NULL == GLH_CORE_NAME(glHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glMinmax) = (PFNGLMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glMinmax");
        if (NULL == GLH_CORE_NAME(glMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glResetHistogram) = (PFNGLRESETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glResetHistogram");
        if (NULL == GLH_CORE_NAME(glResetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glResetMinmax) = (PFNGLRESETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glResetMinmax");
        if (NULL == GLH_CORE_NAME(glResetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glTexImage3D) = (PFNGLTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage3D");
        if (NULL == GLH_CORE_NAME(glTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glTexSubImage3D) = (PFNGLTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyTexSubImage3D) = (PFNGLCOPYTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCopyTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glActiveTexture) = (PFNGLACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveTexture");
        if (NULL == GLH_CORE_NAME(glActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glClientActiveTexture) = (PFNGLCLIENTACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glClientActiveTexture");
        if (NULL == GLH_CORE_NAME(glClientActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1d) = (PFNGLMULTITEXCOORD1DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1dv) = (PFNGLMULTITEXCOORD1DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1f) = (PFNGLMULTITEXCOORD1FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1fv) = (PFNGLMULTITEXCOORD1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1i) = (PFNGLMULTITEXCOORD1IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1iv) = (PFNGLMULTITEXCOORD1IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1s) = (PFNGLMULTITEXCOORD1SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1sv) = (PFNGLMULTITEXCOORD1SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2d) = (PFNGLMULTITEXCOORD2DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2dv) = (PFNGLMULTITEXCOORD2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2f) = (PFNGLMULTITEXCOORD2FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2fv) = (PFNGLMULTITEXCOORD2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2i) = (PFNGLMULTITEXCOORD2IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2iv) = (PFNGLMULTITEXCOORD2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2s) = (PFNGLMULTITEXCOORD2SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2sv) = (PFNGLMULTITEXCOORD2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3d) = (PFNGLMULTITEXCOORD3DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3dv) = (PFNGLMULTITEXCOORD3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3f) = (PFNGLMULTITEXCOORD3FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3fv) = (PFNGLMULTITEXCOORD3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3i) = (PFNGLMULTITEXCOORD3IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3iv) = (PFNGLMULTITEXCOORD3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3s) = (PFNGLMULTITEXCOORD3SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3sv) = (PFNGLMULTITEXCOORD3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4d) = (PFNGLMULTITEXCOORD4DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4dv) = (PFNGLMULTITEXCOORD4DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4f) = (PFNGLMULTITEXCOORD4FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4fv) = (PFNGLMULTITEXCOORD4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4i) = (PFNGLMULTITEXCOORD4IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4iv) = (PFNGLMULTITEXCOORD4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4s) = (PFNGLMULTITEXCOORD4SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4sv) = (PFNGLMULTITEXCOORD4SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4sv))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixf) = (PFNGLLOADTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixd) = (PFNGLLOADTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixf) = (PFNGLMULTTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixd) = (PFNGLMULTTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glSampleCoverage) = (PFNGLSAMPLECOVERAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleCoverage");
        if (NULL == GLH_CORE_NAME(glSampleCoverage))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage3D) = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage2D) = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage1D) = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage3D) = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage2D) = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage1D) = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetCompressedTexImage) = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCompressedTexImage");
        if (NULL == GLH_CORE_NAME(glGetCompressedTexImage))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendFuncSeparate) = (PFNGLBLENDFUNCSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendFuncSeparate");
        if (NULL == GLH_CORE_NAME(glBlendFuncSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordf) = (PFNGLFOGCOORDFPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordf");
        if (NULL == GLH_CORE_NAME(glFogCoordf))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordfv) = (PFNGLFOGCOORDFVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordfv");
        if (NULL == GLH_CORE_NAME(glFogCoordfv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordd) = (PFNGLFOGCOORDDPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordd");
        if (NULL == GLH_CORE_NAME(glFogCoordd))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoorddv) = (PFNGLFOGCOORDDVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoorddv");
        if (NULL == GLH_CORE_NAME(glFogCoorddv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordPointer) = (PFNGLFOGCOORDPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordPointer");
        if (NULL == GLH_CORE_NAME(glFogCoordPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawArrays) = (PFNGLMULTIDRAWARRAYSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawArrays");
        if (NULL == GLH_CORE_NAME(glMultiDrawArrays))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawElements) = (PFNGLMULTIDRAWELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawElements");
        if (NULL == GLH_CORE_NAME(glMultiDrawElements))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterf) = (PFNGLPOINTPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterf");
        if (NULL == GLH_CORE_NAME(glPointParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterfv) = (PFNGLPOINTPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfv");
        if (NULL == GLH_CORE_NAME(glPointParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteri) = (PFNGLPOINTPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteri");
        if (NULL == GLH_CORE_NAME(glPointParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteriv) = (PFNGLPOINTPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteriv");
        if (NULL == GLH_CORE_NAME(glPointParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3b) = (PFNGLSECONDARYCOLOR3BPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3b");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3b))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3bv) = (PFNGLSECONDARYCOLOR3BVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3bv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3bv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3d) = (PFNGLSECONDARYCOLOR3DPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3d");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3d))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3dv) = (PFNGLSECONDARYCOLOR3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3dv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3f) = (PFNGLSECONDARYCOLOR3FPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3f");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3f))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3fv) = (PFNGLSECONDARYCOLOR3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3fv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3i) = (PFNGLSECONDARYCOLOR3IPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3i");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3i))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3iv) = (PFNGLSECONDARYCOLOR3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3iv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3s) = (PFNGLSECONDARYCOLOR3SPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3s");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3s))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3sv) = (PFNGLSECONDARYCOLOR3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3sv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ub) = (PFNGLSECONDARYCOLOR3UBPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ub");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ub))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ubv) = (PFNGLSECONDARYCOLOR3UBVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ubv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ubv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ui) = (PFNGLSECONDARYCOLOR3UIPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ui");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ui))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3uiv) = (PFNGLSECONDARYCOLOR3UIVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3uiv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3uiv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3us) = (PFNGLSECONDARYCOLOR3USPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3us");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3us))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3usv) = (PFNGLSECONDARYCOLOR3USVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3usv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3usv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColorPointer) = (PFNGLSECONDARYCOLORPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColorPointer");
        if (NULL == GLH_CORE_NAME(glSecondaryColorPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2d) = (PFNGLWINDOWPOS2DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2d");
        if (NULL == GLH_CORE_NAME(glWindowPos2d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2dv) = (PFNGLWINDOWPOS2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dv");
        if (NULL == GLH_CORE_NAME(glWindowPos2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2f) = (PFNGLWINDOWPOS2FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2f");
        if (NULL == GLH_CORE_NAME(glWindowPos2f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2fv) = (PFNGLWINDOWPOS2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fv");
        if (NULL == GLH_CORE_NAME(glWindowPos2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2i) = (PFNGLWINDOWPOS2IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2i");
        if (NULL == GLH_CORE_NAME(glWindowPos2i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2iv) = (PFNGLWINDOWPOS2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2iv");
        if (NULL == GLH_CORE_NAME(glWindowPos2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2s) = (PFNGLWINDOWPOS2SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2s");
        if (NULL == GLH_CORE_NAME(glWindowPos2s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2sv) = (PFNGLWINDOWPOS2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2sv");
        if (NULL == GLH_CORE_NAME(glWindowPos2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3d) = (PFNGLWINDOWPOS3DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3d");
        if (NULL == GLH_CORE_NAME(glWindowPos3d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3dv) = (PFNGLWINDOWPOS3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dv");
        if (NULL == GLH_CORE_NAME(glWindowPos3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3f) = (PFNGLWINDOWPOS3FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3f");
        if (NULL == GLH_CORE_NAME(glWindowPos3f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3fv) = (PFNGLWINDOWPOS3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fv");
        if (NULL == GLH_CORE_NAME(glWindowPos3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3i) = (PFNGLWINDOWPOS3IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3i");
        if (NULL == GLH_CORE_NAME(glWindowPos3i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3iv) = (PFNGLWINDOWPOS3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3iv");
        if (NULL == GLH_CORE_NAME(glWindowPos3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3s) = (PFNGLWINDOWPOS3SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3s");
        if (NULL == GLH_CORE_NAME(glWindowPos3s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3sv) = (PFNGLWINDOWPOS3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3sv");
        if (NULL == GLH_CORE_NAME(glWindowPos3sv))
            return GL_FALSE;
#endif

#if defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    } else if (0 == strcmp(extension, "GL_VERSION_1_5")) {
        GLH_CORE_NAME(glBlendColor) = (PFNGLBLENDCOLORPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColor");
        if (NULL == GLH_CORE_NAME(glBlendColor))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquation) = (PFNGLBLENDEQUATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquation");
        if (NULL == GLH_CORE_NAME(glBlendEquation))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawRangeElements) = (PFNGLDRAWRANGEELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElements");
        if (NULL == GLH_CORE_NAME(glDrawRangeElements))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTable) = (PFNGLCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTable");
        if (NULL == GLH_CORE_NAME(glColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameterfv) = (PFNGLCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameteriv) = (PFNGLCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorTable) = (PFNGLCOPYCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorTable");
        if (NULL == GLH_CORE_NAME(glCopyColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTable) = (PFNGLGETCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTable");
        if (NULL == GLH_CORE_NAME(glGetColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameterfv) = (PFNGLGETCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameteriv) = (PFNGLGETCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorSubTable) = (PFNGLCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorSubTable");
        if (NULL == GLH_CORE_NAME(glColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorSubTable) = (PFNGLCOPYCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorSubTable");
        if (NULL == GLH_CORE_NAME(glCopyColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter1D) = (PFNGLCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter2D) = (PFNGLCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterf) = (PFNGLCONVOLUTIONPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterf");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterfv) = (PFNGLCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteri) = (PFNGLCONVOLUTIONPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteri");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteriv) = (PFNGLCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter1D) = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter2D) = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionFilter) = (PFNGLGETCONVOLUTIONFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionFilter");
        if (NULL == GLH_CORE_NAME(glGetConvolutionFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameterfv) = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameteriv) = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetSeparableFilter) = (PFNGLGETSEPARABLEFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSeparableFilter");
        if (NULL == GLH_CORE_NAME(glGetSeparableFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glSeparableFilter2D) = (PFNGLSEPARABLEFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glSeparableFilter2D");
        if (NULL == GLH_CORE_NAME(glSeparableFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogram) = (PFNGLGETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogram");
        if (NULL == GLH_CORE_NAME(glGetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameterfv) = (PFNGLGETHISTOGRAMPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterfv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameteriv) = (PFNGLGETHISTOGRAMPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameteriv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmax) = (PFNGLGETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmax");
        if (NULL == GLH_CORE_NAME(glGetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameterfv) = (PFNGLGETMINMAXPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterfv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameteriv) = (PFNGLGETMINMAXPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameteriv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glHistogram) = (PFNGLHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glHistogram");
        if (NULL == GLH_CORE_NAME(glHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glMinmax) = (PFNGLMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glMinmax");
        if (NULL == GLH_CORE_NAME(glMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glResetHistogram) = (PFNGLRESETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glResetHistogram");
        if (NULL == GLH_CORE_NAME(glResetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glResetMinmax) = (PFNGLRESETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glResetMinmax");
        if (NULL == GLH_CORE_NAME(glResetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glTexImage3D) = (PFNGLTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage3D");
        if (NULL == GLH_CORE_NAME(glTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glTexSubImage3D) = (PFNGLTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyTexSubImage3D) = (PFNGLCOPYTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCopyTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glActiveTexture) = (PFNGLACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveTexture");
        if (NULL == GLH_CORE_NAME(glActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glClientActiveTexture) = (PFNGLCLIENTACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glClientActiveTexture");
        if (NULL == GLH_CORE_NAME(glClientActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1d) = (PFNGLMULTITEXCOORD1DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1dv) = (PFNGLMULTITEXCOORD1DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1f) = (PFNGLMULTITEXCOORD1FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1fv) = (PFNGLMULTITEXCOORD1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1i) = (PFNGLMULTITEXCOORD1IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1iv) = (PFNGLMULTITEXCOORD1IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1s) = (PFNGLMULTITEXCOORD1SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1sv) = (PFNGLMULTITEXCOORD1SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2d) = (PFNGLMULTITEXCOORD2DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2dv) = (PFNGLMULTITEXCOORD2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2f) = (PFNGLMULTITEXCOORD2FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2fv) = (PFNGLMULTITEXCOORD2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2i) = (PFNGLMULTITEXCOORD2IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2iv) = (PFNGLMULTITEXCOORD2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2s) = (PFNGLMULTITEXCOORD2SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2sv) = (PFNGLMULTITEXCOORD2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3d) = (PFNGLMULTITEXCOORD3DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3dv) = (PFNGLMULTITEXCOORD3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3f) = (PFNGLMULTITEXCOORD3FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3fv) = (PFNGLMULTITEXCOORD3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3i) = (PFNGLMULTITEXCOORD3IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3iv) = (PFNGLMULTITEXCOORD3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3s) = (PFNGLMULTITEXCOORD3SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3sv) = (PFNGLMULTITEXCOORD3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4d) = (PFNGLMULTITEXCOORD4DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4dv) = (PFNGLMULTITEXCOORD4DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4f) = (PFNGLMULTITEXCOORD4FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4fv) = (PFNGLMULTITEXCOORD4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4i) = (PFNGLMULTITEXCOORD4IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4iv) = (PFNGLMULTITEXCOORD4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4s) = (PFNGLMULTITEXCOORD4SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4sv) = (PFNGLMULTITEXCOORD4SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4sv))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixf) = (PFNGLLOADTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixd) = (PFNGLLOADTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixf) = (PFNGLMULTTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixd) = (PFNGLMULTTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glSampleCoverage) = (PFNGLSAMPLECOVERAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleCoverage");
        if (NULL == GLH_CORE_NAME(glSampleCoverage))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage3D) = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage2D) = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage1D) = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage3D) = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage2D) = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage1D) = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetCompressedTexImage) = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCompressedTexImage");
        if (NULL == GLH_CORE_NAME(glGetCompressedTexImage))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendFuncSeparate) = (PFNGLBLENDFUNCSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendFuncSeparate");
        if (NULL == GLH_CORE_NAME(glBlendFuncSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordf) = (PFNGLFOGCOORDFPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordf");
        if (NULL == GLH_CORE_NAME(glFogCoordf))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordfv) = (PFNGLFOGCOORDFVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordfv");
        if (NULL == GLH_CORE_NAME(glFogCoordfv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordd) = (PFNGLFOGCOORDDPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordd");
        if (NULL == GLH_CORE_NAME(glFogCoordd))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoorddv) = (PFNGLFOGCOORDDVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoorddv");
        if (NULL == GLH_CORE_NAME(glFogCoorddv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordPointer) = (PFNGLFOGCOORDPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordPointer");
        if (NULL == GLH_CORE_NAME(glFogCoordPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawArrays) = (PFNGLMULTIDRAWARRAYSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawArrays");
        if (NULL == GLH_CORE_NAME(glMultiDrawArrays))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawElements) = (PFNGLMULTIDRAWELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawElements");
        if (NULL == GLH_CORE_NAME(glMultiDrawElements))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterf) = (PFNGLPOINTPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterf");
        if (NULL == GLH_CORE_NAME(glPointParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterfv) = (PFNGLPOINTPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfv");
        if (NULL == GLH_CORE_NAME(glPointParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteri) = (PFNGLPOINTPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteri");
        if (NULL == GLH_CORE_NAME(glPointParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteriv) = (PFNGLPOINTPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteriv");
        if (NULL == GLH_CORE_NAME(glPointParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3b) = (PFNGLSECONDARYCOLOR3BPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3b");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3b))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3bv) = (PFNGLSECONDARYCOLOR3BVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3bv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3bv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3d) = (PFNGLSECONDARYCOLOR3DPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3d");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3d))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3dv) = (PFNGLSECONDARYCOLOR3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3dv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3f) = (PFNGLSECONDARYCOLOR3FPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3f");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3f))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3fv) = (PFNGLSECONDARYCOLOR3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3fv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3i) = (PFNGLSECONDARYCOLOR3IPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3i");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3i))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3iv) = (PFNGLSECONDARYCOLOR3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3iv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3s) = (PFNGLSECONDARYCOLOR3SPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3s");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3s))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3sv) = (PFNGLSECONDARYCOLOR3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3sv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ub) = (PFNGLSECONDARYCOLOR3UBPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ub");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ub))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ubv) = (PFNGLSECONDARYCOLOR3UBVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ubv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ubv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ui) = (PFNGLSECONDARYCOLOR3UIPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ui");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ui))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3uiv) = (PFNGLSECONDARYCOLOR3UIVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3uiv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3uiv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3us) = (PFNGLSECONDARYCOLOR3USPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3us");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3us))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3usv) = (PFNGLSECONDARYCOLOR3USVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3usv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3usv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColorPointer) = (PFNGLSECONDARYCOLORPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColorPointer");
        if (NULL == GLH_CORE_NAME(glSecondaryColorPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2d) = (PFNGLWINDOWPOS2DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2d");
        if (NULL == GLH_CORE_NAME(glWindowPos2d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2dv) = (PFNGLWINDOWPOS2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dv");
        if (NULL == GLH_CORE_NAME(glWindowPos2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2f) = (PFNGLWINDOWPOS2FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2f");
        if (NULL == GLH_CORE_NAME(glWindowPos2f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2fv) = (PFNGLWINDOWPOS2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fv");
        if (NULL == GLH_CORE_NAME(glWindowPos2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2i) = (PFNGLWINDOWPOS2IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2i");
        if (NULL == GLH_CORE_NAME(glWindowPos2i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2iv) = (PFNGLWINDOWPOS2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2iv");
        if (NULL == GLH_CORE_NAME(glWindowPos2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2s) = (PFNGLWINDOWPOS2SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2s");
        if (NULL == GLH_CORE_NAME(glWindowPos2s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2sv) = (PFNGLWINDOWPOS2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2sv");
        if (NULL == GLH_CORE_NAME(glWindowPos2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3d) = (PFNGLWINDOWPOS3DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3d");
        if (NULL == GLH_CORE_NAME(glWindowPos3d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3dv) = (PFNGLWINDOWPOS3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dv");
        if (NULL == GLH_CORE_NAME(glWindowPos3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3f) = (PFNGLWINDOWPOS3FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3f");
        if (NULL == GLH_CORE_NAME(glWindowPos3f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3fv) = (PFNGLWINDOWPOS3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fv");
        if (NULL == GLH_CORE_NAME(glWindowPos3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3i) = (PFNGLWINDOWPOS3IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3i");
        if (NULL == GLH_CORE_NAME(glWindowPos3i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3iv) = (PFNGLWINDOWPOS3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3iv");
        if (NULL == GLH_CORE_NAME(glWindowPos3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3s) = (PFNGLWINDOWPOS3SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3s");
        if (NULL == GLH_CORE_NAME(glWindowPos3s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3sv) = (PFNGLWINDOWPOS3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3sv");
        if (NULL == GLH_CORE_NAME(glWindowPos3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glGenQueries) = (PFNGLGENQUERIESPROC)GLH_EXT_GET_PROC_ADDRESS("glGenQueries");
        if (NULL == GLH_CORE_NAME(glGenQueries))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteQueries) = (PFNGLDELETEQUERIESPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteQueries");
        if (NULL == GLH_CORE_NAME(glDeleteQueries))
            return GL_FALSE;
        GLH_CORE_NAME(glIsQuery) = (PFNGLISQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glIsQuery");
        if (NULL == GLH_CORE_NAME(glIsQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glBeginQuery) = (PFNGLBEGINQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginQuery");
        if (NULL == GLH_CORE_NAME(glBeginQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glEndQuery) = (PFNGLENDQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glEndQuery");
        if (NULL == GLH_CORE_NAME(glEndQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryiv) = (PFNGLGETQUERYIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryiv");
        if (NULL == GLH_CORE_NAME(glGetQueryiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryObjectiv) = (PFNGLGETQUERYOBJECTIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectiv");
        if (NULL == GLH_CORE_NAME(glGetQueryObjectiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryObjectuiv) = (PFNGLGETQUERYOBJECTUIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectuiv");
        if (NULL == GLH_CORE_NAME(glGetQueryObjectuiv))
            return GL_FALSE;
        GLH_CORE_NAME(glBindBuffer) = (PFNGLBINDBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glBindBuffer");
        if (NULL == GLH_CORE_NAME(glBindBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteBuffers) = (PFNGLDELETEBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteBuffers");
        if (NULL == GLH_CORE_NAME(glDeleteBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glGenBuffers) = (PFNGLGENBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glGenBuffers");
        if (NULL == GLH_CORE_NAME(glGenBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glIsBuffer) = (PFNGLISBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glIsBuffer");
        if (NULL == GLH_CORE_NAME(glIsBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glBufferData) = (PFNGLBUFFERDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferData");
        if (NULL == GLH_CORE_NAME(glBufferData))
            return GL_FALSE;
        GLH_CORE_NAME(glBufferSubData) = (PFNGLBUFFERSUBDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferSubData");
        if (NULL == GLH_CORE_NAME(glBufferSubData))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferSubData) = (PFNGLGETBUFFERSUBDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferSubData");
        if (NULL == GLH_CORE_NAME(glGetBufferSubData))
            return GL_FALSE;
        GLH_CORE_NAME(glMapBuffer) = (PFNGLMAPBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glMapBuffer");
        if (NULL == GLH_CORE_NAME(glMapBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glUnmapBuffer) = (PFNGLUNMAPBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glUnmapBuffer");
        if (NULL == GLH_CORE_NAME(glUnmapBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferParameteriv) = (PFNGLGETBUFFERPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferParameteriv");
        if (NULL == GLH_CORE_NAME(glGetBufferParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferPointerv) = (PFNGLGETBUFFERPOINTERVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferPointerv");
        if (NULL == GLH_CORE_NAME(glGetBufferPointerv))
            return GL_FALSE;
#endif

#if defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    } else if (0 == strcmp(extension, "GL_VERSION_2_0")) {
        GLH_CORE_NAME(glBlendColor) = (PFNGLBLENDCOLORPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColor");
        if (NULL == GLH_CORE_NAME(glBlendColor))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquation) = (PFNGLBLENDEQUATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquation");
        if (NULL == GLH_CORE_NAME(glBlendEquation))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawRangeElements) = (PFNGLDRAWRANGEELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElements");
        if (NULL == GLH_CORE_NAME(glDrawRangeElements))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTable) = (PFNGLCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTable");
        if (NULL == GLH_CORE_NAME(glColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameterfv) = (PFNGLCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameteriv) = (PFNGLCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorTable) = (PFNGLCOPYCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorTable");
        if (NULL == GLH_CORE_NAME(glCopyColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTable) = (PFNGLGETCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTable");
        if (NULL == GLH_CORE_NAME(glGetColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameterfv) = (PFNGLGETCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameteriv) = (PFNGLGETCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorSubTable) = (PFNGLCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorSubTable");
        if (NULL == GLH_CORE_NAME(glColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorSubTable) = (PFNGLCOPYCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorSubTable");
        if (NULL == GLH_CORE_NAME(glCopyColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter1D) = (PFNGLCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter2D) = (PFNGLCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterf) = (PFNGLCONVOLUTIONPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterf");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterfv) = (PFNGLCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteri) = (PFNGLCONVOLUTIONPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteri");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteriv) = (PFNGLCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter1D) = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter2D) = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionFilter) = (PFNGLGETCONVOLUTIONFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionFilter");
        if (NULL == GLH_CORE_NAME(glGetConvolutionFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameterfv) = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameteriv) = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetSeparableFilter) = (PFNGLGETSEPARABLEFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSeparableFilter");
        if (NULL == GLH_CORE_NAME(glGetSeparableFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glSeparableFilter2D) = (PFNGLSEPARABLEFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glSeparableFilter2D");
        if (NULL == GLH_CORE_NAME(glSeparableFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogram) = (PFNGLGETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogram");
        if (NULL == GLH_CORE_NAME(glGetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameterfv) = (PFNGLGETHISTOGRAMPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterfv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameteriv) = (PFNGLGETHISTOGRAMPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameteriv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmax) = (PFNGLGETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmax");
        if (NULL == GLH_CORE_NAME(glGetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameterfv) = (PFNGLGETMINMAXPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterfv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameteriv) = (PFNGLGETMINMAXPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameteriv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glHistogram) = (PFNGLHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glHistogram");
        if (NULL == GLH_CORE_NAME(glHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glMinmax) = (PFNGLMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glMinmax");
        if (NULL == GLH_CORE_NAME(glMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glResetHistogram) = (PFNGLRESETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glResetHistogram");
        if (NULL == GLH_CORE_NAME(glResetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glResetMinmax) = (PFNGLRESETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glResetMinmax");
        if (NULL == GLH_CORE_NAME(glResetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glTexImage3D) = (PFNGLTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage3D");
        if (NULL == GLH_CORE_NAME(glTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glTexSubImage3D) = (PFNGLTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyTexSubImage3D) = (PFNGLCOPYTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCopyTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glActiveTexture) = (PFNGLACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveTexture");
        if (NULL == GLH_CORE_NAME(glActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glClientActiveTexture) = (PFNGLCLIENTACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glClientActiveTexture");
        if (NULL == GLH_CORE_NAME(glClientActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1d) = (PFNGLMULTITEXCOORD1DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1dv) = (PFNGLMULTITEXCOORD1DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1f) = (PFNGLMULTITEXCOORD1FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1fv) = (PFNGLMULTITEXCOORD1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1i) = (PFNGLMULTITEXCOORD1IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1iv) = (PFNGLMULTITEXCOORD1IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1s) = (PFNGLMULTITEXCOORD1SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1sv) = (PFNGLMULTITEXCOORD1SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2d) = (PFNGLMULTITEXCOORD2DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2dv) = (PFNGLMULTITEXCOORD2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2f) = (PFNGLMULTITEXCOORD2FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2fv) = (PFNGLMULTITEXCOORD2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2i) = (PFNGLMULTITEXCOORD2IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2iv) = (PFNGLMULTITEXCOORD2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2s) = (PFNGLMULTITEXCOORD2SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2sv) = (PFNGLMULTITEXCOORD2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3d) = (PFNGLMULTITEXCOORD3DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3dv) = (PFNGLMULTITEXCOORD3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3f) = (PFNGLMULTITEXCOORD3FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3fv) = (PFNGLMULTITEXCOORD3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3i) = (PFNGLMULTITEXCOORD3IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3iv) = (PFNGLMULTITEXCOORD3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3s) = (PFNGLMULTITEXCOORD3SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3sv) = (PFNGLMULTITEXCOORD3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4d) = (PFNGLMULTITEXCOORD4DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4dv) = (PFNGLMULTITEXCOORD4DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4f) = (PFNGLMULTITEXCOORD4FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4fv) = (PFNGLMULTITEXCOORD4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4i) = (PFNGLMULTITEXCOORD4IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4iv) = (PFNGLMULTITEXCOORD4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4s) = (PFNGLMULTITEXCOORD4SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4sv) = (PFNGLMULTITEXCOORD4SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4sv))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixf) = (PFNGLLOADTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixd) = (PFNGLLOADTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixf) = (PFNGLMULTTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixd) = (PFNGLMULTTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glSampleCoverage) = (PFNGLSAMPLECOVERAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleCoverage");
        if (NULL == GLH_CORE_NAME(glSampleCoverage))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage3D) = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage2D) = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage1D) = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage3D) = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage2D) = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage1D) = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetCompressedTexImage) = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCompressedTexImage");
        if (NULL == GLH_CORE_NAME(glGetCompressedTexImage))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendFuncSeparate) = (PFNGLBLENDFUNCSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendFuncSeparate");
        if (NULL == GLH_CORE_NAME(glBlendFuncSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordf) = (PFNGLFOGCOORDFPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordf");
        if (NULL == GLH_CORE_NAME(glFogCoordf))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordfv) = (PFNGLFOGCOORDFVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordfv");
        if (NULL == GLH_CORE_NAME(glFogCoordfv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordd) = (PFNGLFOGCOORDDPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordd");
        if (NULL == GLH_CORE_NAME(glFogCoordd))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoorddv) = (PFNGLFOGCOORDDVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoorddv");
        if (NULL == GLH_CORE_NAME(glFogCoorddv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordPointer) = (PFNGLFOGCOORDPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordPointer");
        if (NULL == GLH_CORE_NAME(glFogCoordPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawArrays) = (PFNGLMULTIDRAWARRAYSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawArrays");
        if (NULL == GLH_CORE_NAME(glMultiDrawArrays))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawElements) = (PFNGLMULTIDRAWELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawElements");
        if (NULL == GLH_CORE_NAME(glMultiDrawElements))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterf) = (PFNGLPOINTPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterf");
        if (NULL == GLH_CORE_NAME(glPointParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterfv) = (PFNGLPOINTPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfv");
        if (NULL == GLH_CORE_NAME(glPointParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteri) = (PFNGLPOINTPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteri");
        if (NULL == GLH_CORE_NAME(glPointParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteriv) = (PFNGLPOINTPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteriv");
        if (NULL == GLH_CORE_NAME(glPointParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3b) = (PFNGLSECONDARYCOLOR3BPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3b");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3b))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3bv) = (PFNGLSECONDARYCOLOR3BVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3bv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3bv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3d) = (PFNGLSECONDARYCOLOR3DPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3d");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3d))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3dv) = (PFNGLSECONDARYCOLOR3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3dv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3f) = (PFNGLSECONDARYCOLOR3FPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3f");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3f))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3fv) = (PFNGLSECONDARYCOLOR3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3fv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3i) = (PFNGLSECONDARYCOLOR3IPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3i");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3i))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3iv) = (PFNGLSECONDARYCOLOR3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3iv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3s) = (PFNGLSECONDARYCOLOR3SPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3s");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3s))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3sv) = (PFNGLSECONDARYCOLOR3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3sv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ub) = (PFNGLSECONDARYCOLOR3UBPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ub");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ub))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ubv) = (PFNGLSECONDARYCOLOR3UBVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ubv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ubv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ui) = (PFNGLSECONDARYCOLOR3UIPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ui");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ui))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3uiv) = (PFNGLSECONDARYCOLOR3UIVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3uiv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3uiv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3us) = (PFNGLSECONDARYCOLOR3USPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3us");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3us))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3usv) = (PFNGLSECONDARYCOLOR3USVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3usv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3usv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColorPointer) = (PFNGLSECONDARYCOLORPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColorPointer");
        if (NULL == GLH_CORE_NAME(glSecondaryColorPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2d) = (PFNGLWINDOWPOS2DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2d");
        if (NULL == GLH_CORE_NAME(glWindowPos2d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2dv) = (PFNGLWINDOWPOS2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dv");
        if (NULL == GLH_CORE_NAME(glWindowPos2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2f) = (PFNGLWINDOWPOS2FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2f");
        if (NULL == GLH_CORE_NAME(glWindowPos2f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2fv) = (PFNGLWINDOWPOS2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fv");
        if (NULL == GLH_CORE_NAME(glWindowPos2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2i) = (PFNGLWINDOWPOS2IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2i");
        if (NULL == GLH_CORE_NAME(glWindowPos2i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2iv) = (PFNGLWINDOWPOS2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2iv");
        if (NULL == GLH_CORE_NAME(glWindowPos2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2s) = (PFNGLWINDOWPOS2SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2s");
        if (NULL == GLH_CORE_NAME(glWindowPos2s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2sv) = (PFNGLWINDOWPOS2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2sv");
        if (NULL == GLH_CORE_NAME(glWindowPos2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3d) = (PFNGLWINDOWPOS3DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3d");
        if (NULL == GLH_CORE_NAME(glWindowPos3d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3dv) = (PFNGLWINDOWPOS3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dv");
        if (NULL == GLH_CORE_NAME(glWindowPos3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3f) = (PFNGLWINDOWPOS3FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3f");
        if (NULL == GLH_CORE_NAME(glWindowPos3f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3fv) = (PFNGLWINDOWPOS3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fv");
        if (NULL == GLH_CORE_NAME(glWindowPos3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3i) = (PFNGLWINDOWPOS3IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3i");
        if (NULL == GLH_CORE_NAME(glWindowPos3i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3iv) = (PFNGLWINDOWPOS3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3iv");
        if (NULL == GLH_CORE_NAME(glWindowPos3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3s) = (PFNGLWINDOWPOS3SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3s");
        if (NULL == GLH_CORE_NAME(glWindowPos3s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3sv) = (PFNGLWINDOWPOS3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3sv");
        if (NULL == GLH_CORE_NAME(glWindowPos3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glGenQueries) = (PFNGLGENQUERIESPROC)GLH_EXT_GET_PROC_ADDRESS("glGenQueries");
        if (NULL == GLH_CORE_NAME(glGenQueries))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteQueries) = (PFNGLDELETEQUERIESPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteQueries");
        if (NULL == GLH_CORE_NAME(glDeleteQueries))
            return GL_FALSE;
        GLH_CORE_NAME(glIsQuery) = (PFNGLISQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glIsQuery");
        if (NULL == GLH_CORE_NAME(glIsQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glBeginQuery) = (PFNGLBEGINQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginQuery");
        if (NULL == GLH_CORE_NAME(glBeginQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glEndQuery) = (PFNGLENDQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glEndQuery");
        if (NULL == GLH_CORE_NAME(glEndQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryiv) = (PFNGLGETQUERYIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryiv");
        if (NULL == GLH_CORE_NAME(glGetQueryiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryObjectiv) = (PFNGLGETQUERYOBJECTIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectiv");
        if (NULL == GLH_CORE_NAME(glGetQueryObjectiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryObjectuiv) = (PFNGLGETQUERYOBJECTUIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectuiv");
        if (NULL == GLH_CORE_NAME(glGetQueryObjectuiv))
            return GL_FALSE;
        GLH_CORE_NAME(glBindBuffer) = (PFNGLBINDBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glBindBuffer");
        if (NULL == GLH_CORE_NAME(glBindBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteBuffers) = (PFNGLDELETEBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteBuffers");
        if (NULL == GLH_CORE_NAME(glDeleteBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glGenBuffers) = (PFNGLGENBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glGenBuffers");
        if (NULL == GLH_CORE_NAME(glGenBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glIsBuffer) = (PFNGLISBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glIsBuffer");
        if (NULL == GLH_CORE_NAME(glIsBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glBufferData) = (PFNGLBUFFERDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferData");
        if (NULL == GLH_CORE_NAME(glBufferData))
            return GL_FALSE;
        GLH_CORE_NAME(glBufferSubData) = (PFNGLBUFFERSUBDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferSubData");
        if (NULL == GLH_CORE_NAME(glBufferSubData))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferSubData) = (PFNGLGETBUFFERSUBDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferSubData");
        if (NULL == GLH_CORE_NAME(glGetBufferSubData))
            return GL_FALSE;
        GLH_CORE_NAME(glMapBuffer) = (PFNGLMAPBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glMapBuffer");
        if (NULL == GLH_CORE_NAME(glMapBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glUnmapBuffer) = (PFNGLUNMAPBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glUnmapBuffer");
        if (NULL == GLH_CORE_NAME(glUnmapBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferParameteriv) = (PFNGLGETBUFFERPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferParameteriv");
        if (NULL == GLH_CORE_NAME(glGetBufferParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferPointerv) = (PFNGLGETBUFFERPOINTERVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferPointerv");
        if (NULL == GLH_CORE_NAME(glGetBufferPointerv))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquationSeparate) = (PFNGLBLENDEQUATIONSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquationSeparate");
        if (NULL == GLH_CORE_NAME(glBlendEquationSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawBuffers) = (PFNGLDRAWBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawBuffers");
        if (NULL == GLH_CORE_NAME(glDrawBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glStencilOpSeparate) = (PFNGLSTENCILOPSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilOpSeparate");
        if (NULL == GLH_CORE_NAME(glStencilOpSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glStencilFuncSeparate) = (PFNGLSTENCILFUNCSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilFuncSeparate");
        if (NULL == GLH_CORE_NAME(glStencilFuncSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glStencilMaskSeparate) = (PFNGLSTENCILMASKSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilMaskSeparate");
        if (NULL == GLH_CORE_NAME(glStencilMaskSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glAttachShader) = (PFNGLATTACHSHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glAttachShader");
        if (NULL == GLH_CORE_NAME(glAttachShader))
            return GL_FALSE;
        GLH_CORE_NAME(glBindAttribLocation) = (PFNGLBINDATTRIBLOCATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBindAttribLocation");
        if (NULL == GLH_CORE_NAME(glBindAttribLocation))
            return GL_FALSE;
        GLH_CORE_NAME(glCompileShader) = (PFNGLCOMPILESHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glCompileShader");
        if (NULL == GLH_CORE_NAME(glCompileShader))
            return GL_FALSE;
        GLH_CORE_NAME(glCreateProgram) = (PFNGLCREATEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glCreateProgram");
        if (NULL == GLH_CORE_NAME(glCreateProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glCreateShader) = (PFNGLCREATESHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glCreateShader");
        if (NULL == GLH_CORE_NAME(glCreateShader))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteProgram) = (PFNGLDELETEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteProgram");
        if (NULL == GLH_CORE_NAME(glDeleteProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteShader) = (PFNGLDELETESHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteShader");
        if (NULL == GLH_CORE_NAME(glDeleteShader))
            return GL_FALSE;
        GLH_CORE_NAME(glDetachShader) = (PFNGLDETACHSHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glDetachShader");
        if (NULL == GLH_CORE_NAME(glDetachShader))
            return GL_FALSE;
        GLH_CORE_NAME(glDisableVertexAttribArray) = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)GLH_EXT_GET_PROC_ADDRESS("glDisableVertexAttribArray");
        if (NULL == GLH_CORE_NAME(glDisableVertexAttribArray))
            return GL_FALSE;
        GLH_CORE_NAME(glEnableVertexAttribArray) = (PFNGLENABLEVERTEXATTRIBARRAYPROC)GLH_EXT_GET_PROC_ADDRESS("glEnableVertexAttribArray");
        if (NULL == GLH_CORE_NAME(glEnableVertexAttribArray))
            return GL_FALSE;
        GLH_CORE_NAME(glGetActiveAttrib) = (PFNGLGETACTIVEATTRIBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetActiveAttrib");
        if (NULL == GLH_CORE_NAME(glGetActiveAttrib))
            return GL_FALSE;
        GLH_CORE_NAME(glGetActiveUniform) = (PFNGLGETACTIVEUNIFORMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetActiveUniform");
        if (NULL == GLH_CORE_NAME(glGetActiveUniform))
            return GL_FALSE;
        GLH_CORE_NAME(glGetAttachedShaders) = (PFNGLGETATTACHEDSHADERSPROC)GLH_EXT_GET_PROC_ADDRESS("glGetAttachedShaders");
        if (NULL == GLH_CORE_NAME(glGetAttachedShaders))
            return GL_FALSE;
        GLH_CORE_NAME(glGetAttribLocation) = (PFNGLGETATTRIBLOCATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glGetAttribLocation");
        if (NULL == GLH_CORE_NAME(glGetAttribLocation))
            return GL_FALSE;
        GLH_CORE_NAME(glGetProgramiv) = (PFNGLGETPROGRAMIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramiv");
        if (NULL == GLH_CORE_NAME(glGetProgramiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetProgramInfoLog) = (PFNGLGETPROGRAMINFOLOGPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramInfoLog");
        if (NULL == GLH_CORE_NAME(glGetProgramInfoLog))
            return GL_FALSE;
        GLH_CORE_NAME(glGetShaderiv) = (PFNGLGETSHADERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetShaderiv");
        if (NULL == GLH_CORE_NAME(glGetShaderiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetShaderInfoLog) = (PFNGLGETSHADERINFOLOGPROC)GLH_EXT_GET_PROC_ADDRESS("glGetShaderInfoLog");
        if (NULL == GLH_CORE_NAME(glGetShaderInfoLog))
            return GL_FALSE;
        GLH_CORE_NAME(glGetShaderSource) = (PFNGLGETSHADERSOURCEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetShaderSource");
        if (NULL == GLH_CORE_NAME(glGetShaderSource))
            return GL_FALSE;
        GLH_CORE_NAME(glGetUniformLocation) = (PFNGLGETUNIFORMLOCATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformLocation");
        if (NULL == GLH_CORE_NAME(glGetUniformLocation))
            return GL_FALSE;
        GLH_CORE_NAME(glGetUniformfv) = (PFNGLGETUNIFORMFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformfv");
        if (NULL == GLH_CORE_NAME(glGetUniformfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetUniformiv) = (PFNGLGETUNIFORMIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformiv");
        if (NULL == GLH_CORE_NAME(glGetUniformiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribdv) = (PFNGLGETVERTEXATTRIBDVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribdv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribdv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribfv) = (PFNGLGETVERTEXATTRIBFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribfv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribiv) = (PFNGLGETVERTEXATTRIBIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribiv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribPointerv) = (PFNGLGETVERTEXATTRIBPOINTERVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribPointerv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribPointerv))
            return GL_FALSE;
        GLH_CORE_NAME(glIsProgram) = (PFNGLISPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glIsProgram");
        if (NULL == GLH_CORE_NAME(glIsProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glIsShader) = (PFNGLISSHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glIsShader");
        if (NULL == GLH_CORE_NAME(glIsShader))
            return GL_FALSE;
        GLH_CORE_NAME(glLinkProgram) = (PFNGLLINKPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glLinkProgram");
        if (NULL == GLH_CORE_NAME(glLinkProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glShaderSource) = (PFNGLSHADERSOURCEPROC)GLH_EXT_GET_PROC_ADDRESS("glShaderSource");
        if (NULL == GLH_CORE_NAME(glShaderSource))
            return GL_FALSE;
        GLH_CORE_NAME(glUseProgram) = (PFNGLUSEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glUseProgram");
        if (NULL == GLH_CORE_NAME(glUseProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1f) = (PFNGLUNIFORM1FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1f");
        if (NULL == GLH_CORE_NAME(glUniform1f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2f) = (PFNGLUNIFORM2FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2f");
        if (NULL == GLH_CORE_NAME(glUniform2f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3f) = (PFNGLUNIFORM3FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3f");
        if (NULL == GLH_CORE_NAME(glUniform3f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4f) = (PFNGLUNIFORM4FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4f");
        if (NULL == GLH_CORE_NAME(glUniform4f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1i) = (PFNGLUNIFORM1IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1i");
        if (NULL == GLH_CORE_NAME(glUniform1i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2i) = (PFNGLUNIFORM2IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2i");
        if (NULL == GLH_CORE_NAME(glUniform2i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3i) = (PFNGLUNIFORM3IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3i");
        if (NULL == GLH_CORE_NAME(glUniform3i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4i) = (PFNGLUNIFORM4IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4i");
        if (NULL == GLH_CORE_NAME(glUniform4i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1fv) = (PFNGLUNIFORM1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1fv");
        if (NULL == GLH_CORE_NAME(glUniform1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2fv) = (PFNGLUNIFORM2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2fv");
        if (NULL == GLH_CORE_NAME(glUniform2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3fv) = (PFNGLUNIFORM3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3fv");
        if (NULL == GLH_CORE_NAME(glUniform3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4fv) = (PFNGLUNIFORM4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4fv");
        if (NULL == GLH_CORE_NAME(glUniform4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1iv) = (PFNGLUNIFORM1IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1iv");
        if (NULL == GLH_CORE_NAME(glUniform1iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2iv) = (PFNGLUNIFORM2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2iv");
        if (NULL == GLH_CORE_NAME(glUniform2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3iv) = (PFNGLUNIFORM3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3iv");
        if (NULL == GLH_CORE_NAME(glUniform3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4iv) = (PFNGLUNIFORM4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4iv");
        if (NULL == GLH_CORE_NAME(glUniform4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix2fv) = (PFNGLUNIFORMMATRIX2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix2fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix3fv) = (PFNGLUNIFORMMATRIX3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix3fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix4fv) = (PFNGLUNIFORMMATRIX4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix4fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glValidateProgram) = (PFNGLVALIDATEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glValidateProgram");
        if (NULL == GLH_CORE_NAME(glValidateProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1d) = (PFNGLVERTEXATTRIB1DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1dv) = (PFNGLVERTEXATTRIB1DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1f) = (PFNGLVERTEXATTRIB1FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1fv) = (PFNGLVERTEXATTRIB1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1s) = (PFNGLVERTEXATTRIB1SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1sv) = (PFNGLVERTEXATTRIB1SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2d) = (PFNGLVERTEXATTRIB2DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2dv) = (PFNGLVERTEXATTRIB2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2f) = (PFNGLVERTEXATTRIB2FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2fv) = (PFNGLVERTEXATTRIB2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2s) = (PFNGLVERTEXATTRIB2SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2sv) = (PFNGLVERTEXATTRIB2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3d) = (PFNGLVERTEXATTRIB3DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3dv) = (PFNGLVERTEXATTRIB3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3f) = (PFNGLVERTEXATTRIB3FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3fv) = (PFNGLVERTEXATTRIB3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3s) = (PFNGLVERTEXATTRIB3SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3sv) = (PFNGLVERTEXATTRIB3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nbv) = (PFNGLVERTEXATTRIB4NBVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nbv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nbv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Niv) = (PFNGLVERTEXATTRIB4NIVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Niv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Niv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nsv) = (PFNGLVERTEXATTRIB4NSVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nsv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nsv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nub) = (PFNGLVERTEXATTRIB4NUBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nub");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nub))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nubv) = (PFNGLVERTEXATTRIB4NUBVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nubv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nubv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nuiv) = (PFNGLVERTEXATTRIB4NUIVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nuiv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nuiv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nusv) = (PFNGLVERTEXATTRIB4NUSVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nusv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nusv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4bv) = (PFNGLVERTEXATTRIB4BVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4bv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4bv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4d) = (PFNGLVERTEXATTRIB4DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4dv) = (PFNGLVERTEXATTRIB4DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4f) = (PFNGLVERTEXATTRIB4FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4fv) = (PFNGLVERTEXATTRIB4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4iv) = (PFNGLVERTEXATTRIB4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4iv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4s) = (PFNGLVERTEXATTRIB4SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4sv) = (PFNGLVERTEXATTRIB4SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4ubv) = (PFNGLVERTEXATTRIB4UBVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4ubv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4ubv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4uiv) = (PFNGLVERTEXATTRIB4UIVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4uiv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4uiv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4usv) = (PFNGLVERTEXATTRIB4USVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4usv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4usv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttribPointer) = (PFNGLVERTEXATTRIBPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribPointer");
        if (NULL == GLH_CORE_NAME(glVertexAttribPointer))
            return GL_FALSE;
#endif

#if defined(GL_VERSION_2_1)
    } else if (0 == strcmp(extension, "GL_VERSION_2_1")) {
        GLH_CORE_NAME(glBlendColor) = (PFNGLBLENDCOLORPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColor");
        if (NULL == GLH_CORE_NAME(glBlendColor))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquation) = (PFNGLBLENDEQUATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquation");
        if (NULL == GLH_CORE_NAME(glBlendEquation))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawRangeElements) = (PFNGLDRAWRANGEELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElements");
        if (NULL == GLH_CORE_NAME(glDrawRangeElements))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTable) = (PFNGLCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTable");
        if (NULL == GLH_CORE_NAME(glColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameterfv) = (PFNGLCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorTableParameteriv) = (PFNGLCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorTable) = (PFNGLCOPYCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorTable");
        if (NULL == GLH_CORE_NAME(glCopyColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTable) = (PFNGLGETCOLORTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTable");
        if (NULL == GLH_CORE_NAME(glGetColorTable))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameterfv) = (PFNGLGETCOLORTABLEPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetColorTableParameteriv) = (PFNGLGETCOLORTABLEPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameteriv");
        if (NULL == GLH_CORE_NAME(glGetColorTableParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glColorSubTable) = (PFNGLCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glColorSubTable");
        if (NULL == GLH_CORE_NAME(glColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyColorSubTable) = (PFNGLCOPYCOLORSUBTABLEPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorSubTable");
        if (NULL == GLH_CORE_NAME(glCopyColorSubTable))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter1D) = (PFNGLCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionFilter2D) = (PFNGLCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterf) = (PFNGLCONVOLUTIONPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterf");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameterfv) = (PFNGLCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteri) = (PFNGLCONVOLUTIONPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteri");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glConvolutionParameteriv) = (PFNGLCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter1D) = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter1D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyConvolutionFilter2D) = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter2D");
        if (NULL == GLH_CORE_NAME(glCopyConvolutionFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionFilter) = (PFNGLGETCONVOLUTIONFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionFilter");
        if (NULL == GLH_CORE_NAME(glGetConvolutionFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameterfv) = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterfv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetConvolutionParameteriv) = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameteriv");
        if (NULL == GLH_CORE_NAME(glGetConvolutionParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetSeparableFilter) = (PFNGLGETSEPARABLEFILTERPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSeparableFilter");
        if (NULL == GLH_CORE_NAME(glGetSeparableFilter))
            return GL_FALSE;
        GLH_CORE_NAME(glSeparableFilter2D) = (PFNGLSEPARABLEFILTER2DPROC)GLH_EXT_GET_PROC_ADDRESS("glSeparableFilter2D");
        if (NULL == GLH_CORE_NAME(glSeparableFilter2D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogram) = (PFNGLGETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogram");
        if (NULL == GLH_CORE_NAME(glGetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameterfv) = (PFNGLGETHISTOGRAMPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterfv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetHistogramParameteriv) = (PFNGLGETHISTOGRAMPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameteriv");
        if (NULL == GLH_CORE_NAME(glGetHistogramParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmax) = (PFNGLGETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmax");
        if (NULL == GLH_CORE_NAME(glGetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameterfv) = (PFNGLGETMINMAXPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterfv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetMinmaxParameteriv) = (PFNGLGETMINMAXPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameteriv");
        if (NULL == GLH_CORE_NAME(glGetMinmaxParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glHistogram) = (PFNGLHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glHistogram");
        if (NULL == GLH_CORE_NAME(glHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glMinmax) = (PFNGLMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glMinmax");
        if (NULL == GLH_CORE_NAME(glMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glResetHistogram) = (PFNGLRESETHISTOGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glResetHistogram");
        if (NULL == GLH_CORE_NAME(glResetHistogram))
            return GL_FALSE;
        GLH_CORE_NAME(glResetMinmax) = (PFNGLRESETMINMAXPROC)GLH_EXT_GET_PROC_ADDRESS("glResetMinmax");
        if (NULL == GLH_CORE_NAME(glResetMinmax))
            return GL_FALSE;
        GLH_CORE_NAME(glTexImage3D) = (PFNGLTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage3D");
        if (NULL == GLH_CORE_NAME(glTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glTexSubImage3D) = (PFNGLTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCopyTexSubImage3D) = (PFNGLCOPYTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCopyTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glActiveTexture) = (PFNGLACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveTexture");
        if (NULL == GLH_CORE_NAME(glActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glClientActiveTexture) = (PFNGLCLIENTACTIVETEXTUREPROC)GLH_EXT_GET_PROC_ADDRESS("glClientActiveTexture");
        if (NULL == GLH_CORE_NAME(glClientActiveTexture))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1d) = (PFNGLMULTITEXCOORD1DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1dv) = (PFNGLMULTITEXCOORD1DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1f) = (PFNGLMULTITEXCOORD1FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1fv) = (PFNGLMULTITEXCOORD1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1i) = (PFNGLMULTITEXCOORD1IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1iv) = (PFNGLMULTITEXCOORD1IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1s) = (PFNGLMULTITEXCOORD1SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord1sv) = (PFNGLMULTITEXCOORD1SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord1sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2d) = (PFNGLMULTITEXCOORD2DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2dv) = (PFNGLMULTITEXCOORD2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2f) = (PFNGLMULTITEXCOORD2FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2fv) = (PFNGLMULTITEXCOORD2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2i) = (PFNGLMULTITEXCOORD2IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2iv) = (PFNGLMULTITEXCOORD2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2s) = (PFNGLMULTITEXCOORD2SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord2sv) = (PFNGLMULTITEXCOORD2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3d) = (PFNGLMULTITEXCOORD3DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3dv) = (PFNGLMULTITEXCOORD3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3f) = (PFNGLMULTITEXCOORD3FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3fv) = (PFNGLMULTITEXCOORD3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3i) = (PFNGLMULTITEXCOORD3IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3iv) = (PFNGLMULTITEXCOORD3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3s) = (PFNGLMULTITEXCOORD3SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord3sv) = (PFNGLMULTITEXCOORD3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4d) = (PFNGLMULTITEXCOORD4DPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4d");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4d))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4dv) = (PFNGLMULTITEXCOORD4DVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4dv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4f) = (PFNGLMULTITEXCOORD4FPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4f");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4f))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4fv) = (PFNGLMULTITEXCOORD4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4i) = (PFNGLMULTITEXCOORD4IPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4i");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4i))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4iv) = (PFNGLMULTITEXCOORD4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4iv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4s) = (PFNGLMULTITEXCOORD4SPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4s");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4s))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiTexCoord4sv) = (PFNGLMULTITEXCOORD4SVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4sv");
        if (NULL == GLH_CORE_NAME(glMultiTexCoord4sv))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixf) = (PFNGLLOADTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glLoadTransposeMatrixd) = (PFNGLLOADTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glLoadTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixf) = (PFNGLMULTTRANSPOSEMATRIXFPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixf");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixf))
            return GL_FALSE;
        GLH_CORE_NAME(glMultTransposeMatrixd) = (PFNGLMULTTRANSPOSEMATRIXDPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixd");
        if (NULL == GLH_CORE_NAME(glMultTransposeMatrixd))
            return GL_FALSE;
        GLH_CORE_NAME(glSampleCoverage) = (PFNGLSAMPLECOVERAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleCoverage");
        if (NULL == GLH_CORE_NAME(glSampleCoverage))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage3D) = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage2D) = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexImage1D) = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage3D) = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage3D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage3D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage2D) = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage2D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage2D))
            return GL_FALSE;
        GLH_CORE_NAME(glCompressedTexSubImage1D) = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage1D");
        if (NULL == GLH_CORE_NAME(glCompressedTexSubImage1D))
            return GL_FALSE;
        GLH_CORE_NAME(glGetCompressedTexImage) = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCompressedTexImage");
        if (NULL == GLH_CORE_NAME(glGetCompressedTexImage))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendFuncSeparate) = (PFNGLBLENDFUNCSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendFuncSeparate");
        if (NULL == GLH_CORE_NAME(glBlendFuncSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordf) = (PFNGLFOGCOORDFPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordf");
        if (NULL == GLH_CORE_NAME(glFogCoordf))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordfv) = (PFNGLFOGCOORDFVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordfv");
        if (NULL == GLH_CORE_NAME(glFogCoordfv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordd) = (PFNGLFOGCOORDDPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordd");
        if (NULL == GLH_CORE_NAME(glFogCoordd))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoorddv) = (PFNGLFOGCOORDDVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoorddv");
        if (NULL == GLH_CORE_NAME(glFogCoorddv))
            return GL_FALSE;
        GLH_CORE_NAME(glFogCoordPointer) = (PFNGLFOGCOORDPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordPointer");
        if (NULL == GLH_CORE_NAME(glFogCoordPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawArrays) = (PFNGLMULTIDRAWARRAYSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawArrays");
        if (NULL == GLH_CORE_NAME(glMultiDrawArrays))
            return GL_FALSE;
        GLH_CORE_NAME(glMultiDrawElements) = (PFNGLMULTIDRAWELEMENTSPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawElements");
        if (NULL == GLH_CORE_NAME(glMultiDrawElements))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterf) = (PFNGLPOINTPARAMETERFPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterf");
        if (NULL == GLH_CORE_NAME(glPointParameterf))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameterfv) = (PFNGLPOINTPARAMETERFVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfv");
        if (NULL == GLH_CORE_NAME(glPointParameterfv))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteri) = (PFNGLPOINTPARAMETERIPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteri");
        if (NULL == GLH_CORE_NAME(glPointParameteri))
            return GL_FALSE;
        GLH_CORE_NAME(glPointParameteriv) = (PFNGLPOINTPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteriv");
        if (NULL == GLH_CORE_NAME(glPointParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3b) = (PFNGLSECONDARYCOLOR3BPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3b");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3b))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3bv) = (PFNGLSECONDARYCOLOR3BVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3bv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3bv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3d) = (PFNGLSECONDARYCOLOR3DPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3d");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3d))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3dv) = (PFNGLSECONDARYCOLOR3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3dv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3f) = (PFNGLSECONDARYCOLOR3FPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3f");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3f))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3fv) = (PFNGLSECONDARYCOLOR3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3fv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3i) = (PFNGLSECONDARYCOLOR3IPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3i");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3i))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3iv) = (PFNGLSECONDARYCOLOR3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3iv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3s) = (PFNGLSECONDARYCOLOR3SPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3s");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3s))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3sv) = (PFNGLSECONDARYCOLOR3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3sv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ub) = (PFNGLSECONDARYCOLOR3UBPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ub");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ub))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ubv) = (PFNGLSECONDARYCOLOR3UBVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ubv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ubv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3ui) = (PFNGLSECONDARYCOLOR3UIPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ui");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3ui))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3uiv) = (PFNGLSECONDARYCOLOR3UIVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3uiv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3uiv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3us) = (PFNGLSECONDARYCOLOR3USPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3us");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3us))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColor3usv) = (PFNGLSECONDARYCOLOR3USVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3usv");
        if (NULL == GLH_CORE_NAME(glSecondaryColor3usv))
            return GL_FALSE;
        GLH_CORE_NAME(glSecondaryColorPointer) = (PFNGLSECONDARYCOLORPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColorPointer");
        if (NULL == GLH_CORE_NAME(glSecondaryColorPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2d) = (PFNGLWINDOWPOS2DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2d");
        if (NULL == GLH_CORE_NAME(glWindowPos2d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2dv) = (PFNGLWINDOWPOS2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dv");
        if (NULL == GLH_CORE_NAME(glWindowPos2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2f) = (PFNGLWINDOWPOS2FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2f");
        if (NULL == GLH_CORE_NAME(glWindowPos2f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2fv) = (PFNGLWINDOWPOS2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fv");
        if (NULL == GLH_CORE_NAME(glWindowPos2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2i) = (PFNGLWINDOWPOS2IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2i");
        if (NULL == GLH_CORE_NAME(glWindowPos2i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2iv) = (PFNGLWINDOWPOS2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2iv");
        if (NULL == GLH_CORE_NAME(glWindowPos2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2s) = (PFNGLWINDOWPOS2SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2s");
        if (NULL == GLH_CORE_NAME(glWindowPos2s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos2sv) = (PFNGLWINDOWPOS2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2sv");
        if (NULL == GLH_CORE_NAME(glWindowPos2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3d) = (PFNGLWINDOWPOS3DPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3d");
        if (NULL == GLH_CORE_NAME(glWindowPos3d))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3dv) = (PFNGLWINDOWPOS3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dv");
        if (NULL == GLH_CORE_NAME(glWindowPos3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3f) = (PFNGLWINDOWPOS3FPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3f");
        if (NULL == GLH_CORE_NAME(glWindowPos3f))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3fv) = (PFNGLWINDOWPOS3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fv");
        if (NULL == GLH_CORE_NAME(glWindowPos3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3i) = (PFNGLWINDOWPOS3IPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3i");
        if (NULL == GLH_CORE_NAME(glWindowPos3i))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3iv) = (PFNGLWINDOWPOS3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3iv");
        if (NULL == GLH_CORE_NAME(glWindowPos3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3s) = (PFNGLWINDOWPOS3SPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3s");
        if (NULL == GLH_CORE_NAME(glWindowPos3s))
            return GL_FALSE;
        GLH_CORE_NAME(glWindowPos3sv) = (PFNGLWINDOWPOS3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3sv");
        if (NULL == GLH_CORE_NAME(glWindowPos3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glGenQueries) = (PFNGLGENQUERIESPROC)GLH_EXT_GET_PROC_ADDRESS("glGenQueries");
        if (NULL == GLH_CORE_NAME(glGenQueries))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteQueries) = (PFNGLDELETEQUERIESPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteQueries");
        if (NULL == GLH_CORE_NAME(glDeleteQueries))
            return GL_FALSE;
        GLH_CORE_NAME(glIsQuery) = (PFNGLISQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glIsQuery");
        if (NULL == GLH_CORE_NAME(glIsQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glBeginQuery) = (PFNGLBEGINQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginQuery");
        if (NULL == GLH_CORE_NAME(glBeginQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glEndQuery) = (PFNGLENDQUERYPROC)GLH_EXT_GET_PROC_ADDRESS("glEndQuery");
        if (NULL == GLH_CORE_NAME(glEndQuery))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryiv) = (PFNGLGETQUERYIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryiv");
        if (NULL == GLH_CORE_NAME(glGetQueryiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryObjectiv) = (PFNGLGETQUERYOBJECTIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectiv");
        if (NULL == GLH_CORE_NAME(glGetQueryObjectiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetQueryObjectuiv) = (PFNGLGETQUERYOBJECTUIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectuiv");
        if (NULL == GLH_CORE_NAME(glGetQueryObjectuiv))
            return GL_FALSE;
        GLH_CORE_NAME(glBindBuffer) = (PFNGLBINDBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glBindBuffer");
        if (NULL == GLH_CORE_NAME(glBindBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteBuffers) = (PFNGLDELETEBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteBuffers");
        if (NULL == GLH_CORE_NAME(glDeleteBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glGenBuffers) = (PFNGLGENBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glGenBuffers");
        if (NULL == GLH_CORE_NAME(glGenBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glIsBuffer) = (PFNGLISBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glIsBuffer");
        if (NULL == GLH_CORE_NAME(glIsBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glBufferData) = (PFNGLBUFFERDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferData");
        if (NULL == GLH_CORE_NAME(glBufferData))
            return GL_FALSE;
        GLH_CORE_NAME(glBufferSubData) = (PFNGLBUFFERSUBDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferSubData");
        if (NULL == GLH_CORE_NAME(glBufferSubData))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferSubData) = (PFNGLGETBUFFERSUBDATAPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferSubData");
        if (NULL == GLH_CORE_NAME(glGetBufferSubData))
            return GL_FALSE;
        GLH_CORE_NAME(glMapBuffer) = (PFNGLMAPBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glMapBuffer");
        if (NULL == GLH_CORE_NAME(glMapBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glUnmapBuffer) = (PFNGLUNMAPBUFFERPROC)GLH_EXT_GET_PROC_ADDRESS("glUnmapBuffer");
        if (NULL == GLH_CORE_NAME(glUnmapBuffer))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferParameteriv) = (PFNGLGETBUFFERPARAMETERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferParameteriv");
        if (NULL == GLH_CORE_NAME(glGetBufferParameteriv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetBufferPointerv) = (PFNGLGETBUFFERPOINTERVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferPointerv");
        if (NULL == GLH_CORE_NAME(glGetBufferPointerv))
            return GL_FALSE;
        GLH_CORE_NAME(glBlendEquationSeparate) = (PFNGLBLENDEQUATIONSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquationSeparate");
        if (NULL == GLH_CORE_NAME(glBlendEquationSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glDrawBuffers) = (PFNGLDRAWBUFFERSPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawBuffers");
        if (NULL == GLH_CORE_NAME(glDrawBuffers))
            return GL_FALSE;
        GLH_CORE_NAME(glStencilOpSeparate) = (PFNGLSTENCILOPSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilOpSeparate");
        if (NULL == GLH_CORE_NAME(glStencilOpSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glStencilFuncSeparate) = (PFNGLSTENCILFUNCSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilFuncSeparate");
        if (NULL == GLH_CORE_NAME(glStencilFuncSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glStencilMaskSeparate) = (PFNGLSTENCILMASKSEPARATEPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilMaskSeparate");
        if (NULL == GLH_CORE_NAME(glStencilMaskSeparate))
            return GL_FALSE;
        GLH_CORE_NAME(glAttachShader) = (PFNGLATTACHSHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glAttachShader");
        if (NULL == GLH_CORE_NAME(glAttachShader))
            return GL_FALSE;
        GLH_CORE_NAME(glBindAttribLocation) = (PFNGLBINDATTRIBLOCATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glBindAttribLocation");
        if (NULL == GLH_CORE_NAME(glBindAttribLocation))
            return GL_FALSE;
        GLH_CORE_NAME(glCompileShader) = (PFNGLCOMPILESHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glCompileShader");
        if (NULL == GLH_CORE_NAME(glCompileShader))
            return GL_FALSE;
        GLH_CORE_NAME(glCreateProgram) = (PFNGLCREATEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glCreateProgram");
        if (NULL == GLH_CORE_NAME(glCreateProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glCreateShader) = (PFNGLCREATESHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glCreateShader");
        if (NULL == GLH_CORE_NAME(glCreateShader))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteProgram) = (PFNGLDELETEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteProgram");
        if (NULL == GLH_CORE_NAME(glDeleteProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glDeleteShader) = (PFNGLDELETESHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteShader");
        if (NULL == GLH_CORE_NAME(glDeleteShader))
            return GL_FALSE;
        GLH_CORE_NAME(glDetachShader) = (PFNGLDETACHSHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glDetachShader");
        if (NULL == GLH_CORE_NAME(glDetachShader))
            return GL_FALSE;
        GLH_CORE_NAME(glDisableVertexAttribArray) = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)GLH_EXT_GET_PROC_ADDRESS("glDisableVertexAttribArray");
        if (NULL == GLH_CORE_NAME(glDisableVertexAttribArray))
            return GL_FALSE;
        GLH_CORE_NAME(glEnableVertexAttribArray) = (PFNGLENABLEVERTEXATTRIBARRAYPROC)GLH_EXT_GET_PROC_ADDRESS("glEnableVertexAttribArray");
        if (NULL == GLH_CORE_NAME(glEnableVertexAttribArray))
            return GL_FALSE;
        GLH_CORE_NAME(glGetActiveAttrib) = (PFNGLGETACTIVEATTRIBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetActiveAttrib");
        if (NULL == GLH_CORE_NAME(glGetActiveAttrib))
            return GL_FALSE;
        GLH_CORE_NAME(glGetActiveUniform) = (PFNGLGETACTIVEUNIFORMPROC)GLH_EXT_GET_PROC_ADDRESS("glGetActiveUniform");
        if (NULL == GLH_CORE_NAME(glGetActiveUniform))
            return GL_FALSE;
        GLH_CORE_NAME(glGetAttachedShaders) = (PFNGLGETATTACHEDSHADERSPROC)GLH_EXT_GET_PROC_ADDRESS("glGetAttachedShaders");
        if (NULL == GLH_CORE_NAME(glGetAttachedShaders))
            return GL_FALSE;
        GLH_CORE_NAME(glGetAttribLocation) = (PFNGLGETATTRIBLOCATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glGetAttribLocation");
        if (NULL == GLH_CORE_NAME(glGetAttribLocation))
            return GL_FALSE;
        GLH_CORE_NAME(glGetProgramiv) = (PFNGLGETPROGRAMIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramiv");
        if (NULL == GLH_CORE_NAME(glGetProgramiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetProgramInfoLog) = (PFNGLGETPROGRAMINFOLOGPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramInfoLog");
        if (NULL == GLH_CORE_NAME(glGetProgramInfoLog))
            return GL_FALSE;
        GLH_CORE_NAME(glGetShaderiv) = (PFNGLGETSHADERIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetShaderiv");
        if (NULL == GLH_CORE_NAME(glGetShaderiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetShaderInfoLog) = (PFNGLGETSHADERINFOLOGPROC)GLH_EXT_GET_PROC_ADDRESS("glGetShaderInfoLog");
        if (NULL == GLH_CORE_NAME(glGetShaderInfoLog))
            return GL_FALSE;
        GLH_CORE_NAME(glGetShaderSource) = (PFNGLGETSHADERSOURCEPROC)GLH_EXT_GET_PROC_ADDRESS("glGetShaderSource");
        if (NULL == GLH_CORE_NAME(glGetShaderSource))
            return GL_FALSE;
        GLH_CORE_NAME(glGetUniformLocation) = (PFNGLGETUNIFORMLOCATIONPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformLocation");
        if (NULL == GLH_CORE_NAME(glGetUniformLocation))
            return GL_FALSE;
        GLH_CORE_NAME(glGetUniformfv) = (PFNGLGETUNIFORMFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformfv");
        if (NULL == GLH_CORE_NAME(glGetUniformfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetUniformiv) = (PFNGLGETUNIFORMIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformiv");
        if (NULL == GLH_CORE_NAME(glGetUniformiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribdv) = (PFNGLGETVERTEXATTRIBDVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribdv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribdv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribfv) = (PFNGLGETVERTEXATTRIBFVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribfv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribfv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribiv) = (PFNGLGETVERTEXATTRIBIVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribiv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribiv))
            return GL_FALSE;
        GLH_CORE_NAME(glGetVertexAttribPointerv) = (PFNGLGETVERTEXATTRIBPOINTERVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribPointerv");
        if (NULL == GLH_CORE_NAME(glGetVertexAttribPointerv))
            return GL_FALSE;
        GLH_CORE_NAME(glIsProgram) = (PFNGLISPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glIsProgram");
        if (NULL == GLH_CORE_NAME(glIsProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glIsShader) = (PFNGLISSHADERPROC)GLH_EXT_GET_PROC_ADDRESS("glIsShader");
        if (NULL == GLH_CORE_NAME(glIsShader))
            return GL_FALSE;
        GLH_CORE_NAME(glLinkProgram) = (PFNGLLINKPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glLinkProgram");
        if (NULL == GLH_CORE_NAME(glLinkProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glShaderSource) = (PFNGLSHADERSOURCEPROC)GLH_EXT_GET_PROC_ADDRESS("glShaderSource");
        if (NULL == GLH_CORE_NAME(glShaderSource))
            return GL_FALSE;
        GLH_CORE_NAME(glUseProgram) = (PFNGLUSEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glUseProgram");
        if (NULL == GLH_CORE_NAME(glUseProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1f) = (PFNGLUNIFORM1FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1f");
        if (NULL == GLH_CORE_NAME(glUniform1f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2f) = (PFNGLUNIFORM2FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2f");
        if (NULL == GLH_CORE_NAME(glUniform2f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3f) = (PFNGLUNIFORM3FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3f");
        if (NULL == GLH_CORE_NAME(glUniform3f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4f) = (PFNGLUNIFORM4FPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4f");
        if (NULL == GLH_CORE_NAME(glUniform4f))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1i) = (PFNGLUNIFORM1IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1i");
        if (NULL == GLH_CORE_NAME(glUniform1i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2i) = (PFNGLUNIFORM2IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2i");
        if (NULL == GLH_CORE_NAME(glUniform2i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3i) = (PFNGLUNIFORM3IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3i");
        if (NULL == GLH_CORE_NAME(glUniform3i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4i) = (PFNGLUNIFORM4IPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4i");
        if (NULL == GLH_CORE_NAME(glUniform4i))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1fv) = (PFNGLUNIFORM1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1fv");
        if (NULL == GLH_CORE_NAME(glUniform1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2fv) = (PFNGLUNIFORM2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2fv");
        if (NULL == GLH_CORE_NAME(glUniform2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3fv) = (PFNGLUNIFORM3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3fv");
        if (NULL == GLH_CORE_NAME(glUniform3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4fv) = (PFNGLUNIFORM4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4fv");
        if (NULL == GLH_CORE_NAME(glUniform4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform1iv) = (PFNGLUNIFORM1IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1iv");
        if (NULL == GLH_CORE_NAME(glUniform1iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform2iv) = (PFNGLUNIFORM2IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2iv");
        if (NULL == GLH_CORE_NAME(glUniform2iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform3iv) = (PFNGLUNIFORM3IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3iv");
        if (NULL == GLH_CORE_NAME(glUniform3iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniform4iv) = (PFNGLUNIFORM4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4iv");
        if (NULL == GLH_CORE_NAME(glUniform4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix2fv) = (PFNGLUNIFORMMATRIX2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix2fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix3fv) = (PFNGLUNIFORMMATRIX3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix3fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix4fv) = (PFNGLUNIFORMMATRIX4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix4fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glValidateProgram) = (PFNGLVALIDATEPROGRAMPROC)GLH_EXT_GET_PROC_ADDRESS("glValidateProgram");
        if (NULL == GLH_CORE_NAME(glValidateProgram))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1d) = (PFNGLVERTEXATTRIB1DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1dv) = (PFNGLVERTEXATTRIB1DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1f) = (PFNGLVERTEXATTRIB1FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1fv) = (PFNGLVERTEXATTRIB1FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1s) = (PFNGLVERTEXATTRIB1SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib1sv) = (PFNGLVERTEXATTRIB1SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib1sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2d) = (PFNGLVERTEXATTRIB2DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2dv) = (PFNGLVERTEXATTRIB2DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2f) = (PFNGLVERTEXATTRIB2FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2fv) = (PFNGLVERTEXATTRIB2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2s) = (PFNGLVERTEXATTRIB2SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib2sv) = (PFNGLVERTEXATTRIB2SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib2sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3d) = (PFNGLVERTEXATTRIB3DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3dv) = (PFNGLVERTEXATTRIB3DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3f) = (PFNGLVERTEXATTRIB3FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3fv) = (PFNGLVERTEXATTRIB3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3s) = (PFNGLVERTEXATTRIB3SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib3sv) = (PFNGLVERTEXATTRIB3SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib3sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nbv) = (PFNGLVERTEXATTRIB4NBVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nbv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nbv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Niv) = (PFNGLVERTEXATTRIB4NIVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Niv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Niv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nsv) = (PFNGLVERTEXATTRIB4NSVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nsv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nsv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nub) = (PFNGLVERTEXATTRIB4NUBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nub");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nub))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nubv) = (PFNGLVERTEXATTRIB4NUBVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nubv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nubv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nuiv) = (PFNGLVERTEXATTRIB4NUIVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nuiv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nuiv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4Nusv) = (PFNGLVERTEXATTRIB4NUSVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4Nusv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4Nusv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4bv) = (PFNGLVERTEXATTRIB4BVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4bv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4bv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4d) = (PFNGLVERTEXATTRIB4DPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4d");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4d))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4dv) = (PFNGLVERTEXATTRIB4DVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4dv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4dv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4f) = (PFNGLVERTEXATTRIB4FPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4f");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4f))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4fv) = (PFNGLVERTEXATTRIB4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4fv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4iv) = (PFNGLVERTEXATTRIB4IVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4iv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4iv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4s) = (PFNGLVERTEXATTRIB4SPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4s");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4s))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4sv) = (PFNGLVERTEXATTRIB4SVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4sv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4sv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4ubv) = (PFNGLVERTEXATTRIB4UBVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4ubv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4ubv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4uiv) = (PFNGLVERTEXATTRIB4UIVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4uiv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4uiv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttrib4usv) = (PFNGLVERTEXATTRIB4USVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4usv");
        if (NULL == GLH_CORE_NAME(glVertexAttrib4usv))
            return GL_FALSE;
        GLH_CORE_NAME(glVertexAttribPointer) = (PFNGLVERTEXATTRIBPOINTERPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribPointer");
        if (NULL == GLH_CORE_NAME(glVertexAttribPointer))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix2x3fv) = (PFNGLUNIFORMMATRIX2X3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix2x3fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix2x3fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix3x2fv) = (PFNGLUNIFORMMATRIX3X2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix3x2fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix3x2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix2x4fv) = (PFNGLUNIFORMMATRIX2X4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix2x4fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix2x4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix4x2fv) = (PFNGLUNIFORMMATRIX4X2FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix4x2fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix4x2fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix3x4fv) = (PFNGLUNIFORMMATRIX3X4FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix3x4fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix3x4fv))
            return GL_FALSE;
        GLH_CORE_NAME(glUniformMatrix4x3fv) = (PFNGLUNIFORMMATRIX4X3FVPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix4x3fv");
        if (NULL == GLH_CORE_NAME(glUniformMatrix4x3fv))
            return GL_FALSE;
#endif

#ifdef GL_ARB_multitexture
    } else if (0 == strcmp(extension, "GL_ARB_multitexture")) {
        GLH_EXT_NAME(glActiveTextureARB) = (PFNGLACTIVETEXTUREARBPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveTextureARB");
        if (NULL == GLH_EXT_NAME(glActiveTextureARB))
            return GL_FALSE;
        GLH_EXT_NAME(glClientActiveTextureARB) = (PFNGLCLIENTACTIVETEXTUREARBPROC)GLH_EXT_GET_PROC_ADDRESS("glClientActiveTextureARB");
        if (NULL == GLH_EXT_NAME(glClientActiveTextureARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1dARB) = (PFNGLMULTITEXCOORD1DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1dvARB) = (PFNGLMULTITEXCOORD1DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1dvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1fARB) = (PFNGLMULTITEXCOORD1FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1fvARB) = (PFNGLMULTITEXCOORD1FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1fvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1iARB) = (PFNGLMULTITEXCOORD1IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1iARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1ivARB) = (PFNGLMULTITEXCOORD1IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1ivARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1sARB) = (PFNGLMULTITEXCOORD1SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1sARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1svARB) = (PFNGLMULTITEXCOORD1SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1svARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2dARB) = (PFNGLMULTITEXCOORD2DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2dvARB) = (PFNGLMULTITEXCOORD2DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2dvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2fARB) = (PFNGLMULTITEXCOORD2FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2fvARB) = (PFNGLMULTITEXCOORD2FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2fvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2iARB) = (PFNGLMULTITEXCOORD2IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2iARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2ivARB) = (PFNGLMULTITEXCOORD2IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2ivARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2sARB) = (PFNGLMULTITEXCOORD2SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2sARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2svARB) = (PFNGLMULTITEXCOORD2SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2svARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3dARB) = (PFNGLMULTITEXCOORD3DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3dvARB) = (PFNGLMULTITEXCOORD3DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3dvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3fARB) = (PFNGLMULTITEXCOORD3FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3fvARB) = (PFNGLMULTITEXCOORD3FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3fvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3iARB) = (PFNGLMULTITEXCOORD3IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3iARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3ivARB) = (PFNGLMULTITEXCOORD3IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3ivARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3sARB) = (PFNGLMULTITEXCOORD3SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3sARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3svARB) = (PFNGLMULTITEXCOORD3SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3svARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4dARB) = (PFNGLMULTITEXCOORD4DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4dvARB) = (PFNGLMULTITEXCOORD4DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4dvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4fARB) = (PFNGLMULTITEXCOORD4FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4fvARB) = (PFNGLMULTITEXCOORD4FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4fvARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4iARB) = (PFNGLMULTITEXCOORD4IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4iARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4ivARB) = (PFNGLMULTITEXCOORD4IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4ivARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4sARB) = (PFNGLMULTITEXCOORD4SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4sARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4svARB) = (PFNGLMULTITEXCOORD4SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4svARB");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4svARB))
            return GL_FALSE;
#endif

#ifdef GL_ARB_transpose_matrix
    } else if (0 == strcmp(extension, "GL_ARB_transpose_matrix")) {
        GLH_EXT_NAME(glLoadTransposeMatrixfARB) = (PFNGLLOADTRANSPOSEMATRIXFARBPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixfARB");
        if (NULL == GLH_EXT_NAME(glLoadTransposeMatrixfARB))
            return GL_FALSE;
        GLH_EXT_NAME(glLoadTransposeMatrixdARB) = (PFNGLLOADTRANSPOSEMATRIXDARBPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadTransposeMatrixdARB");
        if (NULL == GLH_EXT_NAME(glLoadTransposeMatrixdARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultTransposeMatrixfARB) = (PFNGLMULTTRANSPOSEMATRIXFARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixfARB");
        if (NULL == GLH_EXT_NAME(glMultTransposeMatrixfARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMultTransposeMatrixdARB) = (PFNGLMULTTRANSPOSEMATRIXDARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMultTransposeMatrixdARB");
        if (NULL == GLH_EXT_NAME(glMultTransposeMatrixdARB))
            return GL_FALSE;
#endif

#ifdef GL_ARB_multisample
    } else if (0 == strcmp(extension, "GL_ARB_multisample")) {
        GLH_EXT_NAME(glSampleCoverageARB) = (PFNGLSAMPLECOVERAGEARBPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleCoverageARB");
        if (NULL == GLH_EXT_NAME(glSampleCoverageARB))
            return GL_FALSE;
#endif

#ifdef GL_ARB_texture_env_add
    } else if (0 == strcmp(extension, "GL_ARB_texture_env_add")) {
#endif

#ifdef GL_ARB_texture_cube_map
    } else if (0 == strcmp(extension, "GL_ARB_texture_cube_map")) {
#endif

#ifdef GL_ARB_texture_compression
    } else if (0 == strcmp(extension, "GL_ARB_texture_compression")) {
        GLH_EXT_NAME(glCompressedTexImage3DARB) = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage3DARB");
        if (NULL == GLH_EXT_NAME(glCompressedTexImage3DARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCompressedTexImage2DARB) = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage2DARB");
        if (NULL == GLH_EXT_NAME(glCompressedTexImage2DARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCompressedTexImage1DARB) = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexImage1DARB");
        if (NULL == GLH_EXT_NAME(glCompressedTexImage1DARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCompressedTexSubImage3DARB) = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage3DARB");
        if (NULL == GLH_EXT_NAME(glCompressedTexSubImage3DARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCompressedTexSubImage2DARB) = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage2DARB");
        if (NULL == GLH_EXT_NAME(glCompressedTexSubImage2DARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCompressedTexSubImage1DARB) = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompressedTexSubImage1DARB");
        if (NULL == GLH_EXT_NAME(glCompressedTexSubImage1DARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetCompressedTexImageARB) = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCompressedTexImageARB");
        if (NULL == GLH_EXT_NAME(glGetCompressedTexImageARB))
            return GL_FALSE;
#endif

#ifdef GL_ARB_texture_border_clamp
    } else if (0 == strcmp(extension, "GL_ARB_texture_border_clamp")) {
#endif

#ifdef GL_ARB_point_parameters
    } else if (0 == strcmp(extension, "GL_ARB_point_parameters")) {
        GLH_EXT_NAME(glPointParameterfARB) = (PFNGLPOINTPARAMETERFARBPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfARB");
        if (NULL == GLH_EXT_NAME(glPointParameterfARB))
            return GL_FALSE;
        GLH_EXT_NAME(glPointParameterfvARB) = (PFNGLPOINTPARAMETERFVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfvARB");
        if (NULL == GLH_EXT_NAME(glPointParameterfvARB))
            return GL_FALSE;
#endif

#ifdef GL_ARB_vertex_blend
    } else if (0 == strcmp(extension, "GL_ARB_vertex_blend")) {
        GLH_EXT_NAME(glWeightbvARB) = (PFNGLWEIGHTBVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightbvARB");
        if (NULL == GLH_EXT_NAME(glWeightbvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightsvARB) = (PFNGLWEIGHTSVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightsvARB");
        if (NULL == GLH_EXT_NAME(glWeightsvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightivARB) = (PFNGLWEIGHTIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightivARB");
        if (NULL == GLH_EXT_NAME(glWeightivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightfvARB) = (PFNGLWEIGHTFVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightfvARB");
        if (NULL == GLH_EXT_NAME(glWeightfvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightdvARB) = (PFNGLWEIGHTDVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightdvARB");
        if (NULL == GLH_EXT_NAME(glWeightdvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightubvARB) = (PFNGLWEIGHTUBVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightubvARB");
        if (NULL == GLH_EXT_NAME(glWeightubvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightusvARB) = (PFNGLWEIGHTUSVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightusvARB");
        if (NULL == GLH_EXT_NAME(glWeightusvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightuivARB) = (PFNGLWEIGHTUIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightuivARB");
        if (NULL == GLH_EXT_NAME(glWeightuivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWeightPointerARB) = (PFNGLWEIGHTPOINTERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWeightPointerARB");
        if (NULL == GLH_EXT_NAME(glWeightPointerARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexBlendARB) = (PFNGLVERTEXBLENDARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexBlendARB");
        if (NULL == GLH_EXT_NAME(glVertexBlendARB))
            return GL_FALSE;
#endif

#ifdef GL_ARB_matrix_palette
    } else if (0 == strcmp(extension, "GL_ARB_matrix_palette")) {
        GLH_EXT_NAME(glCurrentPaletteMatrixARB) = (PFNGLCURRENTPALETTEMATRIXARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCurrentPaletteMatrixARB");
        if (NULL == GLH_EXT_NAME(glCurrentPaletteMatrixARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMatrixIndexubvARB) = (PFNGLMATRIXINDEXUBVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMatrixIndexubvARB");
        if (NULL == GLH_EXT_NAME(glMatrixIndexubvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMatrixIndexusvARB) = (PFNGLMATRIXINDEXUSVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMatrixIndexusvARB");
        if (NULL == GLH_EXT_NAME(glMatrixIndexusvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMatrixIndexuivARB) = (PFNGLMATRIXINDEXUIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMatrixIndexuivARB");
        if (NULL == GLH_EXT_NAME(glMatrixIndexuivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMatrixIndexPointerARB) = (PFNGLMATRIXINDEXPOINTERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMatrixIndexPointerARB");
        if (NULL == GLH_EXT_NAME(glMatrixIndexPointerARB))
            return GL_FALSE;
#endif

#ifdef GL_ARB_texture_env_combine
    } else if (0 == strcmp(extension, "GL_ARB_texture_env_combine")) {
#endif

#ifdef GL_ARB_texture_env_crossbar
    } else if (0 == strcmp(extension, "GL_ARB_texture_env_crossbar")) {
#endif

#ifdef GL_ARB_texture_env_dot3
    } else if (0 == strcmp(extension, "GL_ARB_texture_env_dot3")) {
#endif

#ifdef GL_ARB_texture_mirrored_repeat
    } else if (0 == strcmp(extension, "GL_ARB_texture_mirrored_repeat")) {
#endif

#ifdef GL_ARB_depth_texture
    } else if (0 == strcmp(extension, "GL_ARB_depth_texture")) {
#endif

#ifdef GL_ARB_shadow
    } else if (0 == strcmp(extension, "GL_ARB_shadow")) {
#endif

#ifdef GL_ARB_shadow_ambient
    } else if (0 == strcmp(extension, "GL_ARB_shadow_ambient")) {
#endif

#ifdef GL_ARB_window_pos
    } else if (0 == strcmp(extension, "GL_ARB_window_pos")) {
        GLH_EXT_NAME(glWindowPos2dARB) = (PFNGLWINDOWPOS2DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2dvARB) = (PFNGLWINDOWPOS2DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dvARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2fARB) = (PFNGLWINDOWPOS2FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2fvARB) = (PFNGLWINDOWPOS2FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fvARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2iARB) = (PFNGLWINDOWPOS2IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2iARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2ivARB) = (PFNGLWINDOWPOS2IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2ivARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2sARB) = (PFNGLWINDOWPOS2SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2sARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2svARB) = (PFNGLWINDOWPOS2SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2svARB");
        if (NULL == GLH_EXT_NAME(glWindowPos2svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3dARB) = (PFNGLWINDOWPOS3DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3dvARB) = (PFNGLWINDOWPOS3DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dvARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3fARB) = (PFNGLWINDOWPOS3FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3fvARB) = (PFNGLWINDOWPOS3FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fvARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3iARB) = (PFNGLWINDOWPOS3IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3iARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3ivARB) = (PFNGLWINDOWPOS3IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3ivARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3sARB) = (PFNGLWINDOWPOS3SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3sARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3svARB) = (PFNGLWINDOWPOS3SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3svARB");
        if (NULL == GLH_EXT_NAME(glWindowPos3svARB))
            return GL_FALSE;
#endif

#ifdef GL_ARB_vertex_program
    } else if (0 == strcmp(extension, "GL_ARB_vertex_program")) {
        GLH_EXT_NAME(glVertexAttrib1dARB) = (PFNGLVERTEXATTRIB1DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1dARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1dvARB) = (PFNGLVERTEXATTRIB1DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1dvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1fARB) = (PFNGLVERTEXATTRIB1FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1fARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1fvARB) = (PFNGLVERTEXATTRIB1FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1fvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1sARB) = (PFNGLVERTEXATTRIB1SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1sARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1svARB) = (PFNGLVERTEXATTRIB1SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1svARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2dARB) = (PFNGLVERTEXATTRIB2DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2dARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2dvARB) = (PFNGLVERTEXATTRIB2DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2dvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2fARB) = (PFNGLVERTEXATTRIB2FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2fARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2fvARB) = (PFNGLVERTEXATTRIB2FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2fvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2sARB) = (PFNGLVERTEXATTRIB2SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2sARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2svARB) = (PFNGLVERTEXATTRIB2SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2svARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3dARB) = (PFNGLVERTEXATTRIB3DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3dARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3dvARB) = (PFNGLVERTEXATTRIB3DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3dvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3fARB) = (PFNGLVERTEXATTRIB3FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3fARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3fvARB) = (PFNGLVERTEXATTRIB3FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3fvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3sARB) = (PFNGLVERTEXATTRIB3SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3sARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3svARB) = (PFNGLVERTEXATTRIB3SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3svARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4NbvARB) = (PFNGLVERTEXATTRIB4NBVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4NbvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4NbvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4NivARB) = (PFNGLVERTEXATTRIB4NIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4NivARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4NivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4NsvARB) = (PFNGLVERTEXATTRIB4NSVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4NsvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4NsvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4NubARB) = (PFNGLVERTEXATTRIB4NUBARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4NubARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4NubARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4NubvARB) = (PFNGLVERTEXATTRIB4NUBVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4NubvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4NubvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4NuivARB) = (PFNGLVERTEXATTRIB4NUIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4NuivARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4NuivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4NusvARB) = (PFNGLVERTEXATTRIB4NUSVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4NusvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4NusvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4bvARB) = (PFNGLVERTEXATTRIB4BVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4bvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4bvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4dARB) = (PFNGLVERTEXATTRIB4DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4dARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4dvARB) = (PFNGLVERTEXATTRIB4DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4dvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4fARB) = (PFNGLVERTEXATTRIB4FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4fARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4fvARB) = (PFNGLVERTEXATTRIB4FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4fvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4ivARB) = (PFNGLVERTEXATTRIB4IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4ivARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4sARB) = (PFNGLVERTEXATTRIB4SARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4sARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4sARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4svARB) = (PFNGLVERTEXATTRIB4SVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4svARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4svARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4ubvARB) = (PFNGLVERTEXATTRIB4UBVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4ubvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4ubvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4uivARB) = (PFNGLVERTEXATTRIB4UIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4uivARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4uivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4usvARB) = (PFNGLVERTEXATTRIB4USVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4usvARB");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4usvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribPointerARB) = (PFNGLVERTEXATTRIBPOINTERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribPointerARB");
        if (NULL == GLH_EXT_NAME(glVertexAttribPointerARB))
            return GL_FALSE;
        GLH_EXT_NAME(glEnableVertexAttribArrayARB) = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC)GLH_EXT_GET_PROC_ADDRESS("glEnableVertexAttribArrayARB");
        if (NULL == GLH_EXT_NAME(glEnableVertexAttribArrayARB))
            return GL_FALSE;
        GLH_EXT_NAME(glDisableVertexAttribArrayARB) = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)GLH_EXT_GET_PROC_ADDRESS("glDisableVertexAttribArrayARB");
        if (NULL == GLH_EXT_NAME(glDisableVertexAttribArrayARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramStringARB) = (PFNGLPROGRAMSTRINGARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramStringARB");
        if (NULL == GLH_EXT_NAME(glProgramStringARB))
            return GL_FALSE;
        GLH_EXT_NAME(glBindProgramARB) = (PFNGLBINDPROGRAMARBPROC)GLH_EXT_GET_PROC_ADDRESS("glBindProgramARB");
        if (NULL == GLH_EXT_NAME(glBindProgramARB))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteProgramsARB) = (PFNGLDELETEPROGRAMSARBPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteProgramsARB");
        if (NULL == GLH_EXT_NAME(glDeleteProgramsARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGenProgramsARB) = (PFNGLGENPROGRAMSARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGenProgramsARB");
        if (NULL == GLH_EXT_NAME(glGenProgramsARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameter4dARB) = (PFNGLPROGRAMENVPARAMETER4DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameter4dARB");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameter4dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameter4dvARB) = (PFNGLPROGRAMENVPARAMETER4DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameter4dvARB");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameter4dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameter4fARB) = (PFNGLPROGRAMENVPARAMETER4FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameter4fARB");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameter4fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameter4fvARB) = (PFNGLPROGRAMENVPARAMETER4FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameter4fvARB");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameter4fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParameter4dARB) = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameter4dARB");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameter4dARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParameter4dvARB) = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameter4dvARB");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameter4dvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParameter4fARB) = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameter4fARB");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameter4fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParameter4fvARB) = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameter4fvARB");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameter4fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramEnvParameterdvARB) = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramEnvParameterdvARB");
        if (NULL == GLH_EXT_NAME(glGetProgramEnvParameterdvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramEnvParameterfvARB) = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramEnvParameterfvARB");
        if (NULL == GLH_EXT_NAME(glGetProgramEnvParameterfvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramLocalParameterdvARB) = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramLocalParameterdvARB");
        if (NULL == GLH_EXT_NAME(glGetProgramLocalParameterdvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramLocalParameterfvARB) = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramLocalParameterfvARB");
        if (NULL == GLH_EXT_NAME(glGetProgramLocalParameterfvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramivARB) = (PFNGLGETPROGRAMIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramivARB");
        if (NULL == GLH_EXT_NAME(glGetProgramivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramStringARB) = (PFNGLGETPROGRAMSTRINGARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramStringARB");
        if (NULL == GLH_EXT_NAME(glGetProgramStringARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribdvARB) = (PFNGLGETVERTEXATTRIBDVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribdvARB");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribdvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribfvARB) = (PFNGLGETVERTEXATTRIBFVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribfvARB");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribfvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribivARB) = (PFNGLGETVERTEXATTRIBIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribivARB");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribPointervARB) = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribPointervARB");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribPointervARB))
            return GL_FALSE;
        GLH_EXT_NAME(glIsProgramARB) = (PFNGLISPROGRAMARBPROC)GLH_EXT_GET_PROC_ADDRESS("glIsProgramARB");
        if (NULL == GLH_EXT_NAME(glIsProgramARB))
            return GL_FALSE;
#endif

#ifdef GL_ARB_fragment_program
    } else if (0 == strcmp(extension, "GL_ARB_fragment_program")) {
#endif

#ifdef GL_ARB_vertex_buffer_object
    } else if (0 == strcmp(extension, "GL_ARB_vertex_buffer_object")) {
        GLH_EXT_NAME(glBindBufferARB) = (PFNGLBINDBUFFERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glBindBufferARB");
        if (NULL == GLH_EXT_NAME(glBindBufferARB))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteBuffersARB) = (PFNGLDELETEBUFFERSARBPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteBuffersARB");
        if (NULL == GLH_EXT_NAME(glDeleteBuffersARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGenBuffersARB) = (PFNGLGENBUFFERSARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGenBuffersARB");
        if (NULL == GLH_EXT_NAME(glGenBuffersARB))
            return GL_FALSE;
        GLH_EXT_NAME(glIsBufferARB) = (PFNGLISBUFFERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glIsBufferARB");
        if (NULL == GLH_EXT_NAME(glIsBufferARB))
            return GL_FALSE;
        GLH_EXT_NAME(glBufferDataARB) = (PFNGLBUFFERDATAARBPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferDataARB");
        if (NULL == GLH_EXT_NAME(glBufferDataARB))
            return GL_FALSE;
        GLH_EXT_NAME(glBufferSubDataARB) = (PFNGLBUFFERSUBDATAARBPROC)GLH_EXT_GET_PROC_ADDRESS("glBufferSubDataARB");
        if (NULL == GLH_EXT_NAME(glBufferSubDataARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetBufferSubDataARB) = (PFNGLGETBUFFERSUBDATAARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferSubDataARB");
        if (NULL == GLH_EXT_NAME(glGetBufferSubDataARB))
            return GL_FALSE;
        GLH_EXT_NAME(glMapBufferARB) = (PFNGLMAPBUFFERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glMapBufferARB");
        if (NULL == GLH_EXT_NAME(glMapBufferARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUnmapBufferARB) = (PFNGLUNMAPBUFFERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUnmapBufferARB");
        if (NULL == GLH_EXT_NAME(glUnmapBufferARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetBufferParameterivARB) = (PFNGLGETBUFFERPARAMETERIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferParameterivARB");
        if (NULL == GLH_EXT_NAME(glGetBufferParameterivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetBufferPointervARB) = (PFNGLGETBUFFERPOINTERVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBufferPointervARB");
        if (NULL == GLH_EXT_NAME(glGetBufferPointervARB))
            return GL_FALSE;
#endif

#ifdef GL_ARB_occlusion_query
    } else if (0 == strcmp(extension, "GL_ARB_occlusion_query")) {
        GLH_EXT_NAME(glGenQueriesARB) = (PFNGLGENQUERIESARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGenQueriesARB");
        if (NULL == GLH_EXT_NAME(glGenQueriesARB))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteQueriesARB) = (PFNGLDELETEQUERIESARBPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteQueriesARB");
        if (NULL == GLH_EXT_NAME(glDeleteQueriesARB))
            return GL_FALSE;
        GLH_EXT_NAME(glIsQueryARB) = (PFNGLISQUERYARBPROC)GLH_EXT_GET_PROC_ADDRESS("glIsQueryARB");
        if (NULL == GLH_EXT_NAME(glIsQueryARB))
            return GL_FALSE;
        GLH_EXT_NAME(glBeginQueryARB) = (PFNGLBEGINQUERYARBPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginQueryARB");
        if (NULL == GLH_EXT_NAME(glBeginQueryARB))
            return GL_FALSE;
        GLH_EXT_NAME(glEndQueryARB) = (PFNGLENDQUERYARBPROC)GLH_EXT_GET_PROC_ADDRESS("glEndQueryARB");
        if (NULL == GLH_EXT_NAME(glEndQueryARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetQueryivARB) = (PFNGLGETQUERYIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryivARB");
        if (NULL == GLH_EXT_NAME(glGetQueryivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetQueryObjectivARB) = (PFNGLGETQUERYOBJECTIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectivARB");
        if (NULL == GLH_EXT_NAME(glGetQueryObjectivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetQueryObjectuivARB) = (PFNGLGETQUERYOBJECTUIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectuivARB");
        if (NULL == GLH_EXT_NAME(glGetQueryObjectuivARB))
            return GL_FALSE;
#endif

#ifdef GL_ARB_shader_objects
    } else if (0 == strcmp(extension, "GL_ARB_shader_objects")) {
        GLH_EXT_NAME(glDeleteObjectARB) = (PFNGLDELETEOBJECTARBPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteObjectARB");
        if (NULL == GLH_EXT_NAME(glDeleteObjectARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetHandleARB) = (PFNGLGETHANDLEARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHandleARB");
        if (NULL == GLH_EXT_NAME(glGetHandleARB))
            return GL_FALSE;
        GLH_EXT_NAME(glDetachObjectARB) = (PFNGLDETACHOBJECTARBPROC)GLH_EXT_GET_PROC_ADDRESS("glDetachObjectARB");
        if (NULL == GLH_EXT_NAME(glDetachObjectARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCreateShaderObjectARB) = (PFNGLCREATESHADEROBJECTARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCreateShaderObjectARB");
        if (NULL == GLH_EXT_NAME(glCreateShaderObjectARB))
            return GL_FALSE;
        GLH_EXT_NAME(glShaderSourceARB) = (PFNGLSHADERSOURCEARBPROC)GLH_EXT_GET_PROC_ADDRESS("glShaderSourceARB");
        if (NULL == GLH_EXT_NAME(glShaderSourceARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCompileShaderARB) = (PFNGLCOMPILESHADERARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCompileShaderARB");
        if (NULL == GLH_EXT_NAME(glCompileShaderARB))
            return GL_FALSE;
        GLH_EXT_NAME(glCreateProgramObjectARB) = (PFNGLCREATEPROGRAMOBJECTARBPROC)GLH_EXT_GET_PROC_ADDRESS("glCreateProgramObjectARB");
        if (NULL == GLH_EXT_NAME(glCreateProgramObjectARB))
            return GL_FALSE;
        GLH_EXT_NAME(glAttachObjectARB) = (PFNGLATTACHOBJECTARBPROC)GLH_EXT_GET_PROC_ADDRESS("glAttachObjectARB");
        if (NULL == GLH_EXT_NAME(glAttachObjectARB))
            return GL_FALSE;
        GLH_EXT_NAME(glLinkProgramARB) = (PFNGLLINKPROGRAMARBPROC)GLH_EXT_GET_PROC_ADDRESS("glLinkProgramARB");
        if (NULL == GLH_EXT_NAME(glLinkProgramARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUseProgramObjectARB) = (PFNGLUSEPROGRAMOBJECTARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUseProgramObjectARB");
        if (NULL == GLH_EXT_NAME(glUseProgramObjectARB))
            return GL_FALSE;
        GLH_EXT_NAME(glValidateProgramARB) = (PFNGLVALIDATEPROGRAMARBPROC)GLH_EXT_GET_PROC_ADDRESS("glValidateProgramARB");
        if (NULL == GLH_EXT_NAME(glValidateProgramARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform1fARB) = (PFNGLUNIFORM1FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1fARB");
        if (NULL == GLH_EXT_NAME(glUniform1fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform2fARB) = (PFNGLUNIFORM2FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2fARB");
        if (NULL == GLH_EXT_NAME(glUniform2fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform3fARB) = (PFNGLUNIFORM3FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3fARB");
        if (NULL == GLH_EXT_NAME(glUniform3fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform4fARB) = (PFNGLUNIFORM4FARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4fARB");
        if (NULL == GLH_EXT_NAME(glUniform4fARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform1iARB) = (PFNGLUNIFORM1IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1iARB");
        if (NULL == GLH_EXT_NAME(glUniform1iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform2iARB) = (PFNGLUNIFORM2IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2iARB");
        if (NULL == GLH_EXT_NAME(glUniform2iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform3iARB) = (PFNGLUNIFORM3IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3iARB");
        if (NULL == GLH_EXT_NAME(glUniform3iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform4iARB) = (PFNGLUNIFORM4IARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4iARB");
        if (NULL == GLH_EXT_NAME(glUniform4iARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform1fvARB) = (PFNGLUNIFORM1FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1fvARB");
        if (NULL == GLH_EXT_NAME(glUniform1fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform2fvARB) = (PFNGLUNIFORM2FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2fvARB");
        if (NULL == GLH_EXT_NAME(glUniform2fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform3fvARB) = (PFNGLUNIFORM3FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3fvARB");
        if (NULL == GLH_EXT_NAME(glUniform3fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform4fvARB) = (PFNGLUNIFORM4FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4fvARB");
        if (NULL == GLH_EXT_NAME(glUniform4fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform1ivARB) = (PFNGLUNIFORM1IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1ivARB");
        if (NULL == GLH_EXT_NAME(glUniform1ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform2ivARB) = (PFNGLUNIFORM2IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2ivARB");
        if (NULL == GLH_EXT_NAME(glUniform2ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform3ivARB) = (PFNGLUNIFORM3IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3ivARB");
        if (NULL == GLH_EXT_NAME(glUniform3ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform4ivARB) = (PFNGLUNIFORM4IVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4ivARB");
        if (NULL == GLH_EXT_NAME(glUniform4ivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniformMatrix2fvARB) = (PFNGLUNIFORMMATRIX2FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix2fvARB");
        if (NULL == GLH_EXT_NAME(glUniformMatrix2fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniformMatrix3fvARB) = (PFNGLUNIFORMMATRIX3FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix3fvARB");
        if (NULL == GLH_EXT_NAME(glUniformMatrix3fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glUniformMatrix4fvARB) = (PFNGLUNIFORMMATRIX4FVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformMatrix4fvARB");
        if (NULL == GLH_EXT_NAME(glUniformMatrix4fvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetObjectParameterfvARB) = (PFNGLGETOBJECTPARAMETERFVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetObjectParameterfvARB");
        if (NULL == GLH_EXT_NAME(glGetObjectParameterfvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetObjectParameterivARB) = (PFNGLGETOBJECTPARAMETERIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetObjectParameterivARB");
        if (NULL == GLH_EXT_NAME(glGetObjectParameterivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetInfoLogARB) = (PFNGLGETINFOLOGARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetInfoLogARB");
        if (NULL == GLH_EXT_NAME(glGetInfoLogARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetAttachedObjectsARB) = (PFNGLGETATTACHEDOBJECTSARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetAttachedObjectsARB");
        if (NULL == GLH_EXT_NAME(glGetAttachedObjectsARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetUniformLocationARB) = (PFNGLGETUNIFORMLOCATIONARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformLocationARB");
        if (NULL == GLH_EXT_NAME(glGetUniformLocationARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetActiveUniformARB) = (PFNGLGETACTIVEUNIFORMARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetActiveUniformARB");
        if (NULL == GLH_EXT_NAME(glGetActiveUniformARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetUniformfvARB) = (PFNGLGETUNIFORMFVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformfvARB");
        if (NULL == GLH_EXT_NAME(glGetUniformfvARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetUniformivARB) = (PFNGLGETUNIFORMIVARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformivARB");
        if (NULL == GLH_EXT_NAME(glGetUniformivARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetShaderSourceARB) = (PFNGLGETSHADERSOURCEARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetShaderSourceARB");
        if (NULL == GLH_EXT_NAME(glGetShaderSourceARB))
            return GL_FALSE;
#endif

#ifdef GL_ARB_vertex_shader
    } else if (0 == strcmp(extension, "GL_ARB_vertex_shader")) {
        GLH_EXT_NAME(glBindAttribLocationARB) = (PFNGLBINDATTRIBLOCATIONARBPROC)GLH_EXT_GET_PROC_ADDRESS("glBindAttribLocationARB");
        if (NULL == GLH_EXT_NAME(glBindAttribLocationARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetActiveAttribARB) = (PFNGLGETACTIVEATTRIBARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetActiveAttribARB");
        if (NULL == GLH_EXT_NAME(glGetActiveAttribARB))
            return GL_FALSE;
        GLH_EXT_NAME(glGetAttribLocationARB) = (PFNGLGETATTRIBLOCATIONARBPROC)GLH_EXT_GET_PROC_ADDRESS("glGetAttribLocationARB");
        if (NULL == GLH_EXT_NAME(glGetAttribLocationARB))
            return GL_FALSE;
#endif

#ifdef GL_ARB_fragment_shader
    } else if (0 == strcmp(extension, "GL_ARB_fragment_shader")) {
#endif

#ifdef GL_ARB_shading_language_100
    } else if (0 == strcmp(extension, "GL_ARB_shading_language_100")) {
#endif

#ifdef GL_ARB_texture_non_power_of_two
    } else if (0 == strcmp(extension, "GL_ARB_texture_non_power_of_two")) {
#endif

#ifdef GL_ARB_point_sprite
    } else if (0 == strcmp(extension, "GL_ARB_point_sprite")) {
#endif

#ifdef GL_ARB_fragment_program_shadow
    } else if (0 == strcmp(extension, "GL_ARB_fragment_program_shadow")) {
#endif

#ifdef GL_ARB_draw_buffers
    } else if (0 == strcmp(extension, "GL_ARB_draw_buffers")) {
        GLH_EXT_NAME(glDrawBuffersARB) = (PFNGLDRAWBUFFERSARBPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawBuffersARB");
        if (NULL == GLH_EXT_NAME(glDrawBuffersARB))
            return GL_FALSE;
#endif

#ifdef GL_ARB_texture_rectangle
    } else if (0 == strcmp(extension, "GL_ARB_texture_rectangle")) {
#endif

#ifdef GL_ARB_color_buffer_float
    } else if (0 == strcmp(extension, "GL_ARB_color_buffer_float")) {
        GLH_EXT_NAME(glClampColorARB) = (PFNGLCLAMPCOLORARBPROC)GLH_EXT_GET_PROC_ADDRESS("glClampColorARB");
        if (NULL == GLH_EXT_NAME(glClampColorARB))
            return GL_FALSE;
#endif

#ifdef GL_ARB_half_float_pixel
    } else if (0 == strcmp(extension, "GL_ARB_half_float_pixel")) {
#endif

#ifdef GL_ARB_texture_float
    } else if (0 == strcmp(extension, "GL_ARB_texture_float")) {
#endif

#ifdef GL_ARB_pixel_buffer_object
    } else if (0 == strcmp(extension, "GL_ARB_pixel_buffer_object")) {
#endif

#ifdef GL_EXT_abgr
    } else if (0 == strcmp(extension, "GL_EXT_abgr")) {
#endif

#ifdef GL_EXT_blend_color
    } else if (0 == strcmp(extension, "GL_EXT_blend_color")) {
        GLH_EXT_NAME(glBlendColorEXT) = (PFNGLBLENDCOLOREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendColorEXT");
        if (NULL == GLH_EXT_NAME(glBlendColorEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_polygon_offset
    } else if (0 == strcmp(extension, "GL_EXT_polygon_offset")) {
        GLH_EXT_NAME(glPolygonOffsetEXT) = (PFNGLPOLYGONOFFSETEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPolygonOffsetEXT");
        if (NULL == GLH_EXT_NAME(glPolygonOffsetEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_texture
    } else if (0 == strcmp(extension, "GL_EXT_texture")) {
#endif

#ifdef GL_EXT_texture3D
    } else if (0 == strcmp(extension, "GL_EXT_texture3D")) {
        GLH_EXT_NAME(glTexImage3DEXT) = (PFNGLTEXIMAGE3DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage3DEXT");
        if (NULL == GLH_EXT_NAME(glTexImage3DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTexSubImage3DEXT) = (PFNGLTEXSUBIMAGE3DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage3DEXT");
        if (NULL == GLH_EXT_NAME(glTexSubImage3DEXT))
            return GL_FALSE;
#endif

#ifdef GL_SGIS_texture_filter4
    } else if (0 == strcmp(extension, "GL_SGIS_texture_filter4")) {
        GLH_EXT_NAME(glGetTexFilterFuncSGIS) = (PFNGLGETTEXFILTERFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glGetTexFilterFuncSGIS");
        if (NULL == GLH_EXT_NAME(glGetTexFilterFuncSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glTexFilterFuncSGIS) = (PFNGLTEXFILTERFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glTexFilterFuncSGIS");
        if (NULL == GLH_EXT_NAME(glTexFilterFuncSGIS))
            return GL_FALSE;
#endif

#ifdef GL_EXT_subtexture
    } else if (0 == strcmp(extension, "GL_EXT_subtexture")) {
        GLH_EXT_NAME(glTexSubImage1DEXT) = (PFNGLTEXSUBIMAGE1DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage1DEXT");
        if (NULL == GLH_EXT_NAME(glTexSubImage1DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTexSubImage2DEXT) = (PFNGLTEXSUBIMAGE2DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage2DEXT");
        if (NULL == GLH_EXT_NAME(glTexSubImage2DEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_copy_texture
    } else if (0 == strcmp(extension, "GL_EXT_copy_texture")) {
        GLH_EXT_NAME(glCopyTexImage1DEXT) = (PFNGLCOPYTEXIMAGE1DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexImage1DEXT");
        if (NULL == GLH_EXT_NAME(glCopyTexImage1DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyTexImage2DEXT) = (PFNGLCOPYTEXIMAGE2DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexImage2DEXT");
        if (NULL == GLH_EXT_NAME(glCopyTexImage2DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyTexSubImage1DEXT) = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage1DEXT");
        if (NULL == GLH_EXT_NAME(glCopyTexSubImage1DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyTexSubImage2DEXT) = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage2DEXT");
        if (NULL == GLH_EXT_NAME(glCopyTexSubImage2DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyTexSubImage3DEXT) = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyTexSubImage3DEXT");
        if (NULL == GLH_EXT_NAME(glCopyTexSubImage3DEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_histogram
    } else if (0 == strcmp(extension, "GL_EXT_histogram")) {
        GLH_EXT_NAME(glGetHistogramEXT) = (PFNGLGETHISTOGRAMEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramEXT");
        if (NULL == GLH_EXT_NAME(glGetHistogramEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetHistogramParameterfvEXT) = (PFNGLGETHISTOGRAMPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glGetHistogramParameterfvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetHistogramParameterivEXT) = (PFNGLGETHISTOGRAMPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetHistogramParameterivEXT");
        if (NULL == GLH_EXT_NAME(glGetHistogramParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMinmaxEXT) = (PFNGLGETMINMAXEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxEXT");
        if (NULL == GLH_EXT_NAME(glGetMinmaxEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMinmaxParameterfvEXT) = (PFNGLGETMINMAXPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glGetMinmaxParameterfvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMinmaxParameterivEXT) = (PFNGLGETMINMAXPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMinmaxParameterivEXT");
        if (NULL == GLH_EXT_NAME(glGetMinmaxParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glHistogramEXT) = (PFNGLHISTOGRAMEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glHistogramEXT");
        if (NULL == GLH_EXT_NAME(glHistogramEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glMinmaxEXT) = (PFNGLMINMAXEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glMinmaxEXT");
        if (NULL == GLH_EXT_NAME(glMinmaxEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glResetHistogramEXT) = (PFNGLRESETHISTOGRAMEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glResetHistogramEXT");
        if (NULL == GLH_EXT_NAME(glResetHistogramEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glResetMinmaxEXT) = (PFNGLRESETMINMAXEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glResetMinmaxEXT");
        if (NULL == GLH_EXT_NAME(glResetMinmaxEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_convolution
    } else if (0 == strcmp(extension, "GL_EXT_convolution")) {
        GLH_EXT_NAME(glConvolutionFilter1DEXT) = (PFNGLCONVOLUTIONFILTER1DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter1DEXT");
        if (NULL == GLH_EXT_NAME(glConvolutionFilter1DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glConvolutionFilter2DEXT) = (PFNGLCONVOLUTIONFILTER2DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionFilter2DEXT");
        if (NULL == GLH_EXT_NAME(glConvolutionFilter2DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glConvolutionParameterfEXT) = (PFNGLCONVOLUTIONPARAMETERFEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfEXT");
        if (NULL == GLH_EXT_NAME(glConvolutionParameterfEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glConvolutionParameterfvEXT) = (PFNGLCONVOLUTIONPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glConvolutionParameterfvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glConvolutionParameteriEXT) = (PFNGLCONVOLUTIONPARAMETERIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameteriEXT");
        if (NULL == GLH_EXT_NAME(glConvolutionParameteriEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glConvolutionParameterivEXT) = (PFNGLCONVOLUTIONPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glConvolutionParameterivEXT");
        if (NULL == GLH_EXT_NAME(glConvolutionParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyConvolutionFilter1DEXT) = (PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter1DEXT");
        if (NULL == GLH_EXT_NAME(glCopyConvolutionFilter1DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyConvolutionFilter2DEXT) = (PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyConvolutionFilter2DEXT");
        if (NULL == GLH_EXT_NAME(glCopyConvolutionFilter2DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetConvolutionFilterEXT) = (PFNGLGETCONVOLUTIONFILTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionFilterEXT");
        if (NULL == GLH_EXT_NAME(glGetConvolutionFilterEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetConvolutionParameterfvEXT) = (PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glGetConvolutionParameterfvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetConvolutionParameterivEXT) = (PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetConvolutionParameterivEXT");
        if (NULL == GLH_EXT_NAME(glGetConvolutionParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetSeparableFilterEXT) = (PFNGLGETSEPARABLEFILTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSeparableFilterEXT");
        if (NULL == GLH_EXT_NAME(glGetSeparableFilterEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSeparableFilter2DEXT) = (PFNGLSEPARABLEFILTER2DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSeparableFilter2DEXT");
        if (NULL == GLH_EXT_NAME(glSeparableFilter2DEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_color_matrix
    } else if (0 == strcmp(extension, "GL_EXT_color_matrix")) {
#endif

#ifdef GL_SGI_color_table
    } else if (0 == strcmp(extension, "GL_SGI_color_table")) {
        GLH_EXT_NAME(glColorTableSGI) = (PFNGLCOLORTABLESGIPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableSGI");
        if (NULL == GLH_EXT_NAME(glColorTableSGI))
            return GL_FALSE;
        GLH_EXT_NAME(glColorTableParameterfvSGI) = (PFNGLCOLORTABLEPARAMETERFVSGIPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterfvSGI");
        if (NULL == GLH_EXT_NAME(glColorTableParameterfvSGI))
            return GL_FALSE;
        GLH_EXT_NAME(glColorTableParameterivSGI) = (PFNGLCOLORTABLEPARAMETERIVSGIPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableParameterivSGI");
        if (NULL == GLH_EXT_NAME(glColorTableParameterivSGI))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyColorTableSGI) = (PFNGLCOPYCOLORTABLESGIPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorTableSGI");
        if (NULL == GLH_EXT_NAME(glCopyColorTableSGI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetColorTableSGI) = (PFNGLGETCOLORTABLESGIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableSGI");
        if (NULL == GLH_EXT_NAME(glGetColorTableSGI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetColorTableParameterfvSGI) = (PFNGLGETCOLORTABLEPARAMETERFVSGIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfvSGI");
        if (NULL == GLH_EXT_NAME(glGetColorTableParameterfvSGI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetColorTableParameterivSGI) = (PFNGLGETCOLORTABLEPARAMETERIVSGIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterivSGI");
        if (NULL == GLH_EXT_NAME(glGetColorTableParameterivSGI))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_pixel_texture
    } else if (0 == strcmp(extension, "GL_SGIX_pixel_texture")) {
        GLH_EXT_NAME(glPixelTexGenSGIX) = (PFNGLPIXELTEXGENSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTexGenSGIX");
        if (NULL == GLH_EXT_NAME(glPixelTexGenSGIX))
            return GL_FALSE;
#endif

#ifdef GL_SGIS_pixel_texture
    } else if (0 == strcmp(extension, "GL_SGIS_pixel_texture")) {
        GLH_EXT_NAME(glPixelTexGenParameteriSGIS) = (PFNGLPIXELTEXGENPARAMETERISGISPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTexGenParameteriSGIS");
        if (NULL == GLH_EXT_NAME(glPixelTexGenParameteriSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glPixelTexGenParameterivSGIS) = (PFNGLPIXELTEXGENPARAMETERIVSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTexGenParameterivSGIS");
        if (NULL == GLH_EXT_NAME(glPixelTexGenParameterivSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glPixelTexGenParameterfSGIS) = (PFNGLPIXELTEXGENPARAMETERFSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTexGenParameterfSGIS");
        if (NULL == GLH_EXT_NAME(glPixelTexGenParameterfSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glPixelTexGenParameterfvSGIS) = (PFNGLPIXELTEXGENPARAMETERFVSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTexGenParameterfvSGIS");
        if (NULL == GLH_EXT_NAME(glPixelTexGenParameterfvSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glGetPixelTexGenParameterivSGIS) = (PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glGetPixelTexGenParameterivSGIS");
        if (NULL == GLH_EXT_NAME(glGetPixelTexGenParameterivSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glGetPixelTexGenParameterfvSGIS) = (PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glGetPixelTexGenParameterfvSGIS");
        if (NULL == GLH_EXT_NAME(glGetPixelTexGenParameterfvSGIS))
            return GL_FALSE;
#endif

#ifdef GL_SGIS_texture4D
    } else if (0 == strcmp(extension, "GL_SGIS_texture4D")) {
        GLH_EXT_NAME(glTexImage4DSGIS) = (PFNGLTEXIMAGE4DSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glTexImage4DSGIS");
        if (NULL == GLH_EXT_NAME(glTexImage4DSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glTexSubImage4DSGIS) = (PFNGLTEXSUBIMAGE4DSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glTexSubImage4DSGIS");
        if (NULL == GLH_EXT_NAME(glTexSubImage4DSGIS))
            return GL_FALSE;
#endif

#ifdef GL_SGI_texture_color_table
    } else if (0 == strcmp(extension, "GL_SGI_texture_color_table")) {
#endif

#ifdef GL_EXT_cmyka
    } else if (0 == strcmp(extension, "GL_EXT_cmyka")) {
#endif

#ifdef GL_EXT_texture_object
    } else if (0 == strcmp(extension, "GL_EXT_texture_object")) {
        GLH_EXT_NAME(glAreTexturesResidentEXT) = (PFNGLARETEXTURESRESIDENTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glAreTexturesResidentEXT");
        if (NULL == GLH_EXT_NAME(glAreTexturesResidentEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindTextureEXT) = (PFNGLBINDTEXTUREEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindTextureEXT");
        if (NULL == GLH_EXT_NAME(glBindTextureEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteTexturesEXT) = (PFNGLDELETETEXTURESEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteTexturesEXT");
        if (NULL == GLH_EXT_NAME(glDeleteTexturesEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGenTexturesEXT) = (PFNGLGENTEXTURESEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGenTexturesEXT");
        if (NULL == GLH_EXT_NAME(glGenTexturesEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glIsTextureEXT) = (PFNGLISTEXTUREEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIsTextureEXT");
        if (NULL == GLH_EXT_NAME(glIsTextureEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glPrioritizeTexturesEXT) = (PFNGLPRIORITIZETEXTURESEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPrioritizeTexturesEXT");
        if (NULL == GLH_EXT_NAME(glPrioritizeTexturesEXT))
            return GL_FALSE;
#endif

#ifdef GL_SGIS_detail_texture
    } else if (0 == strcmp(extension, "GL_SGIS_detail_texture")) {
        GLH_EXT_NAME(glDetailTexFuncSGIS) = (PFNGLDETAILTEXFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glDetailTexFuncSGIS");
        if (NULL == GLH_EXT_NAME(glDetailTexFuncSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glGetDetailTexFuncSGIS) = (PFNGLGETDETAILTEXFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glGetDetailTexFuncSGIS");
        if (NULL == GLH_EXT_NAME(glGetDetailTexFuncSGIS))
            return GL_FALSE;
#endif

#ifdef GL_SGIS_sharpen_texture
    } else if (0 == strcmp(extension, "GL_SGIS_sharpen_texture")) {
        GLH_EXT_NAME(glSharpenTexFuncSGIS) = (PFNGLSHARPENTEXFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glSharpenTexFuncSGIS");
        if (NULL == GLH_EXT_NAME(glSharpenTexFuncSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glGetSharpenTexFuncSGIS) = (PFNGLGETSHARPENTEXFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glGetSharpenTexFuncSGIS");
        if (NULL == GLH_EXT_NAME(glGetSharpenTexFuncSGIS))
            return GL_FALSE;
#endif

#ifdef GL_EXT_packed_pixels
    } else if (0 == strcmp(extension, "GL_EXT_packed_pixels")) {
#endif

#ifdef GL_SGIS_texture_lod
    } else if (0 == strcmp(extension, "GL_SGIS_texture_lod")) {
#endif

#ifdef GL_SGIS_multisample
    } else if (0 == strcmp(extension, "GL_SGIS_multisample")) {
        GLH_EXT_NAME(glSampleMaskSGIS) = (PFNGLSAMPLEMASKSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleMaskSGIS");
        if (NULL == GLH_EXT_NAME(glSampleMaskSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glSamplePatternSGIS) = (PFNGLSAMPLEPATTERNSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glSamplePatternSGIS");
        if (NULL == GLH_EXT_NAME(glSamplePatternSGIS))
            return GL_FALSE;
#endif

#ifdef GL_EXT_rescale_normal
    } else if (0 == strcmp(extension, "GL_EXT_rescale_normal")) {
#endif

#ifdef GL_EXT_vertex_array
    } else if (0 == strcmp(extension, "GL_EXT_vertex_array")) {
        GLH_EXT_NAME(glArrayElementEXT) = (PFNGLARRAYELEMENTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glArrayElementEXT");
        if (NULL == GLH_EXT_NAME(glArrayElementEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glColorPointerEXT) = (PFNGLCOLORPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glColorPointerEXT");
        if (NULL == GLH_EXT_NAME(glColorPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDrawArraysEXT) = (PFNGLDRAWARRAYSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawArraysEXT");
        if (NULL == GLH_EXT_NAME(glDrawArraysEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glEdgeFlagPointerEXT) = (PFNGLEDGEFLAGPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glEdgeFlagPointerEXT");
        if (NULL == GLH_EXT_NAME(glEdgeFlagPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetPointervEXT) = (PFNGLGETPOINTERVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetPointervEXT");
        if (NULL == GLH_EXT_NAME(glGetPointervEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glIndexPointerEXT) = (PFNGLINDEXPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIndexPointerEXT");
        if (NULL == GLH_EXT_NAME(glIndexPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalPointerEXT) = (PFNGLNORMALPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalPointerEXT");
        if (NULL == GLH_EXT_NAME(glNormalPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoordPointerEXT) = (PFNGLTEXCOORDPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoordPointerEXT");
        if (NULL == GLH_EXT_NAME(glTexCoordPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexPointerEXT) = (PFNGLVERTEXPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexPointerEXT");
        if (NULL == GLH_EXT_NAME(glVertexPointerEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_misc_attribute
    } else if (0 == strcmp(extension, "GL_EXT_misc_attribute")) {
#endif

#ifdef GL_SGIS_generate_mipmap
    } else if (0 == strcmp(extension, "GL_SGIS_generate_mipmap")) {
#endif

#ifdef GL_SGIX_clipmap
    } else if (0 == strcmp(extension, "GL_SGIX_clipmap")) {
#endif

#ifdef GL_SGIX_shadow
    } else if (0 == strcmp(extension, "GL_SGIX_shadow")) {
#endif

#ifdef GL_SGIS_texture_edge_clamp
    } else if (0 == strcmp(extension, "GL_SGIS_texture_edge_clamp")) {
#endif

#ifdef GL_SGIS_texture_border_clamp
    } else if (0 == strcmp(extension, "GL_SGIS_texture_border_clamp")) {
#endif

#ifdef GL_EXT_blend_minmax
    } else if (0 == strcmp(extension, "GL_EXT_blend_minmax")) {
        GLH_EXT_NAME(glBlendEquationEXT) = (PFNGLBLENDEQUATIONEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquationEXT");
        if (NULL == GLH_EXT_NAME(glBlendEquationEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_blend_subtract
    } else if (0 == strcmp(extension, "GL_EXT_blend_subtract")) {
#endif

#ifdef GL_EXT_blend_logic_op
    } else if (0 == strcmp(extension, "GL_EXT_blend_logic_op")) {
#endif

#ifdef GL_SGIX_interlace
    } else if (0 == strcmp(extension, "GL_SGIX_interlace")) {
#endif

#ifdef GL_SGIX_pixel_tiles
    } else if (0 == strcmp(extension, "GL_SGIX_pixel_tiles")) {
#endif

#ifdef GL_SGIX_texture_select
    } else if (0 == strcmp(extension, "GL_SGIX_texture_select")) {
#endif

#ifdef GL_SGIX_sprite
    } else if (0 == strcmp(extension, "GL_SGIX_sprite")) {
        GLH_EXT_NAME(glSpriteParameterfSGIX) = (PFNGLSPRITEPARAMETERFSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glSpriteParameterfSGIX");
        if (NULL == GLH_EXT_NAME(glSpriteParameterfSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glSpriteParameterfvSGIX) = (PFNGLSPRITEPARAMETERFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glSpriteParameterfvSGIX");
        if (NULL == GLH_EXT_NAME(glSpriteParameterfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glSpriteParameteriSGIX) = (PFNGLSPRITEPARAMETERISGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glSpriteParameteriSGIX");
        if (NULL == GLH_EXT_NAME(glSpriteParameteriSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glSpriteParameterivSGIX) = (PFNGLSPRITEPARAMETERIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glSpriteParameterivSGIX");
        if (NULL == GLH_EXT_NAME(glSpriteParameterivSGIX))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_texture_multi_buffer
    } else if (0 == strcmp(extension, "GL_SGIX_texture_multi_buffer")) {
#endif

#ifdef GL_EXT_point_parameters
    } else if (0 == strcmp(extension, "GL_EXT_point_parameters")) {
        GLH_EXT_NAME(glPointParameterfEXT) = (PFNGLPOINTPARAMETERFEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfEXT");
        if (NULL == GLH_EXT_NAME(glPointParameterfEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glPointParameterfvEXT) = (PFNGLPOINTPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glPointParameterfvEXT))
            return GL_FALSE;
#endif

#ifdef GL_SGIS_point_parameters
    } else if (0 == strcmp(extension, "GL_SGIS_point_parameters")) {
        GLH_EXT_NAME(glPointParameterfSGIS) = (PFNGLPOINTPARAMETERFSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfSGIS");
        if (NULL == GLH_EXT_NAME(glPointParameterfSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glPointParameterfvSGIS) = (PFNGLPOINTPARAMETERFVSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterfvSGIS");
        if (NULL == GLH_EXT_NAME(glPointParameterfvSGIS))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_instruments
    } else if (0 == strcmp(extension, "GL_SGIX_instruments")) {
        GLH_EXT_NAME(glGetInstrumentsSGIX) = (PFNGLGETINSTRUMENTSSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetInstrumentsSGIX");
        if (NULL == GLH_EXT_NAME(glGetInstrumentsSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glInstrumentsBufferSGIX) = (PFNGLINSTRUMENTSBUFFERSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glInstrumentsBufferSGIX");
        if (NULL == GLH_EXT_NAME(glInstrumentsBufferSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glPollInstrumentsSGIX) = (PFNGLPOLLINSTRUMENTSSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glPollInstrumentsSGIX");
        if (NULL == GLH_EXT_NAME(glPollInstrumentsSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glReadInstrumentsSGIX) = (PFNGLREADINSTRUMENTSSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glReadInstrumentsSGIX");
        if (NULL == GLH_EXT_NAME(glReadInstrumentsSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glStartInstrumentsSGIX) = (PFNGLSTARTINSTRUMENTSSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glStartInstrumentsSGIX");
        if (NULL == GLH_EXT_NAME(glStartInstrumentsSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glStopInstrumentsSGIX) = (PFNGLSTOPINSTRUMENTSSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glStopInstrumentsSGIX");
        if (NULL == GLH_EXT_NAME(glStopInstrumentsSGIX))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_texture_scale_bias
    } else if (0 == strcmp(extension, "GL_SGIX_texture_scale_bias")) {
#endif

#ifdef GL_SGIX_framezoom
    } else if (0 == strcmp(extension, "GL_SGIX_framezoom")) {
        GLH_EXT_NAME(glFrameZoomSGIX) = (PFNGLFRAMEZOOMSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFrameZoomSGIX");
        if (NULL == GLH_EXT_NAME(glFrameZoomSGIX))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_tag_sample_buffer
    } else if (0 == strcmp(extension, "GL_SGIX_tag_sample_buffer")) {
        GLH_EXT_NAME(glTagSampleBufferSGIX) = (PFNGLTAGSAMPLEBUFFERSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glTagSampleBufferSGIX");
        if (NULL == GLH_EXT_NAME(glTagSampleBufferSGIX))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_polynomial_ffd
    } else if (0 == strcmp(extension, "GL_SGIX_polynomial_ffd")) {
        GLH_EXT_NAME(glDeformationMap3dSGIX) = (PFNGLDEFORMATIONMAP3DSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glDeformationMap3dSGIX");
        if (NULL == GLH_EXT_NAME(glDeformationMap3dSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glDeformationMap3fSGIX) = (PFNGLDEFORMATIONMAP3FSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glDeformationMap3fSGIX");
        if (NULL == GLH_EXT_NAME(glDeformationMap3fSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glDeformSGIX) = (PFNGLDEFORMSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glDeformSGIX");
        if (NULL == GLH_EXT_NAME(glDeformSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glLoadIdentityDeformationMapSGIX) = (PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadIdentityDeformationMapSGIX");
        if (NULL == GLH_EXT_NAME(glLoadIdentityDeformationMapSGIX))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_reference_plane
    } else if (0 == strcmp(extension, "GL_SGIX_reference_plane")) {
        GLH_EXT_NAME(glReferencePlaneSGIX) = (PFNGLREFERENCEPLANESGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glReferencePlaneSGIX");
        if (NULL == GLH_EXT_NAME(glReferencePlaneSGIX))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_flush_raster
    } else if (0 == strcmp(extension, "GL_SGIX_flush_raster")) {
        GLH_EXT_NAME(glFlushRasterSGIX) = (PFNGLFLUSHRASTERSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFlushRasterSGIX");
        if (NULL == GLH_EXT_NAME(glFlushRasterSGIX))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_depth_texture
    } else if (0 == strcmp(extension, "GL_SGIX_depth_texture")) {
#endif

#ifdef GL_SGIS_fog_function
    } else if (0 == strcmp(extension, "GL_SGIS_fog_function")) {
        GLH_EXT_NAME(glFogFuncSGIS) = (PFNGLFOGFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glFogFuncSGIS");
        if (NULL == GLH_EXT_NAME(glFogFuncSGIS))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFogFuncSGIS) = (PFNGLGETFOGFUNCSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFogFuncSGIS");
        if (NULL == GLH_EXT_NAME(glGetFogFuncSGIS))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_fog_offset
    } else if (0 == strcmp(extension, "GL_SGIX_fog_offset")) {
#endif

#ifdef GL_HP_image_transform
    } else if (0 == strcmp(extension, "GL_HP_image_transform")) {
        GLH_EXT_NAME(glImageTransformParameteriHP) = (PFNGLIMAGETRANSFORMPARAMETERIHPPROC)GLH_EXT_GET_PROC_ADDRESS("glImageTransformParameteriHP");
        if (NULL == GLH_EXT_NAME(glImageTransformParameteriHP))
            return GL_FALSE;
        GLH_EXT_NAME(glImageTransformParameterfHP) = (PFNGLIMAGETRANSFORMPARAMETERFHPPROC)GLH_EXT_GET_PROC_ADDRESS("glImageTransformParameterfHP");
        if (NULL == GLH_EXT_NAME(glImageTransformParameterfHP))
            return GL_FALSE;
        GLH_EXT_NAME(glImageTransformParameterivHP) = (PFNGLIMAGETRANSFORMPARAMETERIVHPPROC)GLH_EXT_GET_PROC_ADDRESS("glImageTransformParameterivHP");
        if (NULL == GLH_EXT_NAME(glImageTransformParameterivHP))
            return GL_FALSE;
        GLH_EXT_NAME(glImageTransformParameterfvHP) = (PFNGLIMAGETRANSFORMPARAMETERFVHPPROC)GLH_EXT_GET_PROC_ADDRESS("glImageTransformParameterfvHP");
        if (NULL == GLH_EXT_NAME(glImageTransformParameterfvHP))
            return GL_FALSE;
        GLH_EXT_NAME(glGetImageTransformParameterivHP) = (PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC)GLH_EXT_GET_PROC_ADDRESS("glGetImageTransformParameterivHP");
        if (NULL == GLH_EXT_NAME(glGetImageTransformParameterivHP))
            return GL_FALSE;
        GLH_EXT_NAME(glGetImageTransformParameterfvHP) = (PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC)GLH_EXT_GET_PROC_ADDRESS("glGetImageTransformParameterfvHP");
        if (NULL == GLH_EXT_NAME(glGetImageTransformParameterfvHP))
            return GL_FALSE;
#endif

#ifdef GL_HP_convolution_border_modes
    } else if (0 == strcmp(extension, "GL_HP_convolution_border_modes")) {
#endif

#ifdef GL_SGIX_texture_add_env
    } else if (0 == strcmp(extension, "GL_SGIX_texture_add_env")) {
#endif

#ifdef GL_EXT_color_subtable
    } else if (0 == strcmp(extension, "GL_EXT_color_subtable")) {
        GLH_EXT_NAME(glColorSubTableEXT) = (PFNGLCOLORSUBTABLEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glColorSubTableEXT");
        if (NULL == GLH_EXT_NAME(glColorSubTableEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCopyColorSubTableEXT) = (PFNGLCOPYCOLORSUBTABLEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCopyColorSubTableEXT");
        if (NULL == GLH_EXT_NAME(glCopyColorSubTableEXT))
            return GL_FALSE;
#endif

#ifdef GL_PGI_vertex_hints
    } else if (0 == strcmp(extension, "GL_PGI_vertex_hints")) {
#endif

#ifdef GL_PGI_misc_hints
    } else if (0 == strcmp(extension, "GL_PGI_misc_hints")) {
        GLH_EXT_NAME(glHintPGI) = (PFNGLHINTPGIPROC)GLH_EXT_GET_PROC_ADDRESS("glHintPGI");
        if (NULL == GLH_EXT_NAME(glHintPGI))
            return GL_FALSE;
#endif

#ifdef GL_EXT_paletted_texture
    } else if (0 == strcmp(extension, "GL_EXT_paletted_texture")) {
        GLH_EXT_NAME(glColorTableEXT) = (PFNGLCOLORTABLEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glColorTableEXT");
        if (NULL == GLH_EXT_NAME(glColorTableEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetColorTableEXT) = (PFNGLGETCOLORTABLEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableEXT");
        if (NULL == GLH_EXT_NAME(glGetColorTableEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetColorTableParameterivEXT) = (PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterivEXT");
        if (NULL == GLH_EXT_NAME(glGetColorTableParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetColorTableParameterfvEXT) = (PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetColorTableParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glGetColorTableParameterfvEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_clip_volume_hint
    } else if (0 == strcmp(extension, "GL_EXT_clip_volume_hint")) {
#endif

#ifdef GL_SGIX_list_priority
    } else if (0 == strcmp(extension, "GL_SGIX_list_priority")) {
        GLH_EXT_NAME(glGetListParameterfvSGIX) = (PFNGLGETLISTPARAMETERFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetListParameterfvSGIX");
        if (NULL == GLH_EXT_NAME(glGetListParameterfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glGetListParameterivSGIX) = (PFNGLGETLISTPARAMETERIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetListParameterivSGIX");
        if (NULL == GLH_EXT_NAME(glGetListParameterivSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glListParameterfSGIX) = (PFNGLLISTPARAMETERFSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glListParameterfSGIX");
        if (NULL == GLH_EXT_NAME(glListParameterfSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glListParameterfvSGIX) = (PFNGLLISTPARAMETERFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glListParameterfvSGIX");
        if (NULL == GLH_EXT_NAME(glListParameterfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glListParameteriSGIX) = (PFNGLLISTPARAMETERISGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glListParameteriSGIX");
        if (NULL == GLH_EXT_NAME(glListParameteriSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glListParameterivSGIX) = (PFNGLLISTPARAMETERIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glListParameterivSGIX");
        if (NULL == GLH_EXT_NAME(glListParameterivSGIX))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_ir_instrument1
    } else if (0 == strcmp(extension, "GL_SGIX_ir_instrument1")) {
#endif

#ifdef GL_SGIX_calligraphic_fragment
    } else if (0 == strcmp(extension, "GL_SGIX_calligraphic_fragment")) {
#endif

#ifdef GL_SGIX_texture_lod_bias
    } else if (0 == strcmp(extension, "GL_SGIX_texture_lod_bias")) {
#endif

#ifdef GL_SGIX_shadow_ambient
    } else if (0 == strcmp(extension, "GL_SGIX_shadow_ambient")) {
#endif

#ifdef GL_EXT_index_texture
    } else if (0 == strcmp(extension, "GL_EXT_index_texture")) {
#endif

#ifdef GL_EXT_index_material
    } else if (0 == strcmp(extension, "GL_EXT_index_material")) {
        GLH_EXT_NAME(glIndexMaterialEXT) = (PFNGLINDEXMATERIALEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIndexMaterialEXT");
        if (NULL == GLH_EXT_NAME(glIndexMaterialEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_index_func
    } else if (0 == strcmp(extension, "GL_EXT_index_func")) {
        GLH_EXT_NAME(glIndexFuncEXT) = (PFNGLINDEXFUNCEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIndexFuncEXT");
        if (NULL == GLH_EXT_NAME(glIndexFuncEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_index_array_formats
    } else if (0 == strcmp(extension, "GL_EXT_index_array_formats")) {
#endif

#ifdef GL_EXT_compiled_vertex_array
    } else if (0 == strcmp(extension, "GL_EXT_compiled_vertex_array")) {
        GLH_EXT_NAME(glLockArraysEXT) = (PFNGLLOCKARRAYSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glLockArraysEXT");
        if (NULL == GLH_EXT_NAME(glLockArraysEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUnlockArraysEXT) = (PFNGLUNLOCKARRAYSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUnlockArraysEXT");
        if (NULL == GLH_EXT_NAME(glUnlockArraysEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_cull_vertex
    } else if (0 == strcmp(extension, "GL_EXT_cull_vertex")) {
        GLH_EXT_NAME(glCullParameterdvEXT) = (PFNGLCULLPARAMETERDVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCullParameterdvEXT");
        if (NULL == GLH_EXT_NAME(glCullParameterdvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCullParameterfvEXT) = (PFNGLCULLPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCullParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glCullParameterfvEXT))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_ycrcb
    } else if (0 == strcmp(extension, "GL_SGIX_ycrcb")) {
#endif

#ifdef GL_SGIX_fragment_lighting
    } else if (0 == strcmp(extension, "GL_SGIX_fragment_lighting")) {
        GLH_EXT_NAME(glFragmentColorMaterialSGIX) = (PFNGLFRAGMENTCOLORMATERIALSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentColorMaterialSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentColorMaterialSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightfSGIX) = (PFNGLFRAGMENTLIGHTFSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightfSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightfSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightfvSGIX) = (PFNGLFRAGMENTLIGHTFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightfvSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightiSGIX) = (PFNGLFRAGMENTLIGHTISGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightiSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightiSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightivSGIX) = (PFNGLFRAGMENTLIGHTIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightivSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightivSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightModelfSGIX) = (PFNGLFRAGMENTLIGHTMODELFSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightModelfSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightModelfSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightModelfvSGIX) = (PFNGLFRAGMENTLIGHTMODELFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightModelfvSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightModelfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightModeliSGIX) = (PFNGLFRAGMENTLIGHTMODELISGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightModeliSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightModeliSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentLightModelivSGIX) = (PFNGLFRAGMENTLIGHTMODELIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentLightModelivSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentLightModelivSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentMaterialfSGIX) = (PFNGLFRAGMENTMATERIALFSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentMaterialfSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentMaterialfSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentMaterialfvSGIX) = (PFNGLFRAGMENTMATERIALFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentMaterialfvSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentMaterialfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentMaterialiSGIX) = (PFNGLFRAGMENTMATERIALISGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentMaterialiSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentMaterialiSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFragmentMaterialivSGIX) = (PFNGLFRAGMENTMATERIALIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFragmentMaterialivSGIX");
        if (NULL == GLH_EXT_NAME(glFragmentMaterialivSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFragmentLightfvSGIX) = (PFNGLGETFRAGMENTLIGHTFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFragmentLightfvSGIX");
        if (NULL == GLH_EXT_NAME(glGetFragmentLightfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFragmentLightivSGIX) = (PFNGLGETFRAGMENTLIGHTIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFragmentLightivSGIX");
        if (NULL == GLH_EXT_NAME(glGetFragmentLightivSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFragmentMaterialfvSGIX) = (PFNGLGETFRAGMENTMATERIALFVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFragmentMaterialfvSGIX");
        if (NULL == GLH_EXT_NAME(glGetFragmentMaterialfvSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFragmentMaterialivSGIX) = (PFNGLGETFRAGMENTMATERIALIVSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFragmentMaterialivSGIX");
        if (NULL == GLH_EXT_NAME(glGetFragmentMaterialivSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glLightEnviSGIX) = (PFNGLLIGHTENVISGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glLightEnviSGIX");
        if (NULL == GLH_EXT_NAME(glLightEnviSGIX))
            return GL_FALSE;
#endif

#ifdef GL_IBM_rasterpos_clip
    } else if (0 == strcmp(extension, "GL_IBM_rasterpos_clip")) {
#endif

#ifdef GL_HP_texture_lighting
    } else if (0 == strcmp(extension, "GL_HP_texture_lighting")) {
#endif

#ifdef GL_EXT_draw_range_elements
    } else if (0 == strcmp(extension, "GL_EXT_draw_range_elements")) {
        GLH_EXT_NAME(glDrawRangeElementsEXT) = (PFNGLDRAWRANGEELEMENTSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElementsEXT");
        if (NULL == GLH_EXT_NAME(glDrawRangeElementsEXT))
            return GL_FALSE;
#endif

#ifdef GL_WIN_phong_shading
    } else if (0 == strcmp(extension, "GL_WIN_phong_shading")) {
#endif

#ifdef GL_WIN_specular_fog
    } else if (0 == strcmp(extension, "GL_WIN_specular_fog")) {
#endif

#ifdef GL_EXT_light_texture
    } else if (0 == strcmp(extension, "GL_EXT_light_texture")) {
        GLH_EXT_NAME(glApplyTextureEXT) = (PFNGLAPPLYTEXTUREEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glApplyTextureEXT");
        if (NULL == GLH_EXT_NAME(glApplyTextureEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTextureLightEXT) = (PFNGLTEXTURELIGHTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTextureLightEXT");
        if (NULL == GLH_EXT_NAME(glTextureLightEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTextureMaterialEXT) = (PFNGLTEXTUREMATERIALEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTextureMaterialEXT");
        if (NULL == GLH_EXT_NAME(glTextureMaterialEXT))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_blend_alpha_minmax
    } else if (0 == strcmp(extension, "GL_SGIX_blend_alpha_minmax")) {
#endif

#ifdef GL_EXT_bgra
    } else if (0 == strcmp(extension, "GL_EXT_bgra")) {
#endif

#ifdef GL_SGIX_async
    } else if (0 == strcmp(extension, "GL_SGIX_async")) {
        GLH_EXT_NAME(glAsyncMarkerSGIX) = (PFNGLASYNCMARKERSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glAsyncMarkerSGIX");
        if (NULL == GLH_EXT_NAME(glAsyncMarkerSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glFinishAsyncSGIX) = (PFNGLFINISHASYNCSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glFinishAsyncSGIX");
        if (NULL == GLH_EXT_NAME(glFinishAsyncSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glPollAsyncSGIX) = (PFNGLPOLLASYNCSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glPollAsyncSGIX");
        if (NULL == GLH_EXT_NAME(glPollAsyncSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glGenAsyncMarkersSGIX) = (PFNGLGENASYNCMARKERSSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glGenAsyncMarkersSGIX");
        if (NULL == GLH_EXT_NAME(glGenAsyncMarkersSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteAsyncMarkersSGIX) = (PFNGLDELETEASYNCMARKERSSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteAsyncMarkersSGIX");
        if (NULL == GLH_EXT_NAME(glDeleteAsyncMarkersSGIX))
            return GL_FALSE;
        GLH_EXT_NAME(glIsAsyncMarkerSGIX) = (PFNGLISASYNCMARKERSGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glIsAsyncMarkerSGIX");
        if (NULL == GLH_EXT_NAME(glIsAsyncMarkerSGIX))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_async_pixel
    } else if (0 == strcmp(extension, "GL_SGIX_async_pixel")) {
#endif

#ifdef GL_SGIX_async_histogram
    } else if (0 == strcmp(extension, "GL_SGIX_async_histogram")) {
#endif

#ifdef GL_INTEL_parallel_arrays
    } else if (0 == strcmp(extension, "GL_INTEL_parallel_arrays")) {
        GLH_EXT_NAME(glVertexPointervINTEL) = (PFNGLVERTEXPOINTERVINTELPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexPointervINTEL");
        if (NULL == GLH_EXT_NAME(glVertexPointervINTEL))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalPointervINTEL) = (PFNGLNORMALPOINTERVINTELPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalPointervINTEL");
        if (NULL == GLH_EXT_NAME(glNormalPointervINTEL))
            return GL_FALSE;
        GLH_EXT_NAME(glColorPointervINTEL) = (PFNGLCOLORPOINTERVINTELPROC)GLH_EXT_GET_PROC_ADDRESS("glColorPointervINTEL");
        if (NULL == GLH_EXT_NAME(glColorPointervINTEL))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoordPointervINTEL) = (PFNGLTEXCOORDPOINTERVINTELPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoordPointervINTEL");
        if (NULL == GLH_EXT_NAME(glTexCoordPointervINTEL))
            return GL_FALSE;
#endif

#ifdef GL_HP_occlusion_test
    } else if (0 == strcmp(extension, "GL_HP_occlusion_test")) {
#endif

#ifdef GL_EXT_pixel_transform
    } else if (0 == strcmp(extension, "GL_EXT_pixel_transform")) {
        GLH_EXT_NAME(glPixelTransformParameteriEXT) = (PFNGLPIXELTRANSFORMPARAMETERIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTransformParameteriEXT");
        if (NULL == GLH_EXT_NAME(glPixelTransformParameteriEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glPixelTransformParameterfEXT) = (PFNGLPIXELTRANSFORMPARAMETERFEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTransformParameterfEXT");
        if (NULL == GLH_EXT_NAME(glPixelTransformParameterfEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glPixelTransformParameterivEXT) = (PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTransformParameterivEXT");
        if (NULL == GLH_EXT_NAME(glPixelTransformParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glPixelTransformParameterfvEXT) = (PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelTransformParameterfvEXT");
        if (NULL == GLH_EXT_NAME(glPixelTransformParameterfvEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_pixel_transform_color_table
    } else if (0 == strcmp(extension, "GL_EXT_pixel_transform_color_table")) {
#endif

#ifdef GL_EXT_shared_texture_palette
    } else if (0 == strcmp(extension, "GL_EXT_shared_texture_palette")) {
#endif

#ifdef GL_EXT_separate_specular_color
    } else if (0 == strcmp(extension, "GL_EXT_separate_specular_color")) {
#endif

#ifdef GL_EXT_secondary_color
    } else if (0 == strcmp(extension, "GL_EXT_secondary_color")) {
        GLH_EXT_NAME(glSecondaryColor3bEXT) = (PFNGLSECONDARYCOLOR3BEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3bEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3bEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3bvEXT) = (PFNGLSECONDARYCOLOR3BVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3bvEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3bvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3dEXT) = (PFNGLSECONDARYCOLOR3DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3dEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3dEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3dvEXT) = (PFNGLSECONDARYCOLOR3DVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3dvEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3dvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3fEXT) = (PFNGLSECONDARYCOLOR3FEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3fEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3fEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3fvEXT) = (PFNGLSECONDARYCOLOR3FVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3fvEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3fvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3iEXT) = (PFNGLSECONDARYCOLOR3IEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3iEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3iEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3ivEXT) = (PFNGLSECONDARYCOLOR3IVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ivEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3ivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3sEXT) = (PFNGLSECONDARYCOLOR3SEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3sEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3sEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3svEXT) = (PFNGLSECONDARYCOLOR3SVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3svEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3svEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3ubEXT) = (PFNGLSECONDARYCOLOR3UBEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ubEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3ubEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3ubvEXT) = (PFNGLSECONDARYCOLOR3UBVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3ubvEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3ubvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3uiEXT) = (PFNGLSECONDARYCOLOR3UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3uiEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3uivEXT) = (PFNGLSECONDARYCOLOR3UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3uivEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3usEXT) = (PFNGLSECONDARYCOLOR3USEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3usEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3usEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3usvEXT) = (PFNGLSECONDARYCOLOR3USVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3usvEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3usvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColorPointerEXT) = (PFNGLSECONDARYCOLORPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColorPointerEXT");
        if (NULL == GLH_EXT_NAME(glSecondaryColorPointerEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_texture_perturb_normal
    } else if (0 == strcmp(extension, "GL_EXT_texture_perturb_normal")) {
        GLH_EXT_NAME(glTextureNormalEXT) = (PFNGLTEXTURENORMALEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTextureNormalEXT");
        if (NULL == GLH_EXT_NAME(glTextureNormalEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_multi_draw_arrays
    } else if (0 == strcmp(extension, "GL_EXT_multi_draw_arrays")) {
        GLH_EXT_NAME(glMultiDrawArraysEXT) = (PFNGLMULTIDRAWARRAYSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawArraysEXT");
        if (NULL == GLH_EXT_NAME(glMultiDrawArraysEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiDrawElementsEXT) = (PFNGLMULTIDRAWELEMENTSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawElementsEXT");
        if (NULL == GLH_EXT_NAME(glMultiDrawElementsEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_fog_coord
    } else if (0 == strcmp(extension, "GL_EXT_fog_coord")) {
        GLH_EXT_NAME(glFogCoordfEXT) = (PFNGLFOGCOORDFEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordfEXT");
        if (NULL == GLH_EXT_NAME(glFogCoordfEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFogCoordfvEXT) = (PFNGLFOGCOORDFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordfvEXT");
        if (NULL == GLH_EXT_NAME(glFogCoordfvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFogCoorddEXT) = (PFNGLFOGCOORDDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoorddEXT");
        if (NULL == GLH_EXT_NAME(glFogCoorddEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFogCoorddvEXT) = (PFNGLFOGCOORDDVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoorddvEXT");
        if (NULL == GLH_EXT_NAME(glFogCoorddvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFogCoordPointerEXT) = (PFNGLFOGCOORDPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordPointerEXT");
        if (NULL == GLH_EXT_NAME(glFogCoordPointerEXT))
            return GL_FALSE;
#endif

#ifdef GL_REND_screen_coordinates
    } else if (0 == strcmp(extension, "GL_REND_screen_coordinates")) {
#endif

#ifdef GL_EXT_coordinate_frame
    } else if (0 == strcmp(extension, "GL_EXT_coordinate_frame")) {
        GLH_EXT_NAME(glTangent3bEXT) = (PFNGLTANGENT3BEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3bEXT");
        if (NULL == GLH_EXT_NAME(glTangent3bEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3bvEXT) = (PFNGLTANGENT3BVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3bvEXT");
        if (NULL == GLH_EXT_NAME(glTangent3bvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3dEXT) = (PFNGLTANGENT3DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3dEXT");
        if (NULL == GLH_EXT_NAME(glTangent3dEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3dvEXT) = (PFNGLTANGENT3DVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3dvEXT");
        if (NULL == GLH_EXT_NAME(glTangent3dvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3fEXT) = (PFNGLTANGENT3FEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3fEXT");
        if (NULL == GLH_EXT_NAME(glTangent3fEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3fvEXT) = (PFNGLTANGENT3FVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3fvEXT");
        if (NULL == GLH_EXT_NAME(glTangent3fvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3iEXT) = (PFNGLTANGENT3IEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3iEXT");
        if (NULL == GLH_EXT_NAME(glTangent3iEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3ivEXT) = (PFNGLTANGENT3IVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3ivEXT");
        if (NULL == GLH_EXT_NAME(glTangent3ivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3sEXT) = (PFNGLTANGENT3SEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3sEXT");
        if (NULL == GLH_EXT_NAME(glTangent3sEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangent3svEXT) = (PFNGLTANGENT3SVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangent3svEXT");
        if (NULL == GLH_EXT_NAME(glTangent3svEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3bEXT) = (PFNGLBINORMAL3BEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3bEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3bEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3bvEXT) = (PFNGLBINORMAL3BVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3bvEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3bvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3dEXT) = (PFNGLBINORMAL3DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3dEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3dEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3dvEXT) = (PFNGLBINORMAL3DVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3dvEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3dvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3fEXT) = (PFNGLBINORMAL3FEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3fEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3fEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3fvEXT) = (PFNGLBINORMAL3FVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3fvEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3fvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3iEXT) = (PFNGLBINORMAL3IEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3iEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3iEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3ivEXT) = (PFNGLBINORMAL3IVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3ivEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3ivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3sEXT) = (PFNGLBINORMAL3SEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3sEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3sEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormal3svEXT) = (PFNGLBINORMAL3SVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormal3svEXT");
        if (NULL == GLH_EXT_NAME(glBinormal3svEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTangentPointerEXT) = (PFNGLTANGENTPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTangentPointerEXT");
        if (NULL == GLH_EXT_NAME(glTangentPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBinormalPointerEXT) = (PFNGLBINORMALPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBinormalPointerEXT");
        if (NULL == GLH_EXT_NAME(glBinormalPointerEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_texture_env_combine
    } else if (0 == strcmp(extension, "GL_EXT_texture_env_combine")) {
#endif

#ifdef GL_APPLE_specular_vector
    } else if (0 == strcmp(extension, "GL_APPLE_specular_vector")) {
#endif

#ifdef GL_APPLE_transform_hint
    } else if (0 == strcmp(extension, "GL_APPLE_transform_hint")) {
#endif

#ifdef GL_SGIX_fog_scale
    } else if (0 == strcmp(extension, "GL_SGIX_fog_scale")) {
#endif

#ifdef GL_SUNX_constant_data
    } else if (0 == strcmp(extension, "GL_SUNX_constant_data")) {
        GLH_EXT_NAME(glFinishTextureSUNX) = (PFNGLFINISHTEXTURESUNXPROC)GLH_EXT_GET_PROC_ADDRESS("glFinishTextureSUNX");
        if (NULL == GLH_EXT_NAME(glFinishTextureSUNX))
            return GL_FALSE;
#endif

#ifdef GL_SUN_global_alpha
    } else if (0 == strcmp(extension, "GL_SUN_global_alpha")) {
        GLH_EXT_NAME(glGlobalAlphaFactorbSUN) = (PFNGLGLOBALALPHAFACTORBSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactorbSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactorbSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glGlobalAlphaFactorsSUN) = (PFNGLGLOBALALPHAFACTORSSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactorsSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactorsSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glGlobalAlphaFactoriSUN) = (PFNGLGLOBALALPHAFACTORISUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactoriSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactoriSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glGlobalAlphaFactorfSUN) = (PFNGLGLOBALALPHAFACTORFSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactorfSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactorfSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glGlobalAlphaFactordSUN) = (PFNGLGLOBALALPHAFACTORDSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactordSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactordSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glGlobalAlphaFactorubSUN) = (PFNGLGLOBALALPHAFACTORUBSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactorubSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactorubSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glGlobalAlphaFactorusSUN) = (PFNGLGLOBALALPHAFACTORUSSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactorusSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactorusSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glGlobalAlphaFactoruiSUN) = (PFNGLGLOBALALPHAFACTORUISUNPROC)GLH_EXT_GET_PROC_ADDRESS("glGlobalAlphaFactoruiSUN");
        if (NULL == GLH_EXT_NAME(glGlobalAlphaFactoruiSUN))
            return GL_FALSE;
#endif

#ifdef GL_SUN_triangle_list
    } else if (0 == strcmp(extension, "GL_SUN_triangle_list")) {
        GLH_EXT_NAME(glReplacementCodeuiSUN) = (PFNGLREPLACEMENTCODEUISUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeusSUN) = (PFNGLREPLACEMENTCODEUSSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeusSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeusSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeubSUN) = (PFNGLREPLACEMENTCODEUBSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeubSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeubSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuivSUN) = (PFNGLREPLACEMENTCODEUIVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuivSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuivSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeusvSUN) = (PFNGLREPLACEMENTCODEUSVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeusvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeusvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeubvSUN) = (PFNGLREPLACEMENTCODEUBVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeubvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeubvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodePointerSUN) = (PFNGLREPLACEMENTCODEPOINTERSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodePointerSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodePointerSUN))
            return GL_FALSE;
#endif

#ifdef GL_SUN_vertex
    } else if (0 == strcmp(extension, "GL_SUN_vertex")) {
        GLH_EXT_NAME(glColor4ubVertex2fSUN) = (PFNGLCOLOR4UBVERTEX2FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4ubVertex2fSUN");
        if (NULL == GLH_EXT_NAME(glColor4ubVertex2fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glColor4ubVertex2fvSUN) = (PFNGLCOLOR4UBVERTEX2FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4ubVertex2fvSUN");
        if (NULL == GLH_EXT_NAME(glColor4ubVertex2fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glColor4ubVertex3fSUN) = (PFNGLCOLOR4UBVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4ubVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glColor4ubVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glColor4ubVertex3fvSUN) = (PFNGLCOLOR4UBVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4ubVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glColor4ubVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glColor3fVertex3fSUN) = (PFNGLCOLOR3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glColor3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glColor3fVertex3fvSUN) = (PFNGLCOLOR3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glColor3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glNormal3fVertex3fSUN) = (PFNGLNORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glNormal3fVertex3fvSUN) = (PFNGLNORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glNormal3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glColor4fNormal3fVertex3fSUN) = (PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4fNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glColor4fNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glColor4fNormal3fVertex3fvSUN) = (PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4fNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glColor4fNormal3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fVertex3fSUN) = (PFNGLTEXCOORD2FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fVertex3fvSUN) = (PFNGLTEXCOORD2FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord4fVertex4fSUN) = (PFNGLTEXCOORD4FVERTEX4FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord4fVertex4fSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord4fVertex4fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord4fVertex4fvSUN) = (PFNGLTEXCOORD4FVERTEX4FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord4fVertex4fvSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord4fVertex4fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fColor4ubVertex3fSUN) = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fColor4ubVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fColor4ubVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fColor4ubVertex3fvSUN) = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fColor4ubVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fColor4ubVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fColor3fVertex3fSUN) = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fColor3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fColor3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fColor3fVertex3fvSUN) = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fColor3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fColor3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fNormal3fVertex3fSUN) = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fNormal3fVertex3fvSUN) = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fNormal3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fColor4fNormal3fVertex3fSUN) = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fColor4fNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fColor4fNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2fColor4fNormal3fVertex3fvSUN) = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2fColor4fNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord2fColor4fNormal3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord4fColor4fNormal3fVertex4fSUN) = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord4fColor4fNormal3fVertex4fSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord4fColor4fNormal3fVertex4fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord4fColor4fNormal3fVertex4fvSUN) = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord4fColor4fNormal3fVertex4fvSUN");
        if (NULL == GLH_EXT_NAME(glTexCoord4fColor4fNormal3fVertex4fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiVertex3fSUN) = (PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiVertex3fvSUN) = (PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiColor4ubVertex3fSUN) = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiColor4ubVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiColor4ubVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiColor4ubVertex3fvSUN) = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiColor4ubVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiColor4ubVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiColor3fVertex3fSUN) = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiColor3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiColor3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiColor3fVertex3fvSUN) = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiColor3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiColor3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiNormal3fVertex3fSUN) = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiNormal3fVertex3fvSUN) = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiNormal3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiColor4fNormal3fVertex3fSUN) = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiColor4fNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiColor4fNormal3fVertex3fvSUN) = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiColor4fNormal3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiTexCoord2fVertex3fSUN) = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiTexCoord2fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiTexCoord2fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiTexCoord2fVertex3fvSUN) = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiTexCoord2fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiTexCoord2fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN))
            return GL_FALSE;
        GLH_EXT_NAME(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
        if (NULL == GLH_EXT_NAME(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN))
            return GL_FALSE;
#endif

#ifdef GL_EXT_blend_func_separate
    } else if (0 == strcmp(extension, "GL_EXT_blend_func_separate")) {
        GLH_EXT_NAME(glBlendFuncSeparateEXT) = (PFNGLBLENDFUNCSEPARATEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendFuncSeparateEXT");
        if (NULL == GLH_EXT_NAME(glBlendFuncSeparateEXT))
            return GL_FALSE;
#endif

#ifdef GL_INGR_blend_func_separate
    } else if (0 == strcmp(extension, "GL_INGR_blend_func_separate")) {
        GLH_EXT_NAME(glBlendFuncSeparateINGR) = (PFNGLBLENDFUNCSEPARATEINGRPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendFuncSeparateINGR");
        if (NULL == GLH_EXT_NAME(glBlendFuncSeparateINGR))
            return GL_FALSE;
#endif

#ifdef GL_INGR_color_clamp
    } else if (0 == strcmp(extension, "GL_INGR_color_clamp")) {
#endif

#ifdef GL_INGR_interlace_read
    } else if (0 == strcmp(extension, "GL_INGR_interlace_read")) {
#endif

#ifdef GL_EXT_stencil_wrap
    } else if (0 == strcmp(extension, "GL_EXT_stencil_wrap")) {
#endif

#ifdef GL_EXT_422_pixels
    } else if (0 == strcmp(extension, "GL_EXT_422_pixels")) {
#endif

#ifdef GL_NV_texgen_reflection
    } else if (0 == strcmp(extension, "GL_NV_texgen_reflection")) {
#endif

#ifdef GL_SUN_convolution_border_modes
    } else if (0 == strcmp(extension, "GL_SUN_convolution_border_modes")) {
#endif

#ifdef GL_EXT_texture_env_add
    } else if (0 == strcmp(extension, "GL_EXT_texture_env_add")) {
#endif

#ifdef GL_EXT_texture_lod_bias
    } else if (0 == strcmp(extension, "GL_EXT_texture_lod_bias")) {
#endif

#ifdef GL_EXT_texture_filter_anisotropic
    } else if (0 == strcmp(extension, "GL_EXT_texture_filter_anisotropic")) {
#endif

#ifdef GL_EXT_vertex_weighting
    } else if (0 == strcmp(extension, "GL_EXT_vertex_weighting")) {
        GLH_EXT_NAME(glVertexWeightfEXT) = (PFNGLVERTEXWEIGHTFEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexWeightfEXT");
        if (NULL == GLH_EXT_NAME(glVertexWeightfEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexWeightfvEXT) = (PFNGLVERTEXWEIGHTFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexWeightfvEXT");
        if (NULL == GLH_EXT_NAME(glVertexWeightfvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexWeightPointerEXT) = (PFNGLVERTEXWEIGHTPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexWeightPointerEXT");
        if (NULL == GLH_EXT_NAME(glVertexWeightPointerEXT))
            return GL_FALSE;
#endif

#ifdef GL_NV_light_max_exponent
    } else if (0 == strcmp(extension, "GL_NV_light_max_exponent")) {
#endif

#ifdef GL_NV_vertex_array_range
    } else if (0 == strcmp(extension, "GL_NV_vertex_array_range")) {
        GLH_EXT_NAME(glFlushVertexArrayRangeNV) = (PFNGLFLUSHVERTEXARRAYRANGENVPROC)GLH_EXT_GET_PROC_ADDRESS("glFlushVertexArrayRangeNV");
        if (NULL == GLH_EXT_NAME(glFlushVertexArrayRangeNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexArrayRangeNV) = (PFNGLVERTEXARRAYRANGENVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexArrayRangeNV");
        if (NULL == GLH_EXT_NAME(glVertexArrayRangeNV))
            return GL_FALSE;
#endif

#ifdef GL_NV_register_combiners
    } else if (0 == strcmp(extension, "GL_NV_register_combiners")) {
        GLH_EXT_NAME(glCombinerParameterfvNV) = (PFNGLCOMBINERPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerParameterfvNV");
        if (NULL == GLH_EXT_NAME(glCombinerParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glCombinerParameterfNV) = (PFNGLCOMBINERPARAMETERFNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerParameterfNV");
        if (NULL == GLH_EXT_NAME(glCombinerParameterfNV))
            return GL_FALSE;
        GLH_EXT_NAME(glCombinerParameterivNV) = (PFNGLCOMBINERPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerParameterivNV");
        if (NULL == GLH_EXT_NAME(glCombinerParameterivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glCombinerParameteriNV) = (PFNGLCOMBINERPARAMETERINVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerParameteriNV");
        if (NULL == GLH_EXT_NAME(glCombinerParameteriNV))
            return GL_FALSE;
        GLH_EXT_NAME(glCombinerInputNV) = (PFNGLCOMBINERINPUTNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerInputNV");
        if (NULL == GLH_EXT_NAME(glCombinerInputNV))
            return GL_FALSE;
        GLH_EXT_NAME(glCombinerOutputNV) = (PFNGLCOMBINEROUTPUTNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerOutputNV");
        if (NULL == GLH_EXT_NAME(glCombinerOutputNV))
            return GL_FALSE;
        GLH_EXT_NAME(glFinalCombinerInputNV) = (PFNGLFINALCOMBINERINPUTNVPROC)GLH_EXT_GET_PROC_ADDRESS("glFinalCombinerInputNV");
        if (NULL == GLH_EXT_NAME(glFinalCombinerInputNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetCombinerInputParameterfvNV) = (PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCombinerInputParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetCombinerInputParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetCombinerInputParameterivNV) = (PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCombinerInputParameterivNV");
        if (NULL == GLH_EXT_NAME(glGetCombinerInputParameterivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetCombinerOutputParameterfvNV) = (PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCombinerOutputParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetCombinerOutputParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetCombinerOutputParameterivNV) = (PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCombinerOutputParameterivNV");
        if (NULL == GLH_EXT_NAME(glGetCombinerOutputParameterivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFinalCombinerInputParameterfvNV) = (PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFinalCombinerInputParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetFinalCombinerInputParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFinalCombinerInputParameterivNV) = (PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFinalCombinerInputParameterivNV");
        if (NULL == GLH_EXT_NAME(glGetFinalCombinerInputParameterivNV))
            return GL_FALSE;
#endif

#ifdef GL_NV_fog_distance
    } else if (0 == strcmp(extension, "GL_NV_fog_distance")) {
#endif

#ifdef GL_NV_texgen_emboss
    } else if (0 == strcmp(extension, "GL_NV_texgen_emboss")) {
#endif

#ifdef GL_NV_blend_square
    } else if (0 == strcmp(extension, "GL_NV_blend_square")) {
#endif

#ifdef GL_NV_texture_env_combine4
    } else if (0 == strcmp(extension, "GL_NV_texture_env_combine4")) {
#endif

#ifdef GL_MESA_resize_buffers
    } else if (0 == strcmp(extension, "GL_MESA_resize_buffers")) {
        GLH_EXT_NAME(glResizeBuffersMESA) = (PFNGLRESIZEBUFFERSMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glResizeBuffersMESA");
        if (NULL == GLH_EXT_NAME(glResizeBuffersMESA))
            return GL_FALSE;
#endif

#ifdef GL_MESA_window_pos
    } else if (0 == strcmp(extension, "GL_MESA_window_pos")) {
        GLH_EXT_NAME(glWindowPos2dMESA) = (PFNGLWINDOWPOS2DMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2dMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2dvMESA) = (PFNGLWINDOWPOS2DVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2dvMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2dvMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2fMESA) = (PFNGLWINDOWPOS2FMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2fMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2fvMESA) = (PFNGLWINDOWPOS2FVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2fvMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2fvMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2iMESA) = (PFNGLWINDOWPOS2IMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2iMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2iMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2ivMESA) = (PFNGLWINDOWPOS2IVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2ivMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2ivMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2sMESA) = (PFNGLWINDOWPOS2SMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2sMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2sMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos2svMESA) = (PFNGLWINDOWPOS2SVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos2svMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos2svMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3dMESA) = (PFNGLWINDOWPOS3DMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3dMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3dvMESA) = (PFNGLWINDOWPOS3DVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3dvMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3dvMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3fMESA) = (PFNGLWINDOWPOS3FMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3fMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3fvMESA) = (PFNGLWINDOWPOS3FVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3fvMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3fvMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3iMESA) = (PFNGLWINDOWPOS3IMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3iMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3iMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3ivMESA) = (PFNGLWINDOWPOS3IVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3ivMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3ivMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3sMESA) = (PFNGLWINDOWPOS3SMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3sMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3sMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos3svMESA) = (PFNGLWINDOWPOS3SVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos3svMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos3svMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4dMESA) = (PFNGLWINDOWPOS4DMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4dMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4dMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4dvMESA) = (PFNGLWINDOWPOS4DVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4dvMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4dvMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4fMESA) = (PFNGLWINDOWPOS4FMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4fMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4fMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4fvMESA) = (PFNGLWINDOWPOS4FVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4fvMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4fvMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4iMESA) = (PFNGLWINDOWPOS4IMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4iMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4iMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4ivMESA) = (PFNGLWINDOWPOS4IVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4ivMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4ivMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4sMESA) = (PFNGLWINDOWPOS4SMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4sMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4sMESA))
            return GL_FALSE;
        GLH_EXT_NAME(glWindowPos4svMESA) = (PFNGLWINDOWPOS4SVMESAPROC)GLH_EXT_GET_PROC_ADDRESS("glWindowPos4svMESA");
        if (NULL == GLH_EXT_NAME(glWindowPos4svMESA))
            return GL_FALSE;
#endif

#ifdef GL_EXT_texture_compression_s3tc
    } else if (0 == strcmp(extension, "GL_EXT_texture_compression_s3tc")) {
#endif

#ifdef GL_IBM_cull_vertex
    } else if (0 == strcmp(extension, "GL_IBM_cull_vertex")) {
#endif

#ifdef GL_IBM_multimode_draw_arrays
    } else if (0 == strcmp(extension, "GL_IBM_multimode_draw_arrays")) {
        GLH_EXT_NAME(glMultiModeDrawArraysIBM) = (PFNGLMULTIMODEDRAWARRAYSIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiModeDrawArraysIBM");
        if (NULL == GLH_EXT_NAME(glMultiModeDrawArraysIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiModeDrawElementsIBM) = (PFNGLMULTIMODEDRAWELEMENTSIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiModeDrawElementsIBM");
        if (NULL == GLH_EXT_NAME(glMultiModeDrawElementsIBM))
            return GL_FALSE;
#endif

#ifdef GL_IBM_vertex_array_lists
    } else if (0 == strcmp(extension, "GL_IBM_vertex_array_lists")) {
        GLH_EXT_NAME(glColorPointerListIBM) = (PFNGLCOLORPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glColorPointerListIBM");
        if (NULL == GLH_EXT_NAME(glColorPointerListIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColorPointerListIBM) = (PFNGLSECONDARYCOLORPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColorPointerListIBM");
        if (NULL == GLH_EXT_NAME(glSecondaryColorPointerListIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glEdgeFlagPointerListIBM) = (PFNGLEDGEFLAGPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glEdgeFlagPointerListIBM");
        if (NULL == GLH_EXT_NAME(glEdgeFlagPointerListIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glFogCoordPointerListIBM) = (PFNGLFOGCOORDPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordPointerListIBM");
        if (NULL == GLH_EXT_NAME(glFogCoordPointerListIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glIndexPointerListIBM) = (PFNGLINDEXPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glIndexPointerListIBM");
        if (NULL == GLH_EXT_NAME(glIndexPointerListIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalPointerListIBM) = (PFNGLNORMALPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalPointerListIBM");
        if (NULL == GLH_EXT_NAME(glNormalPointerListIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoordPointerListIBM) = (PFNGLTEXCOORDPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoordPointerListIBM");
        if (NULL == GLH_EXT_NAME(glTexCoordPointerListIBM))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexPointerListIBM) = (PFNGLVERTEXPOINTERLISTIBMPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexPointerListIBM");
        if (NULL == GLH_EXT_NAME(glVertexPointerListIBM))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_subsample
    } else if (0 == strcmp(extension, "GL_SGIX_subsample")) {
#endif

#ifdef GL_SGIX_ycrcba
    } else if (0 == strcmp(extension, "GL_SGIX_ycrcba")) {
#endif

#ifdef GL_SGIX_ycrcb_subsample
    } else if (0 == strcmp(extension, "GL_SGIX_ycrcb_subsample")) {
#endif

#ifdef GL_SGIX_depth_pass_instrument
    } else if (0 == strcmp(extension, "GL_SGIX_depth_pass_instrument")) {
#endif

#ifdef GL_3DFX_texture_compression_FXT1
    } else if (0 == strcmp(extension, "GL_3DFX_texture_compression_FXT1")) {
#endif

#ifdef GL_3DFX_multisample
    } else if (0 == strcmp(extension, "GL_3DFX_multisample")) {
#endif

#ifdef GL_3DFX_tbuffer
    } else if (0 == strcmp(extension, "GL_3DFX_tbuffer")) {
        GLH_EXT_NAME(glTbufferMask3DFX) = (PFNGLTBUFFERMASK3DFXPROC)GLH_EXT_GET_PROC_ADDRESS("glTbufferMask3DFX");
        if (NULL == GLH_EXT_NAME(glTbufferMask3DFX))
            return GL_FALSE;
#endif

#ifdef GL_EXT_multisample
    } else if (0 == strcmp(extension, "GL_EXT_multisample")) {
        GLH_EXT_NAME(glSampleMaskEXT) = (PFNGLSAMPLEMASKEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleMaskEXT");
        if (NULL == GLH_EXT_NAME(glSampleMaskEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSamplePatternEXT) = (PFNGLSAMPLEPATTERNEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSamplePatternEXT");
        if (NULL == GLH_EXT_NAME(glSamplePatternEXT))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_vertex_preclip
    } else if (0 == strcmp(extension, "GL_SGIX_vertex_preclip")) {
#endif

#ifdef GL_SGIX_convolution_accuracy
    } else if (0 == strcmp(extension, "GL_SGIX_convolution_accuracy")) {
#endif

#ifdef GL_SGIX_resample
    } else if (0 == strcmp(extension, "GL_SGIX_resample")) {
#endif

#ifdef GL_SGIS_point_line_texgen
    } else if (0 == strcmp(extension, "GL_SGIS_point_line_texgen")) {
#endif

#ifdef GL_SGIS_texture_color_mask
    } else if (0 == strcmp(extension, "GL_SGIS_texture_color_mask")) {
        GLH_EXT_NAME(glTextureColorMaskSGIS) = (PFNGLTEXTURECOLORMASKSGISPROC)GLH_EXT_GET_PROC_ADDRESS("glTextureColorMaskSGIS");
        if (NULL == GLH_EXT_NAME(glTextureColorMaskSGIS))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_igloo_interface
    } else if (0 == strcmp(extension, "GL_SGIX_igloo_interface")) {
        GLH_EXT_NAME(glIglooInterfaceSGIX) = (PFNGLIGLOOINTERFACESGIXPROC)GLH_EXT_GET_PROC_ADDRESS("glIglooInterfaceSGIX");
        if (NULL == GLH_EXT_NAME(glIglooInterfaceSGIX))
            return GL_FALSE;
#endif

#ifdef GL_EXT_texture_env_dot3
    } else if (0 == strcmp(extension, "GL_EXT_texture_env_dot3")) {
#endif

#ifdef GL_ATI_texture_mirror_once
    } else if (0 == strcmp(extension, "GL_ATI_texture_mirror_once")) {
#endif

#ifdef GL_NV_fence
    } else if (0 == strcmp(extension, "GL_NV_fence")) {
        GLH_EXT_NAME(glDeleteFencesNV) = (PFNGLDELETEFENCESNVPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteFencesNV");
        if (NULL == GLH_EXT_NAME(glDeleteFencesNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGenFencesNV) = (PFNGLGENFENCESNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGenFencesNV");
        if (NULL == GLH_EXT_NAME(glGenFencesNV))
            return GL_FALSE;
        GLH_EXT_NAME(glIsFenceNV) = (PFNGLISFENCENVPROC)GLH_EXT_GET_PROC_ADDRESS("glIsFenceNV");
        if (NULL == GLH_EXT_NAME(glIsFenceNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTestFenceNV) = (PFNGLTESTFENCENVPROC)GLH_EXT_GET_PROC_ADDRESS("glTestFenceNV");
        if (NULL == GLH_EXT_NAME(glTestFenceNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFenceivNV) = (PFNGLGETFENCEIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFenceivNV");
        if (NULL == GLH_EXT_NAME(glGetFenceivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glFinishFenceNV) = (PFNGLFINISHFENCENVPROC)GLH_EXT_GET_PROC_ADDRESS("glFinishFenceNV");
        if (NULL == GLH_EXT_NAME(glFinishFenceNV))
            return GL_FALSE;
        GLH_EXT_NAME(glSetFenceNV) = (PFNGLSETFENCENVPROC)GLH_EXT_GET_PROC_ADDRESS("glSetFenceNV");
        if (NULL == GLH_EXT_NAME(glSetFenceNV))
            return GL_FALSE;
#endif

#ifdef GL_NV_evaluators
    } else if (0 == strcmp(extension, "GL_NV_evaluators")) {
        GLH_EXT_NAME(glMapControlPointsNV) = (PFNGLMAPCONTROLPOINTSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMapControlPointsNV");
        if (NULL == GLH_EXT_NAME(glMapControlPointsNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMapParameterivNV) = (PFNGLMAPPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMapParameterivNV");
        if (NULL == GLH_EXT_NAME(glMapParameterivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMapParameterfvNV) = (PFNGLMAPPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMapParameterfvNV");
        if (NULL == GLH_EXT_NAME(glMapParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMapControlPointsNV) = (PFNGLGETMAPCONTROLPOINTSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMapControlPointsNV");
        if (NULL == GLH_EXT_NAME(glGetMapControlPointsNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMapParameterivNV) = (PFNGLGETMAPPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMapParameterivNV");
        if (NULL == GLH_EXT_NAME(glGetMapParameterivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMapParameterfvNV) = (PFNGLGETMAPPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMapParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetMapParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMapAttribParameterivNV) = (PFNGLGETMAPATTRIBPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMapAttribParameterivNV");
        if (NULL == GLH_EXT_NAME(glGetMapAttribParameterivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetMapAttribParameterfvNV) = (PFNGLGETMAPATTRIBPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetMapAttribParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetMapAttribParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glEvalMapsNV) = (PFNGLEVALMAPSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glEvalMapsNV");
        if (NULL == GLH_EXT_NAME(glEvalMapsNV))
            return GL_FALSE;
#endif

#ifdef GL_NV_packed_depth_stencil
    } else if (0 == strcmp(extension, "GL_NV_packed_depth_stencil")) {
#endif

#ifdef GL_NV_register_combiners2
    } else if (0 == strcmp(extension, "GL_NV_register_combiners2")) {
        GLH_EXT_NAME(glCombinerStageParameterfvNV) = (PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glCombinerStageParameterfvNV");
        if (NULL == GLH_EXT_NAME(glCombinerStageParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetCombinerStageParameterfvNV) = (PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetCombinerStageParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetCombinerStageParameterfvNV))
            return GL_FALSE;
#endif

#ifdef GL_NV_texture_compression_vtc
    } else if (0 == strcmp(extension, "GL_NV_texture_compression_vtc")) {
#endif

#ifdef GL_NV_texture_rectangle
    } else if (0 == strcmp(extension, "GL_NV_texture_rectangle")) {
#endif

#ifdef GL_NV_texture_shader
    } else if (0 == strcmp(extension, "GL_NV_texture_shader")) {
#endif

#ifdef GL_NV_texture_shader2
    } else if (0 == strcmp(extension, "GL_NV_texture_shader2")) {
#endif

#ifdef GL_NV_vertex_array_range2
    } else if (0 == strcmp(extension, "GL_NV_vertex_array_range2")) {
#endif

#ifdef GL_NV_vertex_program
    } else if (0 == strcmp(extension, "GL_NV_vertex_program")) {
        GLH_EXT_NAME(glAreProgramsResidentNV) = (PFNGLAREPROGRAMSRESIDENTNVPROC)GLH_EXT_GET_PROC_ADDRESS("glAreProgramsResidentNV");
        if (NULL == GLH_EXT_NAME(glAreProgramsResidentNV))
            return GL_FALSE;
        GLH_EXT_NAME(glBindProgramNV) = (PFNGLBINDPROGRAMNVPROC)GLH_EXT_GET_PROC_ADDRESS("glBindProgramNV");
        if (NULL == GLH_EXT_NAME(glBindProgramNV))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteProgramsNV) = (PFNGLDELETEPROGRAMSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteProgramsNV");
        if (NULL == GLH_EXT_NAME(glDeleteProgramsNV))
            return GL_FALSE;
        GLH_EXT_NAME(glExecuteProgramNV) = (PFNGLEXECUTEPROGRAMNVPROC)GLH_EXT_GET_PROC_ADDRESS("glExecuteProgramNV");
        if (NULL == GLH_EXT_NAME(glExecuteProgramNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGenProgramsNV) = (PFNGLGENPROGRAMSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGenProgramsNV");
        if (NULL == GLH_EXT_NAME(glGenProgramsNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramParameterdvNV) = (PFNGLGETPROGRAMPARAMETERDVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramParameterdvNV");
        if (NULL == GLH_EXT_NAME(glGetProgramParameterdvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramParameterfvNV) = (PFNGLGETPROGRAMPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetProgramParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramivNV) = (PFNGLGETPROGRAMIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramivNV");
        if (NULL == GLH_EXT_NAME(glGetProgramivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramStringNV) = (PFNGLGETPROGRAMSTRINGNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramStringNV");
        if (NULL == GLH_EXT_NAME(glGetProgramStringNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetTrackMatrixivNV) = (PFNGLGETTRACKMATRIXIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetTrackMatrixivNV");
        if (NULL == GLH_EXT_NAME(glGetTrackMatrixivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribdvNV) = (PFNGLGETVERTEXATTRIBDVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribdvNV");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribdvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribfvNV) = (PFNGLGETVERTEXATTRIBFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribfvNV");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribivNV) = (PFNGLGETVERTEXATTRIBIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribivNV");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribPointervNV) = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribPointervNV");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribPointervNV))
            return GL_FALSE;
        GLH_EXT_NAME(glIsProgramNV) = (PFNGLISPROGRAMNVPROC)GLH_EXT_GET_PROC_ADDRESS("glIsProgramNV");
        if (NULL == GLH_EXT_NAME(glIsProgramNV))
            return GL_FALSE;
        GLH_EXT_NAME(glLoadProgramNV) = (PFNGLLOADPROGRAMNVPROC)GLH_EXT_GET_PROC_ADDRESS("glLoadProgramNV");
        if (NULL == GLH_EXT_NAME(glLoadProgramNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramParameter4dNV) = (PFNGLPROGRAMPARAMETER4DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameter4dNV");
        if (NULL == GLH_EXT_NAME(glProgramParameter4dNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramParameter4dvNV) = (PFNGLPROGRAMPARAMETER4DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameter4dvNV");
        if (NULL == GLH_EXT_NAME(glProgramParameter4dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramParameter4fNV) = (PFNGLPROGRAMPARAMETER4FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameter4fNV");
        if (NULL == GLH_EXT_NAME(glProgramParameter4fNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramParameter4fvNV) = (PFNGLPROGRAMPARAMETER4FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameter4fvNV");
        if (NULL == GLH_EXT_NAME(glProgramParameter4fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramParameters4dvNV) = (PFNGLPROGRAMPARAMETERS4DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameters4dvNV");
        if (NULL == GLH_EXT_NAME(glProgramParameters4dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramParameters4fvNV) = (PFNGLPROGRAMPARAMETERS4FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameters4fvNV");
        if (NULL == GLH_EXT_NAME(glProgramParameters4fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glRequestResidentProgramsNV) = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glRequestResidentProgramsNV");
        if (NULL == GLH_EXT_NAME(glRequestResidentProgramsNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTrackMatrixNV) = (PFNGLTRACKMATRIXNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTrackMatrixNV");
        if (NULL == GLH_EXT_NAME(glTrackMatrixNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribPointerNV) = (PFNGLVERTEXATTRIBPOINTERNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribPointerNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribPointerNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1dNV) = (PFNGLVERTEXATTRIB1DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1dNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1dNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1dvNV) = (PFNGLVERTEXATTRIB1DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1fNV) = (PFNGLVERTEXATTRIB1FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1fNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1fNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1fvNV) = (PFNGLVERTEXATTRIB1FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1sNV) = (PFNGLVERTEXATTRIB1SNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1sNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1sNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1svNV) = (PFNGLVERTEXATTRIB1SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2dNV) = (PFNGLVERTEXATTRIB2DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2dNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2dNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2dvNV) = (PFNGLVERTEXATTRIB2DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2fNV) = (PFNGLVERTEXATTRIB2FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2fNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2fNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2fvNV) = (PFNGLVERTEXATTRIB2FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2sNV) = (PFNGLVERTEXATTRIB2SNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2sNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2sNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2svNV) = (PFNGLVERTEXATTRIB2SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3dNV) = (PFNGLVERTEXATTRIB3DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3dNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3dNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3dvNV) = (PFNGLVERTEXATTRIB3DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3fNV) = (PFNGLVERTEXATTRIB3FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3fNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3fNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3fvNV) = (PFNGLVERTEXATTRIB3FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3sNV) = (PFNGLVERTEXATTRIB3SNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3sNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3sNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3svNV) = (PFNGLVERTEXATTRIB3SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4dNV) = (PFNGLVERTEXATTRIB4DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4dNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4dNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4dvNV) = (PFNGLVERTEXATTRIB4DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4fNV) = (PFNGLVERTEXATTRIB4FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4fNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4fNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4fvNV) = (PFNGLVERTEXATTRIB4FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4sNV) = (PFNGLVERTEXATTRIB4SNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4sNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4sNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4svNV) = (PFNGLVERTEXATTRIB4SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4ubNV) = (PFNGLVERTEXATTRIB4UBNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4ubNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4ubNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4ubvNV) = (PFNGLVERTEXATTRIB4UBVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4ubvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4ubvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs1dvNV) = (PFNGLVERTEXATTRIBS1DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs1dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs1dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs1fvNV) = (PFNGLVERTEXATTRIBS1FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs1fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs1fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs1svNV) = (PFNGLVERTEXATTRIBS1SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs1svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs1svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs2dvNV) = (PFNGLVERTEXATTRIBS2DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs2dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs2dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs2fvNV) = (PFNGLVERTEXATTRIBS2FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs2fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs2fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs2svNV) = (PFNGLVERTEXATTRIBS2SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs2svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs2svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs3dvNV) = (PFNGLVERTEXATTRIBS3DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs3dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs3dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs3fvNV) = (PFNGLVERTEXATTRIBS3FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs3fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs3fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs3svNV) = (PFNGLVERTEXATTRIBS3SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs3svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs3svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs4dvNV) = (PFNGLVERTEXATTRIBS4DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs4dvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs4dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs4fvNV) = (PFNGLVERTEXATTRIBS4FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs4fvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs4fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs4svNV) = (PFNGLVERTEXATTRIBS4SVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs4svNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs4svNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs4ubvNV) = (PFNGLVERTEXATTRIBS4UBVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs4ubvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs4ubvNV))
            return GL_FALSE;
#endif

#ifdef GL_SGIX_texture_coordinate_clamp
    } else if (0 == strcmp(extension, "GL_SGIX_texture_coordinate_clamp")) {
#endif

#ifdef GL_SGIX_scalebias_hint
    } else if (0 == strcmp(extension, "GL_SGIX_scalebias_hint")) {
#endif

#ifdef GL_OML_interlace
    } else if (0 == strcmp(extension, "GL_OML_interlace")) {
#endif

#ifdef GL_OML_subsample
    } else if (0 == strcmp(extension, "GL_OML_subsample")) {
#endif

#ifdef GL_OML_resample
    } else if (0 == strcmp(extension, "GL_OML_resample")) {
#endif

#ifdef GL_NV_copy_depth_to_color
    } else if (0 == strcmp(extension, "GL_NV_copy_depth_to_color")) {
#endif

#ifdef GL_ATI_envmap_bumpmap
    } else if (0 == strcmp(extension, "GL_ATI_envmap_bumpmap")) {
        GLH_EXT_NAME(glTexBumpParameterivATI) = (PFNGLTEXBUMPPARAMETERIVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glTexBumpParameterivATI");
        if (NULL == GLH_EXT_NAME(glTexBumpParameterivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glTexBumpParameterfvATI) = (PFNGLTEXBUMPPARAMETERFVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glTexBumpParameterfvATI");
        if (NULL == GLH_EXT_NAME(glTexBumpParameterfvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetTexBumpParameterivATI) = (PFNGLGETTEXBUMPPARAMETERIVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetTexBumpParameterivATI");
        if (NULL == GLH_EXT_NAME(glGetTexBumpParameterivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetTexBumpParameterfvATI) = (PFNGLGETTEXBUMPPARAMETERFVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetTexBumpParameterfvATI");
        if (NULL == GLH_EXT_NAME(glGetTexBumpParameterfvATI))
            return GL_FALSE;
#endif

#ifdef GL_ATI_fragment_shader
    } else if (0 == strcmp(extension, "GL_ATI_fragment_shader")) {
        GLH_EXT_NAME(glGenFragmentShadersATI) = (PFNGLGENFRAGMENTSHADERSATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGenFragmentShadersATI");
        if (NULL == GLH_EXT_NAME(glGenFragmentShadersATI))
            return GL_FALSE;
        GLH_EXT_NAME(glBindFragmentShaderATI) = (PFNGLBINDFRAGMENTSHADERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glBindFragmentShaderATI");
        if (NULL == GLH_EXT_NAME(glBindFragmentShaderATI))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteFragmentShaderATI) = (PFNGLDELETEFRAGMENTSHADERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteFragmentShaderATI");
        if (NULL == GLH_EXT_NAME(glDeleteFragmentShaderATI))
            return GL_FALSE;
        GLH_EXT_NAME(glBeginFragmentShaderATI) = (PFNGLBEGINFRAGMENTSHADERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginFragmentShaderATI");
        if (NULL == GLH_EXT_NAME(glBeginFragmentShaderATI))
            return GL_FALSE;
        GLH_EXT_NAME(glEndFragmentShaderATI) = (PFNGLENDFRAGMENTSHADERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glEndFragmentShaderATI");
        if (NULL == GLH_EXT_NAME(glEndFragmentShaderATI))
            return GL_FALSE;
        GLH_EXT_NAME(glPassTexCoordATI) = (PFNGLPASSTEXCOORDATIPROC)GLH_EXT_GET_PROC_ADDRESS("glPassTexCoordATI");
        if (NULL == GLH_EXT_NAME(glPassTexCoordATI))
            return GL_FALSE;
        GLH_EXT_NAME(glSampleMapATI) = (PFNGLSAMPLEMAPATIPROC)GLH_EXT_GET_PROC_ADDRESS("glSampleMapATI");
        if (NULL == GLH_EXT_NAME(glSampleMapATI))
            return GL_FALSE;
        GLH_EXT_NAME(glColorFragmentOp1ATI) = (PFNGLCOLORFRAGMENTOP1ATIPROC)GLH_EXT_GET_PROC_ADDRESS("glColorFragmentOp1ATI");
        if (NULL == GLH_EXT_NAME(glColorFragmentOp1ATI))
            return GL_FALSE;
        GLH_EXT_NAME(glColorFragmentOp2ATI) = (PFNGLCOLORFRAGMENTOP2ATIPROC)GLH_EXT_GET_PROC_ADDRESS("glColorFragmentOp2ATI");
        if (NULL == GLH_EXT_NAME(glColorFragmentOp2ATI))
            return GL_FALSE;
        GLH_EXT_NAME(glColorFragmentOp3ATI) = (PFNGLCOLORFRAGMENTOP3ATIPROC)GLH_EXT_GET_PROC_ADDRESS("glColorFragmentOp3ATI");
        if (NULL == GLH_EXT_NAME(glColorFragmentOp3ATI))
            return GL_FALSE;
        GLH_EXT_NAME(glAlphaFragmentOp1ATI) = (PFNGLALPHAFRAGMENTOP1ATIPROC)GLH_EXT_GET_PROC_ADDRESS("glAlphaFragmentOp1ATI");
        if (NULL == GLH_EXT_NAME(glAlphaFragmentOp1ATI))
            return GL_FALSE;
        GLH_EXT_NAME(glAlphaFragmentOp2ATI) = (PFNGLALPHAFRAGMENTOP2ATIPROC)GLH_EXT_GET_PROC_ADDRESS("glAlphaFragmentOp2ATI");
        if (NULL == GLH_EXT_NAME(glAlphaFragmentOp2ATI))
            return GL_FALSE;
        GLH_EXT_NAME(glAlphaFragmentOp3ATI) = (PFNGLALPHAFRAGMENTOP3ATIPROC)GLH_EXT_GET_PROC_ADDRESS("glAlphaFragmentOp3ATI");
        if (NULL == GLH_EXT_NAME(glAlphaFragmentOp3ATI))
            return GL_FALSE;
        GLH_EXT_NAME(glSetFragmentShaderConstantATI) = (PFNGLSETFRAGMENTSHADERCONSTANTATIPROC)GLH_EXT_GET_PROC_ADDRESS("glSetFragmentShaderConstantATI");
        if (NULL == GLH_EXT_NAME(glSetFragmentShaderConstantATI))
            return GL_FALSE;
#endif

#ifdef GL_ATI_pn_triangles
    } else if (0 == strcmp(extension, "GL_ATI_pn_triangles")) {
        GLH_EXT_NAME(glPNTrianglesiATI) = (PFNGLPNTRIANGLESIATIPROC)GLH_EXT_GET_PROC_ADDRESS("glPNTrianglesiATI");
        if (NULL == GLH_EXT_NAME(glPNTrianglesiATI))
            return GL_FALSE;
        GLH_EXT_NAME(glPNTrianglesfATI) = (PFNGLPNTRIANGLESFATIPROC)GLH_EXT_GET_PROC_ADDRESS("glPNTrianglesfATI");
        if (NULL == GLH_EXT_NAME(glPNTrianglesfATI))
            return GL_FALSE;
#endif

#ifdef GL_ATI_vertex_array_object
    } else if (0 == strcmp(extension, "GL_ATI_vertex_array_object")) {
        GLH_EXT_NAME(glNewObjectBufferATI) = (PFNGLNEWOBJECTBUFFERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNewObjectBufferATI");
        if (NULL == GLH_EXT_NAME(glNewObjectBufferATI))
            return GL_FALSE;
        GLH_EXT_NAME(glIsObjectBufferATI) = (PFNGLISOBJECTBUFFERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glIsObjectBufferATI");
        if (NULL == GLH_EXT_NAME(glIsObjectBufferATI))
            return GL_FALSE;
        GLH_EXT_NAME(glUpdateObjectBufferATI) = (PFNGLUPDATEOBJECTBUFFERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glUpdateObjectBufferATI");
        if (NULL == GLH_EXT_NAME(glUpdateObjectBufferATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetObjectBufferfvATI) = (PFNGLGETOBJECTBUFFERFVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetObjectBufferfvATI");
        if (NULL == GLH_EXT_NAME(glGetObjectBufferfvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetObjectBufferivATI) = (PFNGLGETOBJECTBUFFERIVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetObjectBufferivATI");
        if (NULL == GLH_EXT_NAME(glGetObjectBufferivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glFreeObjectBufferATI) = (PFNGLFREEOBJECTBUFFERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glFreeObjectBufferATI");
        if (NULL == GLH_EXT_NAME(glFreeObjectBufferATI))
            return GL_FALSE;
        GLH_EXT_NAME(glArrayObjectATI) = (PFNGLARRAYOBJECTATIPROC)GLH_EXT_GET_PROC_ADDRESS("glArrayObjectATI");
        if (NULL == GLH_EXT_NAME(glArrayObjectATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetArrayObjectfvATI) = (PFNGLGETARRAYOBJECTFVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetArrayObjectfvATI");
        if (NULL == GLH_EXT_NAME(glGetArrayObjectfvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetArrayObjectivATI) = (PFNGLGETARRAYOBJECTIVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetArrayObjectivATI");
        if (NULL == GLH_EXT_NAME(glGetArrayObjectivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantArrayObjectATI) = (PFNGLVARIANTARRAYOBJECTATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantArrayObjectATI");
        if (NULL == GLH_EXT_NAME(glVariantArrayObjectATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVariantArrayObjectfvATI) = (PFNGLGETVARIANTARRAYOBJECTFVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVariantArrayObjectfvATI");
        if (NULL == GLH_EXT_NAME(glGetVariantArrayObjectfvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVariantArrayObjectivATI) = (PFNGLGETVARIANTARRAYOBJECTIVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVariantArrayObjectivATI");
        if (NULL == GLH_EXT_NAME(glGetVariantArrayObjectivATI))
            return GL_FALSE;
#endif

#ifdef GL_EXT_vertex_shader
    } else if (0 == strcmp(extension, "GL_EXT_vertex_shader")) {
        GLH_EXT_NAME(glBeginVertexShaderEXT) = (PFNGLBEGINVERTEXSHADEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginVertexShaderEXT");
        if (NULL == GLH_EXT_NAME(glBeginVertexShaderEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glEndVertexShaderEXT) = (PFNGLENDVERTEXSHADEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glEndVertexShaderEXT");
        if (NULL == GLH_EXT_NAME(glEndVertexShaderEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindVertexShaderEXT) = (PFNGLBINDVERTEXSHADEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindVertexShaderEXT");
        if (NULL == GLH_EXT_NAME(glBindVertexShaderEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGenVertexShadersEXT) = (PFNGLGENVERTEXSHADERSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGenVertexShadersEXT");
        if (NULL == GLH_EXT_NAME(glGenVertexShadersEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteVertexShaderEXT) = (PFNGLDELETEVERTEXSHADEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteVertexShaderEXT");
        if (NULL == GLH_EXT_NAME(glDeleteVertexShaderEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glShaderOp1EXT) = (PFNGLSHADEROP1EXTPROC)GLH_EXT_GET_PROC_ADDRESS("glShaderOp1EXT");
        if (NULL == GLH_EXT_NAME(glShaderOp1EXT))
            return GL_FALSE;
        GLH_EXT_NAME(glShaderOp2EXT) = (PFNGLSHADEROP2EXTPROC)GLH_EXT_GET_PROC_ADDRESS("glShaderOp2EXT");
        if (NULL == GLH_EXT_NAME(glShaderOp2EXT))
            return GL_FALSE;
        GLH_EXT_NAME(glShaderOp3EXT) = (PFNGLSHADEROP3EXTPROC)GLH_EXT_GET_PROC_ADDRESS("glShaderOp3EXT");
        if (NULL == GLH_EXT_NAME(glShaderOp3EXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSwizzleEXT) = (PFNGLSWIZZLEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSwizzleEXT");
        if (NULL == GLH_EXT_NAME(glSwizzleEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glWriteMaskEXT) = (PFNGLWRITEMASKEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glWriteMaskEXT");
        if (NULL == GLH_EXT_NAME(glWriteMaskEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glInsertComponentEXT) = (PFNGLINSERTCOMPONENTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glInsertComponentEXT");
        if (NULL == GLH_EXT_NAME(glInsertComponentEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glExtractComponentEXT) = (PFNGLEXTRACTCOMPONENTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glExtractComponentEXT");
        if (NULL == GLH_EXT_NAME(glExtractComponentEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGenSymbolsEXT) = (PFNGLGENSYMBOLSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGenSymbolsEXT");
        if (NULL == GLH_EXT_NAME(glGenSymbolsEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSetInvariantEXT) = (PFNGLSETINVARIANTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSetInvariantEXT");
        if (NULL == GLH_EXT_NAME(glSetInvariantEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glSetLocalConstantEXT) = (PFNGLSETLOCALCONSTANTEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glSetLocalConstantEXT");
        if (NULL == GLH_EXT_NAME(glSetLocalConstantEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantbvEXT) = (PFNGLVARIANTBVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantbvEXT");
        if (NULL == GLH_EXT_NAME(glVariantbvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantsvEXT) = (PFNGLVARIANTSVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantsvEXT");
        if (NULL == GLH_EXT_NAME(glVariantsvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantivEXT) = (PFNGLVARIANTIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantivEXT");
        if (NULL == GLH_EXT_NAME(glVariantivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantfvEXT) = (PFNGLVARIANTFVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantfvEXT");
        if (NULL == GLH_EXT_NAME(glVariantfvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantdvEXT) = (PFNGLVARIANTDVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantdvEXT");
        if (NULL == GLH_EXT_NAME(glVariantdvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantubvEXT) = (PFNGLVARIANTUBVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantubvEXT");
        if (NULL == GLH_EXT_NAME(glVariantubvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantusvEXT) = (PFNGLVARIANTUSVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantusvEXT");
        if (NULL == GLH_EXT_NAME(glVariantusvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantuivEXT) = (PFNGLVARIANTUIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantuivEXT");
        if (NULL == GLH_EXT_NAME(glVariantuivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVariantPointerEXT) = (PFNGLVARIANTPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVariantPointerEXT");
        if (NULL == GLH_EXT_NAME(glVariantPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glEnableVariantClientStateEXT) = (PFNGLENABLEVARIANTCLIENTSTATEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glEnableVariantClientStateEXT");
        if (NULL == GLH_EXT_NAME(glEnableVariantClientStateEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDisableVariantClientStateEXT) = (PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDisableVariantClientStateEXT");
        if (NULL == GLH_EXT_NAME(glDisableVariantClientStateEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindLightParameterEXT) = (PFNGLBINDLIGHTPARAMETEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindLightParameterEXT");
        if (NULL == GLH_EXT_NAME(glBindLightParameterEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindMaterialParameterEXT) = (PFNGLBINDMATERIALPARAMETEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindMaterialParameterEXT");
        if (NULL == GLH_EXT_NAME(glBindMaterialParameterEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindTexGenParameterEXT) = (PFNGLBINDTEXGENPARAMETEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindTexGenParameterEXT");
        if (NULL == GLH_EXT_NAME(glBindTexGenParameterEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindTextureUnitParameterEXT) = (PFNGLBINDTEXTUREUNITPARAMETEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindTextureUnitParameterEXT");
        if (NULL == GLH_EXT_NAME(glBindTextureUnitParameterEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindParameterEXT) = (PFNGLBINDPARAMETEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindParameterEXT");
        if (NULL == GLH_EXT_NAME(glBindParameterEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glIsVariantEnabledEXT) = (PFNGLISVARIANTENABLEDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIsVariantEnabledEXT");
        if (NULL == GLH_EXT_NAME(glIsVariantEnabledEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVariantBooleanvEXT) = (PFNGLGETVARIANTBOOLEANVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVariantBooleanvEXT");
        if (NULL == GLH_EXT_NAME(glGetVariantBooleanvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVariantIntegervEXT) = (PFNGLGETVARIANTINTEGERVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVariantIntegervEXT");
        if (NULL == GLH_EXT_NAME(glGetVariantIntegervEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVariantFloatvEXT) = (PFNGLGETVARIANTFLOATVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVariantFloatvEXT");
        if (NULL == GLH_EXT_NAME(glGetVariantFloatvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVariantPointervEXT) = (PFNGLGETVARIANTPOINTERVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVariantPointervEXT");
        if (NULL == GLH_EXT_NAME(glGetVariantPointervEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetInvariantBooleanvEXT) = (PFNGLGETINVARIANTBOOLEANVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetInvariantBooleanvEXT");
        if (NULL == GLH_EXT_NAME(glGetInvariantBooleanvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetInvariantIntegervEXT) = (PFNGLGETINVARIANTINTEGERVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetInvariantIntegervEXT");
        if (NULL == GLH_EXT_NAME(glGetInvariantIntegervEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetInvariantFloatvEXT) = (PFNGLGETINVARIANTFLOATVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetInvariantFloatvEXT");
        if (NULL == GLH_EXT_NAME(glGetInvariantFloatvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetLocalConstantBooleanvEXT) = (PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetLocalConstantBooleanvEXT");
        if (NULL == GLH_EXT_NAME(glGetLocalConstantBooleanvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetLocalConstantIntegervEXT) = (PFNGLGETLOCALCONSTANTINTEGERVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetLocalConstantIntegervEXT");
        if (NULL == GLH_EXT_NAME(glGetLocalConstantIntegervEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetLocalConstantFloatvEXT) = (PFNGLGETLOCALCONSTANTFLOATVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetLocalConstantFloatvEXT");
        if (NULL == GLH_EXT_NAME(glGetLocalConstantFloatvEXT))
            return GL_FALSE;
#endif

#ifdef GL_ATI_vertex_streams
    } else if (0 == strcmp(extension, "GL_ATI_vertex_streams")) {
        GLH_EXT_NAME(glVertexStream1sATI) = (PFNGLVERTEXSTREAM1SATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1sATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1sATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream1svATI) = (PFNGLVERTEXSTREAM1SVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1svATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1svATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream1iATI) = (PFNGLVERTEXSTREAM1IATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1iATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1iATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream1ivATI) = (PFNGLVERTEXSTREAM1IVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1ivATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1ivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream1fATI) = (PFNGLVERTEXSTREAM1FATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1fATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1fATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream1fvATI) = (PFNGLVERTEXSTREAM1FVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1fvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1fvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream1dATI) = (PFNGLVERTEXSTREAM1DATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1dATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1dATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream1dvATI) = (PFNGLVERTEXSTREAM1DVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream1dvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream1dvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2sATI) = (PFNGLVERTEXSTREAM2SATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2sATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2sATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2svATI) = (PFNGLVERTEXSTREAM2SVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2svATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2svATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2iATI) = (PFNGLVERTEXSTREAM2IATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2iATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2iATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2ivATI) = (PFNGLVERTEXSTREAM2IVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2ivATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2ivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2fATI) = (PFNGLVERTEXSTREAM2FATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2fATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2fATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2fvATI) = (PFNGLVERTEXSTREAM2FVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2fvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2fvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2dATI) = (PFNGLVERTEXSTREAM2DATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2dATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2dATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream2dvATI) = (PFNGLVERTEXSTREAM2DVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream2dvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream2dvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3sATI) = (PFNGLVERTEXSTREAM3SATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3sATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3sATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3svATI) = (PFNGLVERTEXSTREAM3SVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3svATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3svATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3iATI) = (PFNGLVERTEXSTREAM3IATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3iATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3iATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3ivATI) = (PFNGLVERTEXSTREAM3IVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3ivATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3ivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3fATI) = (PFNGLVERTEXSTREAM3FATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3fATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3fATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3fvATI) = (PFNGLVERTEXSTREAM3FVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3fvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3fvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3dATI) = (PFNGLVERTEXSTREAM3DATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3dATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3dATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream3dvATI) = (PFNGLVERTEXSTREAM3DVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream3dvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream3dvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4sATI) = (PFNGLVERTEXSTREAM4SATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4sATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4sATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4svATI) = (PFNGLVERTEXSTREAM4SVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4svATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4svATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4iATI) = (PFNGLVERTEXSTREAM4IATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4iATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4iATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4ivATI) = (PFNGLVERTEXSTREAM4IVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4ivATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4ivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4fATI) = (PFNGLVERTEXSTREAM4FATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4fATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4fATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4fvATI) = (PFNGLVERTEXSTREAM4FVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4fvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4fvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4dATI) = (PFNGLVERTEXSTREAM4DATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4dATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4dATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexStream4dvATI) = (PFNGLVERTEXSTREAM4DVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexStream4dvATI");
        if (NULL == GLH_EXT_NAME(glVertexStream4dvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3bATI) = (PFNGLNORMALSTREAM3BATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3bATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3bATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3bvATI) = (PFNGLNORMALSTREAM3BVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3bvATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3bvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3sATI) = (PFNGLNORMALSTREAM3SATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3sATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3sATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3svATI) = (PFNGLNORMALSTREAM3SVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3svATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3svATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3iATI) = (PFNGLNORMALSTREAM3IATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3iATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3iATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3ivATI) = (PFNGLNORMALSTREAM3IVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3ivATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3ivATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3fATI) = (PFNGLNORMALSTREAM3FATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3fATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3fATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3fvATI) = (PFNGLNORMALSTREAM3FVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3fvATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3fvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3dATI) = (PFNGLNORMALSTREAM3DATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3dATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3dATI))
            return GL_FALSE;
        GLH_EXT_NAME(glNormalStream3dvATI) = (PFNGLNORMALSTREAM3DVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glNormalStream3dvATI");
        if (NULL == GLH_EXT_NAME(glNormalStream3dvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glClientActiveVertexStreamATI) = (PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC)GLH_EXT_GET_PROC_ADDRESS("glClientActiveVertexStreamATI");
        if (NULL == GLH_EXT_NAME(glClientActiveVertexStreamATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexBlendEnviATI) = (PFNGLVERTEXBLENDENVIATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexBlendEnviATI");
        if (NULL == GLH_EXT_NAME(glVertexBlendEnviATI))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexBlendEnvfATI) = (PFNGLVERTEXBLENDENVFATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexBlendEnvfATI");
        if (NULL == GLH_EXT_NAME(glVertexBlendEnvfATI))
            return GL_FALSE;
#endif

#ifdef GL_ATI_element_array
    } else if (0 == strcmp(extension, "GL_ATI_element_array")) {
        GLH_EXT_NAME(glElementPointerATI) = (PFNGLELEMENTPOINTERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glElementPointerATI");
        if (NULL == GLH_EXT_NAME(glElementPointerATI))
            return GL_FALSE;
        GLH_EXT_NAME(glDrawElementArrayATI) = (PFNGLDRAWELEMENTARRAYATIPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawElementArrayATI");
        if (NULL == GLH_EXT_NAME(glDrawElementArrayATI))
            return GL_FALSE;
        GLH_EXT_NAME(glDrawRangeElementArrayATI) = (PFNGLDRAWRANGEELEMENTARRAYATIPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElementArrayATI");
        if (NULL == GLH_EXT_NAME(glDrawRangeElementArrayATI))
            return GL_FALSE;
#endif

#ifdef GL_SUN_mesh_array
    } else if (0 == strcmp(extension, "GL_SUN_mesh_array")) {
        GLH_EXT_NAME(glDrawMeshArraysSUN) = (PFNGLDRAWMESHARRAYSSUNPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawMeshArraysSUN");
        if (NULL == GLH_EXT_NAME(glDrawMeshArraysSUN))
            return GL_FALSE;
#endif

#ifdef GL_SUN_slice_accum
    } else if (0 == strcmp(extension, "GL_SUN_slice_accum")) {
#endif

#ifdef GL_NV_multisample_filter_hint
    } else if (0 == strcmp(extension, "GL_NV_multisample_filter_hint")) {
#endif

#ifdef GL_NV_depth_clamp
    } else if (0 == strcmp(extension, "GL_NV_depth_clamp")) {
#endif

#ifdef GL_NV_occlusion_query
    } else if (0 == strcmp(extension, "GL_NV_occlusion_query")) {
        GLH_EXT_NAME(glGenOcclusionQueriesNV) = (PFNGLGENOCCLUSIONQUERIESNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGenOcclusionQueriesNV");
        if (NULL == GLH_EXT_NAME(glGenOcclusionQueriesNV))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteOcclusionQueriesNV) = (PFNGLDELETEOCCLUSIONQUERIESNVPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteOcclusionQueriesNV");
        if (NULL == GLH_EXT_NAME(glDeleteOcclusionQueriesNV))
            return GL_FALSE;
        GLH_EXT_NAME(glIsOcclusionQueryNV) = (PFNGLISOCCLUSIONQUERYNVPROC)GLH_EXT_GET_PROC_ADDRESS("glIsOcclusionQueryNV");
        if (NULL == GLH_EXT_NAME(glIsOcclusionQueryNV))
            return GL_FALSE;
        GLH_EXT_NAME(glBeginOcclusionQueryNV) = (PFNGLBEGINOCCLUSIONQUERYNVPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginOcclusionQueryNV");
        if (NULL == GLH_EXT_NAME(glBeginOcclusionQueryNV))
            return GL_FALSE;
        GLH_EXT_NAME(glEndOcclusionQueryNV) = (PFNGLENDOCCLUSIONQUERYNVPROC)GLH_EXT_GET_PROC_ADDRESS("glEndOcclusionQueryNV");
        if (NULL == GLH_EXT_NAME(glEndOcclusionQueryNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetOcclusionQueryivNV) = (PFNGLGETOCCLUSIONQUERYIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetOcclusionQueryivNV");
        if (NULL == GLH_EXT_NAME(glGetOcclusionQueryivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetOcclusionQueryuivNV) = (PFNGLGETOCCLUSIONQUERYUIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetOcclusionQueryuivNV");
        if (NULL == GLH_EXT_NAME(glGetOcclusionQueryuivNV))
            return GL_FALSE;
#endif

#ifdef GL_NV_point_sprite
    } else if (0 == strcmp(extension, "GL_NV_point_sprite")) {
        GLH_EXT_NAME(glPointParameteriNV) = (PFNGLPOINTPARAMETERINVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameteriNV");
        if (NULL == GLH_EXT_NAME(glPointParameteriNV))
            return GL_FALSE;
        GLH_EXT_NAME(glPointParameterivNV) = (PFNGLPOINTPARAMETERIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glPointParameterivNV");
        if (NULL == GLH_EXT_NAME(glPointParameterivNV))
            return GL_FALSE;
#endif

#ifdef GL_NV_texture_shader3
    } else if (0 == strcmp(extension, "GL_NV_texture_shader3")) {
#endif

#ifdef GL_NV_vertex_program1_1
    } else if (0 == strcmp(extension, "GL_NV_vertex_program1_1")) {
#endif

#ifdef GL_EXT_shadow_funcs
    } else if (0 == strcmp(extension, "GL_EXT_shadow_funcs")) {
#endif

#ifdef GL_EXT_stencil_two_side
    } else if (0 == strcmp(extension, "GL_EXT_stencil_two_side")) {
        GLH_EXT_NAME(glActiveStencilFaceEXT) = (PFNGLACTIVESTENCILFACEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveStencilFaceEXT");
        if (NULL == GLH_EXT_NAME(glActiveStencilFaceEXT))
            return GL_FALSE;
#endif

#ifdef GL_ATI_text_fragment_shader
    } else if (0 == strcmp(extension, "GL_ATI_text_fragment_shader")) {
#endif

#ifdef GL_APPLE_client_storage
    } else if (0 == strcmp(extension, "GL_APPLE_client_storage")) {
#endif

#ifdef GL_APPLE_element_array
    } else if (0 == strcmp(extension, "GL_APPLE_element_array")) {
        GLH_EXT_NAME(glElementPointerAPPLE) = (PFNGLELEMENTPOINTERAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glElementPointerAPPLE");
        if (NULL == GLH_EXT_NAME(glElementPointerAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glDrawElementArrayAPPLE) = (PFNGLDRAWELEMENTARRAYAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawElementArrayAPPLE");
        if (NULL == GLH_EXT_NAME(glDrawElementArrayAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glDrawRangeElementArrayAPPLE) = (PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawRangeElementArrayAPPLE");
        if (NULL == GLH_EXT_NAME(glDrawRangeElementArrayAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiDrawElementArrayAPPLE) = (PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawElementArrayAPPLE");
        if (NULL == GLH_EXT_NAME(glMultiDrawElementArrayAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiDrawRangeElementArrayAPPLE) = (PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiDrawRangeElementArrayAPPLE");
        if (NULL == GLH_EXT_NAME(glMultiDrawRangeElementArrayAPPLE))
            return GL_FALSE;
#endif

#ifdef GL_APPLE_fence
    } else if (0 == strcmp(extension, "GL_APPLE_fence")) {
        GLH_EXT_NAME(glGenFencesAPPLE) = (PFNGLGENFENCESAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGenFencesAPPLE");
        if (NULL == GLH_EXT_NAME(glGenFencesAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteFencesAPPLE) = (PFNGLDELETEFENCESAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteFencesAPPLE");
        if (NULL == GLH_EXT_NAME(glDeleteFencesAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glSetFenceAPPLE) = (PFNGLSETFENCEAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glSetFenceAPPLE");
        if (NULL == GLH_EXT_NAME(glSetFenceAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glIsFenceAPPLE) = (PFNGLISFENCEAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glIsFenceAPPLE");
        if (NULL == GLH_EXT_NAME(glIsFenceAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glTestFenceAPPLE) = (PFNGLTESTFENCEAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glTestFenceAPPLE");
        if (NULL == GLH_EXT_NAME(glTestFenceAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glFinishFenceAPPLE) = (PFNGLFINISHFENCEAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glFinishFenceAPPLE");
        if (NULL == GLH_EXT_NAME(glFinishFenceAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glTestObjectAPPLE) = (PFNGLTESTOBJECTAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glTestObjectAPPLE");
        if (NULL == GLH_EXT_NAME(glTestObjectAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glFinishObjectAPPLE) = (PFNGLFINISHOBJECTAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glFinishObjectAPPLE");
        if (NULL == GLH_EXT_NAME(glFinishObjectAPPLE))
            return GL_FALSE;
#endif

#ifdef GL_APPLE_vertex_array_object
    } else if (0 == strcmp(extension, "GL_APPLE_vertex_array_object")) {
        GLH_EXT_NAME(glBindVertexArrayAPPLE) = (PFNGLBINDVERTEXARRAYAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glBindVertexArrayAPPLE");
        if (NULL == GLH_EXT_NAME(glBindVertexArrayAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteVertexArraysAPPLE) = (PFNGLDELETEVERTEXARRAYSAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteVertexArraysAPPLE");
        if (NULL == GLH_EXT_NAME(glDeleteVertexArraysAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glGenVertexArraysAPPLE) = (PFNGLGENVERTEXARRAYSAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glGenVertexArraysAPPLE");
        if (NULL == GLH_EXT_NAME(glGenVertexArraysAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glIsVertexArrayAPPLE) = (PFNGLISVERTEXARRAYAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glIsVertexArrayAPPLE");
        if (NULL == GLH_EXT_NAME(glIsVertexArrayAPPLE))
            return GL_FALSE;
#endif

#ifdef GL_APPLE_vertex_array_range
    } else if (0 == strcmp(extension, "GL_APPLE_vertex_array_range")) {
        GLH_EXT_NAME(glVertexArrayRangeAPPLE) = (PFNGLVERTEXARRAYRANGEAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexArrayRangeAPPLE");
        if (NULL == GLH_EXT_NAME(glVertexArrayRangeAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glFlushVertexArrayRangeAPPLE) = (PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glFlushVertexArrayRangeAPPLE");
        if (NULL == GLH_EXT_NAME(glFlushVertexArrayRangeAPPLE))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexArrayParameteriAPPLE) = (PFNGLVERTEXARRAYPARAMETERIAPPLEPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexArrayParameteriAPPLE");
        if (NULL == GLH_EXT_NAME(glVertexArrayParameteriAPPLE))
            return GL_FALSE;
#endif

#ifdef GL_APPLE_ycbcr_422
    } else if (0 == strcmp(extension, "GL_APPLE_ycbcr_422")) {
#endif

#ifdef GL_S3_s3tc
    } else if (0 == strcmp(extension, "GL_S3_s3tc")) {
#endif

#ifdef GL_ATI_draw_buffers
    } else if (0 == strcmp(extension, "GL_ATI_draw_buffers")) {
        GLH_EXT_NAME(glDrawBuffersATI) = (PFNGLDRAWBUFFERSATIPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawBuffersATI");
        if (NULL == GLH_EXT_NAME(glDrawBuffersATI))
            return GL_FALSE;
#endif

#ifdef GL_ATI_pixel_format_float
    } else if (0 == strcmp(extension, "GL_ATI_pixel_format_float")) {
#endif

#ifdef GL_ATI_texture_env_combine3
    } else if (0 == strcmp(extension, "GL_ATI_texture_env_combine3")) {
#endif

#ifdef GL_ATI_texture_float
    } else if (0 == strcmp(extension, "GL_ATI_texture_float")) {
#endif

#ifdef GL_NV_float_buffer
    } else if (0 == strcmp(extension, "GL_NV_float_buffer")) {
#endif

#ifdef GL_NV_fragment_program
    } else if (0 == strcmp(extension, "GL_NV_fragment_program")) {
        GLH_EXT_NAME(glProgramNamedParameter4fNV) = (PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramNamedParameter4fNV");
        if (NULL == GLH_EXT_NAME(glProgramNamedParameter4fNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramNamedParameter4dNV) = (PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramNamedParameter4dNV");
        if (NULL == GLH_EXT_NAME(glProgramNamedParameter4dNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramNamedParameter4fvNV) = (PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramNamedParameter4fvNV");
        if (NULL == GLH_EXT_NAME(glProgramNamedParameter4fvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramNamedParameter4dvNV) = (PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramNamedParameter4dvNV");
        if (NULL == GLH_EXT_NAME(glProgramNamedParameter4dvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramNamedParameterfvNV) = (PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramNamedParameterfvNV");
        if (NULL == GLH_EXT_NAME(glGetProgramNamedParameterfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramNamedParameterdvNV) = (PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramNamedParameterdvNV");
        if (NULL == GLH_EXT_NAME(glGetProgramNamedParameterdvNV))
            return GL_FALSE;
#endif

#ifdef GL_NV_half_float
    } else if (0 == strcmp(extension, "GL_NV_half_float")) {
        GLH_EXT_NAME(glVertex2hNV) = (PFNGLVERTEX2HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertex2hNV");
        if (NULL == GLH_EXT_NAME(glVertex2hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertex2hvNV) = (PFNGLVERTEX2HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertex2hvNV");
        if (NULL == GLH_EXT_NAME(glVertex2hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertex3hNV) = (PFNGLVERTEX3HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertex3hNV");
        if (NULL == GLH_EXT_NAME(glVertex3hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertex3hvNV) = (PFNGLVERTEX3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertex3hvNV");
        if (NULL == GLH_EXT_NAME(glVertex3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertex4hNV) = (PFNGLVERTEX4HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertex4hNV");
        if (NULL == GLH_EXT_NAME(glVertex4hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertex4hvNV) = (PFNGLVERTEX4HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertex4hvNV");
        if (NULL == GLH_EXT_NAME(glVertex4hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glNormal3hNV) = (PFNGLNORMAL3HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glNormal3hNV");
        if (NULL == GLH_EXT_NAME(glNormal3hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glNormal3hvNV) = (PFNGLNORMAL3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glNormal3hvNV");
        if (NULL == GLH_EXT_NAME(glNormal3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glColor3hNV) = (PFNGLCOLOR3HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glColor3hNV");
        if (NULL == GLH_EXT_NAME(glColor3hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glColor3hvNV) = (PFNGLCOLOR3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glColor3hvNV");
        if (NULL == GLH_EXT_NAME(glColor3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glColor4hNV) = (PFNGLCOLOR4HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4hNV");
        if (NULL == GLH_EXT_NAME(glColor4hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glColor4hvNV) = (PFNGLCOLOR4HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glColor4hvNV");
        if (NULL == GLH_EXT_NAME(glColor4hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord1hNV) = (PFNGLTEXCOORD1HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord1hNV");
        if (NULL == GLH_EXT_NAME(glTexCoord1hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord1hvNV) = (PFNGLTEXCOORD1HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord1hvNV");
        if (NULL == GLH_EXT_NAME(glTexCoord1hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2hNV) = (PFNGLTEXCOORD2HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2hNV");
        if (NULL == GLH_EXT_NAME(glTexCoord2hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord2hvNV) = (PFNGLTEXCOORD2HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord2hvNV");
        if (NULL == GLH_EXT_NAME(glTexCoord2hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord3hNV) = (PFNGLTEXCOORD3HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord3hNV");
        if (NULL == GLH_EXT_NAME(glTexCoord3hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord3hvNV) = (PFNGLTEXCOORD3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord3hvNV");
        if (NULL == GLH_EXT_NAME(glTexCoord3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord4hNV) = (PFNGLTEXCOORD4HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord4hNV");
        if (NULL == GLH_EXT_NAME(glTexCoord4hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTexCoord4hvNV) = (PFNGLTEXCOORD4HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTexCoord4hvNV");
        if (NULL == GLH_EXT_NAME(glTexCoord4hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1hNV) = (PFNGLMULTITEXCOORD1HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1hNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord1hvNV) = (PFNGLMULTITEXCOORD1HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord1hvNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord1hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2hNV) = (PFNGLMULTITEXCOORD2HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2hNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord2hvNV) = (PFNGLMULTITEXCOORD2HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord2hvNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord2hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3hNV) = (PFNGLMULTITEXCOORD3HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3hNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord3hvNV) = (PFNGLMULTITEXCOORD3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord3hvNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4hNV) = (PFNGLMULTITEXCOORD4HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4hNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glMultiTexCoord4hvNV) = (PFNGLMULTITEXCOORD4HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glMultiTexCoord4hvNV");
        if (NULL == GLH_EXT_NAME(glMultiTexCoord4hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glFogCoordhNV) = (PFNGLFOGCOORDHNVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordhNV");
        if (NULL == GLH_EXT_NAME(glFogCoordhNV))
            return GL_FALSE;
        GLH_EXT_NAME(glFogCoordhvNV) = (PFNGLFOGCOORDHVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glFogCoordhvNV");
        if (NULL == GLH_EXT_NAME(glFogCoordhvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3hNV) = (PFNGLSECONDARYCOLOR3HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3hNV");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glSecondaryColor3hvNV) = (PFNGLSECONDARYCOLOR3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glSecondaryColor3hvNV");
        if (NULL == GLH_EXT_NAME(glSecondaryColor3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexWeighthNV) = (PFNGLVERTEXWEIGHTHNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexWeighthNV");
        if (NULL == GLH_EXT_NAME(glVertexWeighthNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexWeighthvNV) = (PFNGLVERTEXWEIGHTHVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexWeighthvNV");
        if (NULL == GLH_EXT_NAME(glVertexWeighthvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1hNV) = (PFNGLVERTEXATTRIB1HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1hNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib1hvNV) = (PFNGLVERTEXATTRIB1HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib1hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib1hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2hNV) = (PFNGLVERTEXATTRIB2HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2hNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib2hvNV) = (PFNGLVERTEXATTRIB2HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib2hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib2hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3hNV) = (PFNGLVERTEXATTRIB3HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3hNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib3hvNV) = (PFNGLVERTEXATTRIB3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib3hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4hNV) = (PFNGLVERTEXATTRIB4HNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4hNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4hNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttrib4hvNV) = (PFNGLVERTEXATTRIB4HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttrib4hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttrib4hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs1hvNV) = (PFNGLVERTEXATTRIBS1HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs1hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs1hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs2hvNV) = (PFNGLVERTEXATTRIBS2HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs2hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs2hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs3hvNV) = (PFNGLVERTEXATTRIBS3HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs3hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs3hvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribs4hvNV) = (PFNGLVERTEXATTRIBS4HVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribs4hvNV");
        if (NULL == GLH_EXT_NAME(glVertexAttribs4hvNV))
            return GL_FALSE;
#endif

#ifdef GL_NV_pixel_data_range
    } else if (0 == strcmp(extension, "GL_NV_pixel_data_range")) {
        GLH_EXT_NAME(glPixelDataRangeNV) = (PFNGLPIXELDATARANGENVPROC)GLH_EXT_GET_PROC_ADDRESS("glPixelDataRangeNV");
        if (NULL == GLH_EXT_NAME(glPixelDataRangeNV))
            return GL_FALSE;
        GLH_EXT_NAME(glFlushPixelDataRangeNV) = (PFNGLFLUSHPIXELDATARANGENVPROC)GLH_EXT_GET_PROC_ADDRESS("glFlushPixelDataRangeNV");
        if (NULL == GLH_EXT_NAME(glFlushPixelDataRangeNV))
            return GL_FALSE;
#endif

#ifdef GL_NV_primitive_restart
    } else if (0 == strcmp(extension, "GL_NV_primitive_restart")) {
        GLH_EXT_NAME(glPrimitiveRestartNV) = (PFNGLPRIMITIVERESTARTNVPROC)GLH_EXT_GET_PROC_ADDRESS("glPrimitiveRestartNV");
        if (NULL == GLH_EXT_NAME(glPrimitiveRestartNV))
            return GL_FALSE;
        GLH_EXT_NAME(glPrimitiveRestartIndexNV) = (PFNGLPRIMITIVERESTARTINDEXNVPROC)GLH_EXT_GET_PROC_ADDRESS("glPrimitiveRestartIndexNV");
        if (NULL == GLH_EXT_NAME(glPrimitiveRestartIndexNV))
            return GL_FALSE;
#endif

#ifdef GL_NV_texture_expand_normal
    } else if (0 == strcmp(extension, "GL_NV_texture_expand_normal")) {
#endif

#ifdef GL_NV_vertex_program2
    } else if (0 == strcmp(extension, "GL_NV_vertex_program2")) {
#endif

#ifdef GL_ATI_map_object_buffer
    } else if (0 == strcmp(extension, "GL_ATI_map_object_buffer")) {
        GLH_EXT_NAME(glMapObjectBufferATI) = (PFNGLMAPOBJECTBUFFERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glMapObjectBufferATI");
        if (NULL == GLH_EXT_NAME(glMapObjectBufferATI))
            return GL_FALSE;
        GLH_EXT_NAME(glUnmapObjectBufferATI) = (PFNGLUNMAPOBJECTBUFFERATIPROC)GLH_EXT_GET_PROC_ADDRESS("glUnmapObjectBufferATI");
        if (NULL == GLH_EXT_NAME(glUnmapObjectBufferATI))
            return GL_FALSE;
#endif

#ifdef GL_ATI_separate_stencil
    } else if (0 == strcmp(extension, "GL_ATI_separate_stencil")) {
        GLH_EXT_NAME(glStencilOpSeparateATI) = (PFNGLSTENCILOPSEPARATEATIPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilOpSeparateATI");
        if (NULL == GLH_EXT_NAME(glStencilOpSeparateATI))
            return GL_FALSE;
        GLH_EXT_NAME(glStencilFuncSeparateATI) = (PFNGLSTENCILFUNCSEPARATEATIPROC)GLH_EXT_GET_PROC_ADDRESS("glStencilFuncSeparateATI");
        if (NULL == GLH_EXT_NAME(glStencilFuncSeparateATI))
            return GL_FALSE;
#endif

#ifdef GL_ATI_vertex_attrib_array_object
    } else if (0 == strcmp(extension, "GL_ATI_vertex_attrib_array_object")) {
        GLH_EXT_NAME(glVertexAttribArrayObjectATI) = (PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribArrayObjectATI");
        if (NULL == GLH_EXT_NAME(glVertexAttribArrayObjectATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribArrayObjectfvATI) = (PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribArrayObjectfvATI");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribArrayObjectfvATI))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribArrayObjectivATI) = (PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribArrayObjectivATI");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribArrayObjectivATI))
            return GL_FALSE;
#endif

#ifdef GL_OES_read_format
    } else if (0 == strcmp(extension, "GL_OES_read_format")) {
#endif

#ifdef GL_EXT_depth_bounds_test
    } else if (0 == strcmp(extension, "GL_EXT_depth_bounds_test")) {
        GLH_EXT_NAME(glDepthBoundsEXT) = (PFNGLDEPTHBOUNDSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDepthBoundsEXT");
        if (NULL == GLH_EXT_NAME(glDepthBoundsEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_texture_mirror_clamp
    } else if (0 == strcmp(extension, "GL_EXT_texture_mirror_clamp")) {
#endif

#ifdef GL_EXT_blend_equation_separate
    } else if (0 == strcmp(extension, "GL_EXT_blend_equation_separate")) {
        GLH_EXT_NAME(glBlendEquationSeparateEXT) = (PFNGLBLENDEQUATIONSEPARATEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBlendEquationSeparateEXT");
        if (NULL == GLH_EXT_NAME(glBlendEquationSeparateEXT))
            return GL_FALSE;
#endif

#ifdef GL_MESA_pack_invert
    } else if (0 == strcmp(extension, "GL_MESA_pack_invert")) {
#endif

#ifdef GL_MESA_ycbcr_texture
    } else if (0 == strcmp(extension, "GL_MESA_ycbcr_texture")) {
#endif

#ifdef GL_EXT_pixel_buffer_object
    } else if (0 == strcmp(extension, "GL_EXT_pixel_buffer_object")) {
#endif

#ifdef GL_NV_fragment_program_option
    } else if (0 == strcmp(extension, "GL_NV_fragment_program_option")) {
#endif

#ifdef GL_NV_fragment_program2
    } else if (0 == strcmp(extension, "GL_NV_fragment_program2")) {
#endif

#ifdef GL_NV_vertex_program2_option
    } else if (0 == strcmp(extension, "GL_NV_vertex_program2_option")) {
#endif

#ifdef GL_NV_vertex_program3
    } else if (0 == strcmp(extension, "GL_NV_vertex_program3")) {
#endif

#ifdef GL_EXT_framebuffer_object
    } else if (0 == strcmp(extension, "GL_EXT_framebuffer_object")) {
        GLH_EXT_NAME(glIsRenderbufferEXT) = (PFNGLISRENDERBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIsRenderbufferEXT");
        if (NULL == GLH_EXT_NAME(glIsRenderbufferEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindRenderbufferEXT) = (PFNGLBINDRENDERBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindRenderbufferEXT");
        if (NULL == GLH_EXT_NAME(glBindRenderbufferEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteRenderbuffersEXT) = (PFNGLDELETERENDERBUFFERSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteRenderbuffersEXT");
        if (NULL == GLH_EXT_NAME(glDeleteRenderbuffersEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGenRenderbuffersEXT) = (PFNGLGENRENDERBUFFERSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGenRenderbuffersEXT");
        if (NULL == GLH_EXT_NAME(glGenRenderbuffersEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glRenderbufferStorageEXT) = (PFNGLRENDERBUFFERSTORAGEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glRenderbufferStorageEXT");
        if (NULL == GLH_EXT_NAME(glRenderbufferStorageEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetRenderbufferParameterivEXT) = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetRenderbufferParameterivEXT");
        if (NULL == GLH_EXT_NAME(glGetRenderbufferParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glIsFramebufferEXT) = (PFNGLISFRAMEBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIsFramebufferEXT");
        if (NULL == GLH_EXT_NAME(glIsFramebufferEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindFramebufferEXT) = (PFNGLBINDFRAMEBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindFramebufferEXT");
        if (NULL == GLH_EXT_NAME(glBindFramebufferEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDeleteFramebuffersEXT) = (PFNGLDELETEFRAMEBUFFERSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDeleteFramebuffersEXT");
        if (NULL == GLH_EXT_NAME(glDeleteFramebuffersEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGenFramebuffersEXT) = (PFNGLGENFRAMEBUFFERSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGenFramebuffersEXT");
        if (NULL == GLH_EXT_NAME(glGenFramebuffersEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glCheckFramebufferStatusEXT) = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glCheckFramebufferStatusEXT");
        if (NULL == GLH_EXT_NAME(glCheckFramebufferStatusEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFramebufferTexture1DEXT) = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFramebufferTexture1DEXT");
        if (NULL == GLH_EXT_NAME(glFramebufferTexture1DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFramebufferTexture2DEXT) = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFramebufferTexture2DEXT");
        if (NULL == GLH_EXT_NAME(glFramebufferTexture2DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFramebufferTexture3DEXT) = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFramebufferTexture3DEXT");
        if (NULL == GLH_EXT_NAME(glFramebufferTexture3DEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFramebufferRenderbufferEXT) = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFramebufferRenderbufferEXT");
        if (NULL == GLH_EXT_NAME(glFramebufferRenderbufferEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFramebufferAttachmentParameterivEXT) = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFramebufferAttachmentParameterivEXT");
        if (NULL == GLH_EXT_NAME(glGetFramebufferAttachmentParameterivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGenerateMipmapEXT) = (PFNGLGENERATEMIPMAPEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGenerateMipmapEXT");
        if (NULL == GLH_EXT_NAME(glGenerateMipmapEXT))
            return GL_FALSE;
#endif

#ifdef GL_GREMEDY_string_marker
    } else if (0 == strcmp(extension, "GL_GREMEDY_string_marker")) {
        GLH_EXT_NAME(glStringMarkerGREMEDY) = (PFNGLSTRINGMARKERGREMEDYPROC)GLH_EXT_GET_PROC_ADDRESS("glStringMarkerGREMEDY");
        if (NULL == GLH_EXT_NAME(glStringMarkerGREMEDY))
            return GL_FALSE;
#endif

#ifdef GL_EXT_Cg_shader
    } else if (0 == strcmp(extension, "GL_EXT_Cg_shader")) {
#endif

#ifdef GL_EXT_timer_query
    } else if (0 == strcmp(extension, "GL_EXT_timer_query")) {
        GLH_EXT_NAME(glGetQueryObjecti64vEXT) = (PFNGLGETQUERYOBJECTI64VEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjecti64vEXT");
        if (NULL == GLH_EXT_NAME(glGetQueryObjecti64vEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetQueryObjectui64vEXT) = (PFNGLGETQUERYOBJECTUI64VEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetQueryObjectui64vEXT");
        if (NULL == GLH_EXT_NAME(glGetQueryObjectui64vEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_texture_buffer_object
    } else if (0 == strcmp(extension, "GL_EXT_texture_buffer_object")) {
        GLH_EXT_NAME(glTexBufferEXT) = (PFNGLTEXBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexBufferEXT");
        if (NULL == GLH_EXT_NAME(glTexBufferEXT))
            return GL_FALSE;
#endif

#ifdef GL_NV_transform_feedback
    } else if (0 == strcmp(extension, "GL_NV_transform_feedback")) {
        GLH_EXT_NAME(glBeginTransformFeedbackNV) = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)GLH_EXT_GET_PROC_ADDRESS("glBeginTransformFeedbackNV");
        if (NULL == GLH_EXT_NAME(glBeginTransformFeedbackNV))
            return GL_FALSE;
        GLH_EXT_NAME(glEndTransformFeedbackNV) = (PFNGLENDTRANSFORMFEEDBACKNVPROC)GLH_EXT_GET_PROC_ADDRESS("glEndTransformFeedbackNV");
        if (NULL == GLH_EXT_NAME(glEndTransformFeedbackNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTransformFeedbackAttribsNV) = (PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTransformFeedbackAttribsNV");
        if (NULL == GLH_EXT_NAME(glTransformFeedbackAttribsNV))
            return GL_FALSE;
        GLH_EXT_NAME(glBindBufferRangeNV) = (PFNGLBINDBUFFERRANGENVPROC)GLH_EXT_GET_PROC_ADDRESS("glBindBufferRangeNV");
        if (NULL == GLH_EXT_NAME(glBindBufferRangeNV))
            return GL_FALSE;
        GLH_EXT_NAME(glBindBufferOffsetNV) = (PFNGLBINDBUFFEROFFSETNVPROC)GLH_EXT_GET_PROC_ADDRESS("glBindBufferOffsetNV");
        if (NULL == GLH_EXT_NAME(glBindBufferOffsetNV))
            return GL_FALSE;
        GLH_EXT_NAME(glBindBufferBaseNV) = (PFNGLBINDBUFFERBASENVPROC)GLH_EXT_GET_PROC_ADDRESS("glBindBufferBaseNV");
        if (NULL == GLH_EXT_NAME(glBindBufferBaseNV))
            return GL_FALSE;
        GLH_EXT_NAME(glTransformFeedbackVaryingsNV) = (PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)GLH_EXT_GET_PROC_ADDRESS("glTransformFeedbackVaryingsNV");
        if (NULL == GLH_EXT_NAME(glTransformFeedbackVaryingsNV))
            return GL_FALSE;
        GLH_EXT_NAME(glActiveVaryingNV) = (PFNGLACTIVEVARYINGNVPROC)GLH_EXT_GET_PROC_ADDRESS("glActiveVaryingNV");
        if (NULL == GLH_EXT_NAME(glActiveVaryingNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVaryingLocationNV) = (PFNGLGETVARYINGLOCATIONNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVaryingLocationNV");
        if (NULL == GLH_EXT_NAME(glGetVaryingLocationNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetActiveVaryingNV) = (PFNGLGETACTIVEVARYINGNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetActiveVaryingNV");
        if (NULL == GLH_EXT_NAME(glGetActiveVaryingNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetTransformFeedbackVaryingNV) = (PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetTransformFeedbackVaryingNV");
        if (NULL == GLH_EXT_NAME(glGetTransformFeedbackVaryingNV))
            return GL_FALSE;
#endif

#ifdef GL_NV_depth_buffer_float
    } else if (0 == strcmp(extension, "GL_NV_depth_buffer_float")) {
        GLH_EXT_NAME(glDepthRangedNV) = (PFNGLDEPTHRANGEDNVPROC)GLH_EXT_GET_PROC_ADDRESS("glDepthRangedNV");
        if (NULL == GLH_EXT_NAME(glDepthRangedNV))
            return GL_FALSE;
        GLH_EXT_NAME(glClearDepthdNV) = (PFNGLCLEARDEPTHDNVPROC)GLH_EXT_GET_PROC_ADDRESS("glClearDepthdNV");
        if (NULL == GLH_EXT_NAME(glClearDepthdNV))
            return GL_FALSE;
        GLH_EXT_NAME(glDepthBoundsdNV) = (PFNGLDEPTHBOUNDSDNVPROC)GLH_EXT_GET_PROC_ADDRESS("glDepthBoundsdNV");
        if (NULL == GLH_EXT_NAME(glDepthBoundsdNV))
            return GL_FALSE;
#endif

#ifdef GL_EXT_texture_compression_latc
    } else if (0 == strcmp(extension, "GL_EXT_texture_compression_latc")) {
#endif

#ifdef GL_EXT_framebuffer_sRGB
    } else if (0 == strcmp(extension, "GL_EXT_framebuffer_sRGB")) {
#endif

#ifdef GL_EXT_texture_shared_exponent
    } else if (0 == strcmp(extension, "GL_EXT_texture_shared_exponent")) {
#endif

#ifdef GL_EXT_packed_float
    } else if (0 == strcmp(extension, "GL_EXT_packed_float")) {
#endif

#ifdef GL_EXT_texture_array
    } else if (0 == strcmp(extension, "GL_EXT_texture_array")) {
#endif

#ifdef GL_EXT_draw_buffers2
    } else if (0 == strcmp(extension, "GL_EXT_draw_buffers2")) {
        GLH_EXT_NAME(glColorMaskIndexedEXT) = (PFNGLCOLORMASKINDEXEDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glColorMaskIndexedEXT");
        if (NULL == GLH_EXT_NAME(glColorMaskIndexedEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetBooleanIndexedvEXT) = (PFNGLGETBOOLEANINDEXEDVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetBooleanIndexedvEXT");
        if (NULL == GLH_EXT_NAME(glGetBooleanIndexedvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetIntegerIndexedvEXT) = (PFNGLGETINTEGERINDEXEDVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetIntegerIndexedvEXT");
        if (NULL == GLH_EXT_NAME(glGetIntegerIndexedvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glEnableIndexedEXT) = (PFNGLENABLEINDEXEDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glEnableIndexedEXT");
        if (NULL == GLH_EXT_NAME(glEnableIndexedEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDisableIndexedEXT) = (PFNGLDISABLEINDEXEDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDisableIndexedEXT");
        if (NULL == GLH_EXT_NAME(glDisableIndexedEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glIsEnabledIndexedEXT) = (PFNGLISENABLEDINDEXEDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glIsEnabledIndexedEXT");
        if (NULL == GLH_EXT_NAME(glIsEnabledIndexedEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_texture_integer
    } else if (0 == strcmp(extension, "GL_EXT_texture_integer")) {
        GLH_EXT_NAME(glTexParameterIivEXT) = (PFNGLTEXPARAMETERIIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexParameterIivEXT");
        if (NULL == GLH_EXT_NAME(glTexParameterIivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glTexParameterIuivEXT) = (PFNGLTEXPARAMETERIUIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glTexParameterIuivEXT");
        if (NULL == GLH_EXT_NAME(glTexParameterIuivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetTexParameterIivEXT) = (PFNGLGETTEXPARAMETERIIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetTexParameterIivEXT");
        if (NULL == GLH_EXT_NAME(glGetTexParameterIivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetTexParameterIuivEXT) = (PFNGLGETTEXPARAMETERIUIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetTexParameterIuivEXT");
        if (NULL == GLH_EXT_NAME(glGetTexParameterIuivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glClearColorIiEXT) = (PFNGLCLEARCOLORIIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glClearColorIiEXT");
        if (NULL == GLH_EXT_NAME(glClearColorIiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glClearColorIuiEXT) = (PFNGLCLEARCOLORIUIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glClearColorIuiEXT");
        if (NULL == GLH_EXT_NAME(glClearColorIuiEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_bindable_uniform
    } else if (0 == strcmp(extension, "GL_EXT_bindable_uniform")) {
        GLH_EXT_NAME(glUniformBufferEXT) = (PFNGLUNIFORMBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniformBufferEXT");
        if (NULL == GLH_EXT_NAME(glUniformBufferEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetUniformBufferSizeEXT) = (PFNGLGETUNIFORMBUFFERSIZEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformBufferSizeEXT");
        if (NULL == GLH_EXT_NAME(glGetUniformBufferSizeEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetUniformOffsetEXT) = (PFNGLGETUNIFORMOFFSETEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformOffsetEXT");
        if (NULL == GLH_EXT_NAME(glGetUniformOffsetEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_gpu_shader4
    } else if (0 == strcmp(extension, "GL_EXT_gpu_shader4")) {
        GLH_EXT_NAME(glGetUniformuivEXT) = (PFNGLGETUNIFORMUIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetUniformuivEXT");
        if (NULL == GLH_EXT_NAME(glGetUniformuivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glBindFragDataLocationEXT) = (PFNGLBINDFRAGDATALOCATIONEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBindFragDataLocationEXT");
        if (NULL == GLH_EXT_NAME(glBindFragDataLocationEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetFragDataLocationEXT) = (PFNGLGETFRAGDATALOCATIONEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetFragDataLocationEXT");
        if (NULL == GLH_EXT_NAME(glGetFragDataLocationEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform1uiEXT) = (PFNGLUNIFORM1UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1uiEXT");
        if (NULL == GLH_EXT_NAME(glUniform1uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform2uiEXT) = (PFNGLUNIFORM2UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2uiEXT");
        if (NULL == GLH_EXT_NAME(glUniform2uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform3uiEXT) = (PFNGLUNIFORM3UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3uiEXT");
        if (NULL == GLH_EXT_NAME(glUniform3uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform4uiEXT) = (PFNGLUNIFORM4UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4uiEXT");
        if (NULL == GLH_EXT_NAME(glUniform4uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform1uivEXT) = (PFNGLUNIFORM1UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform1uivEXT");
        if (NULL == GLH_EXT_NAME(glUniform1uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform2uivEXT) = (PFNGLUNIFORM2UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform2uivEXT");
        if (NULL == GLH_EXT_NAME(glUniform2uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform3uivEXT) = (PFNGLUNIFORM3UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform3uivEXT");
        if (NULL == GLH_EXT_NAME(glUniform3uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glUniform4uivEXT) = (PFNGLUNIFORM4UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glUniform4uivEXT");
        if (NULL == GLH_EXT_NAME(glUniform4uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI1iEXT) = (PFNGLVERTEXATTRIBI1IEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI1iEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI1iEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI2iEXT) = (PFNGLVERTEXATTRIBI2IEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI2iEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI2iEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI3iEXT) = (PFNGLVERTEXATTRIBI3IEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI3iEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI3iEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4iEXT) = (PFNGLVERTEXATTRIBI4IEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4iEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4iEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI1uiEXT) = (PFNGLVERTEXATTRIBI1UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI1uiEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI1uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI2uiEXT) = (PFNGLVERTEXATTRIBI2UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI2uiEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI2uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI3uiEXT) = (PFNGLVERTEXATTRIBI3UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI3uiEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI3uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4uiEXT) = (PFNGLVERTEXATTRIBI4UIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4uiEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4uiEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI1ivEXT) = (PFNGLVERTEXATTRIBI1IVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI1ivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI1ivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI2ivEXT) = (PFNGLVERTEXATTRIBI2IVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI2ivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI2ivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI3ivEXT) = (PFNGLVERTEXATTRIBI3IVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI3ivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI3ivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4ivEXT) = (PFNGLVERTEXATTRIBI4IVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4ivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4ivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI1uivEXT) = (PFNGLVERTEXATTRIBI1UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI1uivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI1uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI2uivEXT) = (PFNGLVERTEXATTRIBI2UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI2uivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI2uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI3uivEXT) = (PFNGLVERTEXATTRIBI3UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI3uivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI3uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4uivEXT) = (PFNGLVERTEXATTRIBI4UIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4uivEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4uivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4bvEXT) = (PFNGLVERTEXATTRIBI4BVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4bvEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4bvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4svEXT) = (PFNGLVERTEXATTRIBI4SVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4svEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4svEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4ubvEXT) = (PFNGLVERTEXATTRIBI4UBVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4ubvEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4ubvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribI4usvEXT) = (PFNGLVERTEXATTRIBI4USVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribI4usvEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribI4usvEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glVertexAttribIPointerEXT) = (PFNGLVERTEXATTRIBIPOINTEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glVertexAttribIPointerEXT");
        if (NULL == GLH_EXT_NAME(glVertexAttribIPointerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribIivEXT) = (PFNGLGETVERTEXATTRIBIIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribIivEXT");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribIivEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glGetVertexAttribIuivEXT) = (PFNGLGETVERTEXATTRIBIUIVEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glGetVertexAttribIuivEXT");
        if (NULL == GLH_EXT_NAME(glGetVertexAttribIuivEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_geometry_shader4
    } else if (0 == strcmp(extension, "GL_EXT_geometry_shader4")) {
        GLH_EXT_NAME(glProgramParameteriEXT) = (PFNGLPROGRAMPARAMETERIEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramParameteriEXT");
        if (NULL == GLH_EXT_NAME(glProgramParameteriEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFramebufferTextureEXT) = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFramebufferTextureEXT");
        if (NULL == GLH_EXT_NAME(glFramebufferTextureEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFramebufferTextureLayerEXT) = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFramebufferTextureLayerEXT");
        if (NULL == GLH_EXT_NAME(glFramebufferTextureLayerEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glFramebufferTextureFaceEXT) = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glFramebufferTextureFaceEXT");
        if (NULL == GLH_EXT_NAME(glFramebufferTextureFaceEXT))
            return GL_FALSE;
#endif

#ifdef GL_NV_geometry_program4
    } else if (0 == strcmp(extension, "GL_NV_geometry_program4")) {
        GLH_EXT_NAME(glProgramVertexLimitNV) = (PFNGLPROGRAMVERTEXLIMITNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramVertexLimitNV");
        if (NULL == GLH_EXT_NAME(glProgramVertexLimitNV))
            return GL_FALSE;
#endif

#ifdef GL_NV_gpu_program4
    } else if (0 == strcmp(extension, "GL_NV_gpu_program4")) {
        GLH_EXT_NAME(glProgramLocalParameterI4iNV) = (PFNGLPROGRAMLOCALPARAMETERI4INVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameterI4iNV");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameterI4iNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParameterI4ivNV) = (PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameterI4ivNV");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameterI4ivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParametersI4ivNV) = (PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParametersI4ivNV");
        if (NULL == GLH_EXT_NAME(glProgramLocalParametersI4ivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParameterI4uiNV) = (PFNGLPROGRAMLOCALPARAMETERI4UINVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameterI4uiNV");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameterI4uiNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParameterI4uivNV) = (PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParameterI4uivNV");
        if (NULL == GLH_EXT_NAME(glProgramLocalParameterI4uivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramLocalParametersI4uivNV) = (PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramLocalParametersI4uivNV");
        if (NULL == GLH_EXT_NAME(glProgramLocalParametersI4uivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameterI4iNV) = (PFNGLPROGRAMENVPARAMETERI4INVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameterI4iNV");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameterI4iNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameterI4ivNV) = (PFNGLPROGRAMENVPARAMETERI4IVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameterI4ivNV");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameterI4ivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParametersI4ivNV) = (PFNGLPROGRAMENVPARAMETERSI4IVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParametersI4ivNV");
        if (NULL == GLH_EXT_NAME(glProgramEnvParametersI4ivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameterI4uiNV) = (PFNGLPROGRAMENVPARAMETERI4UINVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameterI4uiNV");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameterI4uiNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParameterI4uivNV) = (PFNGLPROGRAMENVPARAMETERI4UIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParameterI4uivNV");
        if (NULL == GLH_EXT_NAME(glProgramEnvParameterI4uivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramEnvParametersI4uivNV) = (PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramEnvParametersI4uivNV");
        if (NULL == GLH_EXT_NAME(glProgramEnvParametersI4uivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramLocalParameterIivNV) = (PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramLocalParameterIivNV");
        if (NULL == GLH_EXT_NAME(glGetProgramLocalParameterIivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramLocalParameterIuivNV) = (PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramLocalParameterIuivNV");
        if (NULL == GLH_EXT_NAME(glGetProgramLocalParameterIuivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramEnvParameterIivNV) = (PFNGLGETPROGRAMENVPARAMETERIIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramEnvParameterIivNV");
        if (NULL == GLH_EXT_NAME(glGetProgramEnvParameterIivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glGetProgramEnvParameterIuivNV) = (PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glGetProgramEnvParameterIuivNV");
        if (NULL == GLH_EXT_NAME(glGetProgramEnvParameterIuivNV))
            return GL_FALSE;
#endif

#ifdef GL_NV_parameter_buffer_object
    } else if (0 == strcmp(extension, "GL_NV_parameter_buffer_object")) {
        GLH_EXT_NAME(glProgramBufferParametersfvNV) = (PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramBufferParametersfvNV");
        if (NULL == GLH_EXT_NAME(glProgramBufferParametersfvNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramBufferParametersIivNV) = (PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramBufferParametersIivNV");
        if (NULL == GLH_EXT_NAME(glProgramBufferParametersIivNV))
            return GL_FALSE;
        GLH_EXT_NAME(glProgramBufferParametersIuivNV) = (PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC)GLH_EXT_GET_PROC_ADDRESS("glProgramBufferParametersIuivNV");
        if (NULL == GLH_EXT_NAME(glProgramBufferParametersIuivNV))
            return GL_FALSE;
#endif

#ifdef GL_EXT_framebuffer_multisample
    } else if (0 == strcmp(extension, "GL_EXT_framebuffer_multisample")) {
        GLH_EXT_NAME(glRenderbufferStorageMultisampleEXT) = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glRenderbufferStorageMultisampleEXT");
        if (NULL == GLH_EXT_NAME(glRenderbufferStorageMultisampleEXT))
            return GL_FALSE;
#endif

#ifdef GL_NV_framebuffer_multisample_coverage
    } else if (0 == strcmp(extension, "GL_NV_framebuffer_multisample_coverage")) {
        GLH_EXT_NAME(glRenderbufferStorageMultisampleCoverageNV) = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC)GLH_EXT_GET_PROC_ADDRESS("glRenderbufferStorageMultisampleCoverageNV");
        if (NULL == GLH_EXT_NAME(glRenderbufferStorageMultisampleCoverageNV))
            return GL_FALSE;
#endif

#ifdef GL_EXT_framebuffer_blit
    } else if (0 == strcmp(extension, "GL_EXT_framebuffer_blit")) {
        GLH_EXT_NAME(glBlitFramebufferEXT) = (PFNGLBLITFRAMEBUFFEREXTPROC)GLH_EXT_GET_PROC_ADDRESS("glBlitFramebufferEXT");
        if (NULL == GLH_EXT_NAME(glBlitFramebufferEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_draw_instanced
    } else if (0 == strcmp(extension, "GL_EXT_draw_instanced")) {
        GLH_EXT_NAME(glDrawArraysInstancedEXT) = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawArraysInstancedEXT");
        if (NULL == GLH_EXT_NAME(glDrawArraysInstancedEXT))
            return GL_FALSE;
        GLH_EXT_NAME(glDrawElementsInstancedEXT) = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)GLH_EXT_GET_PROC_ADDRESS("glDrawElementsInstancedEXT");
        if (NULL == GLH_EXT_NAME(glDrawElementsInstancedEXT))
            return GL_FALSE;
#endif

#ifdef GL_EXT_texture_compression_rgtc
    } else if (0 == strcmp(extension, "GL_EXT_texture_compression_rgtc")) {
#endif

    } else {
        return GL_FALSE; /* requested extension not found */
    }
    return GL_TRUE; /* requested extension found and successfully loaded */
}
#endif

/* BEGIN EDITED BY VIS 22.02.2007 */
#endif /* (defined(__cplusplus) && defined(_MSC_VER)) */
/* END EDITED BY VIS 22.02.2007 */

#undef GLH_EXT_SINGLE_FILE

#ifdef __cplusplus
}
#endif

#endif /* GLH_GENEXT_H */
#ifndef _WIN32
#if defined(GL_VERSION_1_2) || defined(GL_VERSION_1_3) || defined(GL_VERSION_1_4) || defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    /* These routines are prefixed by the preprocessor constant
       GLH_CORE_PREFIX to avoid colliding with the OpenGL 1.1 namespace. */
#define glBlendColor GLH_CORE_NAME(glBlendColor)
#define glBlendEquation GLH_CORE_NAME(glBlendEquation)
#define glDrawRangeElements GLH_CORE_NAME(glDrawRangeElements)
#define glColorTable GLH_CORE_NAME(glColorTable)
#define glColorTableParameterfv GLH_CORE_NAME(glColorTableParameterfv)
#define glColorTableParameteriv GLH_CORE_NAME(glColorTableParameteriv)
#define glCopyColorTable GLH_CORE_NAME(glCopyColorTable)
#define glGetColorTable GLH_CORE_NAME(glGetColorTable)
#define glGetColorTableParameterfv GLH_CORE_NAME(glGetColorTableParameterfv)
#define glGetColorTableParameteriv GLH_CORE_NAME(glGetColorTableParameteriv)
#define glColorSubTable GLH_CORE_NAME(glColorSubTable)
#define glCopyColorSubTable GLH_CORE_NAME(glCopyColorSubTable)
#define glConvolutionFilter1D GLH_CORE_NAME(glConvolutionFilter1D)
#define glConvolutionFilter2D GLH_CORE_NAME(glConvolutionFilter2D)
#define glConvolutionParameterf GLH_CORE_NAME(glConvolutionParameterf)
#define glConvolutionParameterfv GLH_CORE_NAME(glConvolutionParameterfv)
#define glConvolutionParameteri GLH_CORE_NAME(glConvolutionParameteri)
#define glConvolutionParameteriv GLH_CORE_NAME(glConvolutionParameteriv)
#define glCopyConvolutionFilter1D GLH_CORE_NAME(glCopyConvolutionFilter1D)
#define glCopyConvolutionFilter2D GLH_CORE_NAME(glCopyConvolutionFilter2D)
#define glGetConvolutionFilter GLH_CORE_NAME(glGetConvolutionFilter)
#define glGetConvolutionParameterfv GLH_CORE_NAME(glGetConvolutionParameterfv)
#define glGetConvolutionParameteriv GLH_CORE_NAME(glGetConvolutionParameteriv)
#define glGetSeparableFilter GLH_CORE_NAME(glGetSeparableFilter)
#define glSeparableFilter2D GLH_CORE_NAME(glSeparableFilter2D)
#define glGetHistogram GLH_CORE_NAME(glGetHistogram)
#define glGetHistogramParameterfv GLH_CORE_NAME(glGetHistogramParameterfv)
#define glGetHistogramParameteriv GLH_CORE_NAME(glGetHistogramParameteriv)
#define glGetMinmax GLH_CORE_NAME(glGetMinmax)
#define glGetMinmaxParameterfv GLH_CORE_NAME(glGetMinmaxParameterfv)
#define glGetMinmaxParameteriv GLH_CORE_NAME(glGetMinmaxParameteriv)
#define glHistogram GLH_CORE_NAME(glHistogram)
#define glMinmax GLH_CORE_NAME(glMinmax)
#define glResetHistogram GLH_CORE_NAME(glResetHistogram)
#define glResetMinmax GLH_CORE_NAME(glResetMinmax)
#define glTexImage3D GLH_CORE_NAME(glTexImage3D)
#define glTexSubImage3D GLH_CORE_NAME(glTexSubImage3D)
#define glCopyTexSubImage3D GLH_CORE_NAME(glCopyTexSubImage3D)
#endif

#if defined(GL_VERSION_1_3) || defined(GL_VERSION_1_4) || defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    /* These routines are prefixed by the preprocessor constant
       GLH_CORE_PREFIX to avoid colliding with the OpenGL 1.1 namespace. */
#define glActiveTexture GLH_CORE_NAME(glActiveTexture)
#define glClientActiveTexture GLH_CORE_NAME(glClientActiveTexture)
#define glMultiTexCoord1d GLH_CORE_NAME(glMultiTexCoord1d)
#define glMultiTexCoord1dv GLH_CORE_NAME(glMultiTexCoord1dv)
#define glMultiTexCoord1f GLH_CORE_NAME(glMultiTexCoord1f)
#define glMultiTexCoord1fv GLH_CORE_NAME(glMultiTexCoord1fv)
#define glMultiTexCoord1i GLH_CORE_NAME(glMultiTexCoord1i)
#define glMultiTexCoord1iv GLH_CORE_NAME(glMultiTexCoord1iv)
#define glMultiTexCoord1s GLH_CORE_NAME(glMultiTexCoord1s)
#define glMultiTexCoord1sv GLH_CORE_NAME(glMultiTexCoord1sv)
#define glMultiTexCoord2d GLH_CORE_NAME(glMultiTexCoord2d)
#define glMultiTexCoord2dv GLH_CORE_NAME(glMultiTexCoord2dv)
#define glMultiTexCoord2f GLH_CORE_NAME(glMultiTexCoord2f)
#define glMultiTexCoord2fv GLH_CORE_NAME(glMultiTexCoord2fv)
#define glMultiTexCoord2i GLH_CORE_NAME(glMultiTexCoord2i)
#define glMultiTexCoord2iv GLH_CORE_NAME(glMultiTexCoord2iv)
#define glMultiTexCoord2s GLH_CORE_NAME(glMultiTexCoord2s)
#define glMultiTexCoord2sv GLH_CORE_NAME(glMultiTexCoord2sv)
#define glMultiTexCoord3d GLH_CORE_NAME(glMultiTexCoord3d)
#define glMultiTexCoord3dv GLH_CORE_NAME(glMultiTexCoord3dv)
#define glMultiTexCoord3f GLH_CORE_NAME(glMultiTexCoord3f)
#define glMultiTexCoord3fv GLH_CORE_NAME(glMultiTexCoord3fv)
#define glMultiTexCoord3i GLH_CORE_NAME(glMultiTexCoord3i)
#define glMultiTexCoord3iv GLH_CORE_NAME(glMultiTexCoord3iv)
#define glMultiTexCoord3s GLH_CORE_NAME(glMultiTexCoord3s)
#define glMultiTexCoord3sv GLH_CORE_NAME(glMultiTexCoord3sv)
#define glMultiTexCoord4d GLH_CORE_NAME(glMultiTexCoord4d)
#define glMultiTexCoord4dv GLH_CORE_NAME(glMultiTexCoord4dv)
#define glMultiTexCoord4f GLH_CORE_NAME(glMultiTexCoord4f)
#define glMultiTexCoord4fv GLH_CORE_NAME(glMultiTexCoord4fv)
#define glMultiTexCoord4i GLH_CORE_NAME(glMultiTexCoord4i)
#define glMultiTexCoord4iv GLH_CORE_NAME(glMultiTexCoord4iv)
#define glMultiTexCoord4s GLH_CORE_NAME(glMultiTexCoord4s)
#define glMultiTexCoord4sv GLH_CORE_NAME(glMultiTexCoord4sv)
#define glLoadTransposeMatrixf GLH_CORE_NAME(glLoadTransposeMatrixf)
#define glLoadTransposeMatrixd GLH_CORE_NAME(glLoadTransposeMatrixd)
#define glMultTransposeMatrixf GLH_CORE_NAME(glMultTransposeMatrixf)
#define glMultTransposeMatrixd GLH_CORE_NAME(glMultTransposeMatrixd)
#define glSampleCoverage GLH_CORE_NAME(glSampleCoverage)
#define glCompressedTexImage3D GLH_CORE_NAME(glCompressedTexImage3D)
#define glCompressedTexImage2D GLH_CORE_NAME(glCompressedTexImage2D)
#define glCompressedTexImage1D GLH_CORE_NAME(glCompressedTexImage1D)
#define glCompressedTexSubImage3D GLH_CORE_NAME(glCompressedTexSubImage3D)
#define glCompressedTexSubImage2D GLH_CORE_NAME(glCompressedTexSubImage2D)
#define glCompressedTexSubImage1D GLH_CORE_NAME(glCompressedTexSubImage1D)
#define glGetCompressedTexImage GLH_CORE_NAME(glGetCompressedTexImage)
#endif

#if defined(GL_VERSION_1_4) || defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    /* These routines are prefixed by the preprocessor constant
       GLH_CORE_PREFIX to avoid colliding with the OpenGL 1.1 namespace. */
#define glBlendFuncSeparate GLH_CORE_NAME(glBlendFuncSeparate)
#define glFogCoordf GLH_CORE_NAME(glFogCoordf)
#define glFogCoordfv GLH_CORE_NAME(glFogCoordfv)
#define glFogCoordd GLH_CORE_NAME(glFogCoordd)
#define glFogCoorddv GLH_CORE_NAME(glFogCoorddv)
#define glFogCoordPointer GLH_CORE_NAME(glFogCoordPointer)
#define glMultiDrawArrays GLH_CORE_NAME(glMultiDrawArrays)
#define glMultiDrawElements GLH_CORE_NAME(glMultiDrawElements)
#define glPointParameterf GLH_CORE_NAME(glPointParameterf)
#define glPointParameterfv GLH_CORE_NAME(glPointParameterfv)
#define glPointParameteri GLH_CORE_NAME(glPointParameteri)
#define glPointParameteriv GLH_CORE_NAME(glPointParameteriv)
#define glSecondaryColor3b GLH_CORE_NAME(glSecondaryColor3b)
#define glSecondaryColor3bv GLH_CORE_NAME(glSecondaryColor3bv)
#define glSecondaryColor3d GLH_CORE_NAME(glSecondaryColor3d)
#define glSecondaryColor3dv GLH_CORE_NAME(glSecondaryColor3dv)
#define glSecondaryColor3f GLH_CORE_NAME(glSecondaryColor3f)
#define glSecondaryColor3fv GLH_CORE_NAME(glSecondaryColor3fv)
#define glSecondaryColor3i GLH_CORE_NAME(glSecondaryColor3i)
#define glSecondaryColor3iv GLH_CORE_NAME(glSecondaryColor3iv)
#define glSecondaryColor3s GLH_CORE_NAME(glSecondaryColor3s)
#define glSecondaryColor3sv GLH_CORE_NAME(glSecondaryColor3sv)
#define glSecondaryColor3ub GLH_CORE_NAME(glSecondaryColor3ub)
#define glSecondaryColor3ubv GLH_CORE_NAME(glSecondaryColor3ubv)
#define glSecondaryColor3ui GLH_CORE_NAME(glSecondaryColor3ui)
#define glSecondaryColor3uiv GLH_CORE_NAME(glSecondaryColor3uiv)
#define glSecondaryColor3us GLH_CORE_NAME(glSecondaryColor3us)
#define glSecondaryColor3usv GLH_CORE_NAME(glSecondaryColor3usv)
#define glSecondaryColorPointer GLH_CORE_NAME(glSecondaryColorPointer)
#define glWindowPos2d GLH_CORE_NAME(glWindowPos2d)
#define glWindowPos2dv GLH_CORE_NAME(glWindowPos2dv)
#define glWindowPos2f GLH_CORE_NAME(glWindowPos2f)
#define glWindowPos2fv GLH_CORE_NAME(glWindowPos2fv)
#define glWindowPos2i GLH_CORE_NAME(glWindowPos2i)
#define glWindowPos2iv GLH_CORE_NAME(glWindowPos2iv)
#define glWindowPos2s GLH_CORE_NAME(glWindowPos2s)
#define glWindowPos2sv GLH_CORE_NAME(glWindowPos2sv)
#define glWindowPos3d GLH_CORE_NAME(glWindowPos3d)
#define glWindowPos3dv GLH_CORE_NAME(glWindowPos3dv)
#define glWindowPos3f GLH_CORE_NAME(glWindowPos3f)
#define glWindowPos3fv GLH_CORE_NAME(glWindowPos3fv)
#define glWindowPos3i GLH_CORE_NAME(glWindowPos3i)
#define glWindowPos3iv GLH_CORE_NAME(glWindowPos3iv)
#define glWindowPos3s GLH_CORE_NAME(glWindowPos3s)
#define glWindowPos3sv GLH_CORE_NAME(glWindowPos3sv)
#endif

#if defined(GL_VERSION_1_5) || defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    /* These routines are prefixed by the preprocessor constant
       GLH_CORE_PREFIX to avoid colliding with the OpenGL 1.1 namespace. */
#define glGenQueries GLH_CORE_NAME(glGenQueries)
#define glDeleteQueries GLH_CORE_NAME(glDeleteQueries)
#define glIsQuery GLH_CORE_NAME(glIsQuery)
#define glBeginQuery GLH_CORE_NAME(glBeginQuery)
#define glEndQuery GLH_CORE_NAME(glEndQuery)
#define glGetQueryiv GLH_CORE_NAME(glGetQueryiv)
#define glGetQueryObjectiv GLH_CORE_NAME(glGetQueryObjectiv)
#define glGetQueryObjectuiv GLH_CORE_NAME(glGetQueryObjectuiv)
#define glBindBuffer GLH_CORE_NAME(glBindBuffer)
#define glDeleteBuffers GLH_CORE_NAME(glDeleteBuffers)
#define glGenBuffers GLH_CORE_NAME(glGenBuffers)
#define glIsBuffer GLH_CORE_NAME(glIsBuffer)
#define glBufferData GLH_CORE_NAME(glBufferData)
#define glBufferSubData GLH_CORE_NAME(glBufferSubData)
#define glGetBufferSubData GLH_CORE_NAME(glGetBufferSubData)
#define glMapBuffer GLH_CORE_NAME(glMapBuffer)
#define glUnmapBuffer GLH_CORE_NAME(glUnmapBuffer)
#define glGetBufferParameteriv GLH_CORE_NAME(glGetBufferParameteriv)
#define glGetBufferPointerv GLH_CORE_NAME(glGetBufferPointerv)
#endif

#if defined(GL_VERSION_2_0) || defined(GL_VERSION_2_1)
    /* These routines are prefixed by the preprocessor constant
       GLH_CORE_PREFIX to avoid colliding with the OpenGL 1.1 namespace. */
#define glBlendEquationSeparate GLH_CORE_NAME(glBlendEquationSeparate)
#define glDrawBuffers GLH_CORE_NAME(glDrawBuffers)
#define glStencilOpSeparate GLH_CORE_NAME(glStencilOpSeparate)
#define glStencilFuncSeparate GLH_CORE_NAME(glStencilFuncSeparate)
#define glStencilMaskSeparate GLH_CORE_NAME(glStencilMaskSeparate)
#define glAttachShader GLH_CORE_NAME(glAttachShader)
#define glBindAttribLocation GLH_CORE_NAME(glBindAttribLocation)
#define glCompileShader GLH_CORE_NAME(glCompileShader)
#define glCreateProgram GLH_CORE_NAME(glCreateProgram)
#define glCreateShader GLH_CORE_NAME(glCreateShader)
#define glDeleteProgram GLH_CORE_NAME(glDeleteProgram)
#define glDeleteShader GLH_CORE_NAME(glDeleteShader)
#define glDetachShader GLH_CORE_NAME(glDetachShader)
#define glDisableVertexAttribArray GLH_CORE_NAME(glDisableVertexAttribArray)
#define glEnableVertexAttribArray GLH_CORE_NAME(glEnableVertexAttribArray)
#define glGetActiveAttrib GLH_CORE_NAME(glGetActiveAttrib)
#define glGetActiveUniform GLH_CORE_NAME(glGetActiveUniform)
#define glGetAttachedShaders GLH_CORE_NAME(glGetAttachedShaders)
#define glGetAttribLocation GLH_CORE_NAME(glGetAttribLocation)
#define glGetProgramiv GLH_CORE_NAME(glGetProgramiv)
#define glGetProgramInfoLog GLH_CORE_NAME(glGetProgramInfoLog)
#define glGetShaderiv GLH_CORE_NAME(glGetShaderiv)
#define glGetShaderInfoLog GLH_CORE_NAME(glGetShaderInfoLog)
#define glGetShaderSource GLH_CORE_NAME(glGetShaderSource)
#define glGetUniformLocation GLH_CORE_NAME(glGetUniformLocation)
#define glGetUniformfv GLH_CORE_NAME(glGetUniformfv)
#define glGetUniformiv GLH_CORE_NAME(glGetUniformiv)
#define glGetVertexAttribdv GLH_CORE_NAME(glGetVertexAttribdv)
#define glGetVertexAttribfv GLH_CORE_NAME(glGetVertexAttribfv)
#define glGetVertexAttribiv GLH_CORE_NAME(glGetVertexAttribiv)
#define glGetVertexAttribPointerv GLH_CORE_NAME(glGetVertexAttribPointerv)
#define glIsProgram GLH_CORE_NAME(glIsProgram)
#define glIsShader GLH_CORE_NAME(glIsShader)
#define glLinkProgram GLH_CORE_NAME(glLinkProgram)
#define glShaderSource GLH_CORE_NAME(glShaderSource)
#define glUseProgram GLH_CORE_NAME(glUseProgram)
#define glUniform1f GLH_CORE_NAME(glUniform1f)
#define glUniform2f GLH_CORE_NAME(glUniform2f)
#define glUniform3f GLH_CORE_NAME(glUniform3f)
#define glUniform4f GLH_CORE_NAME(glUniform4f)
#define glUniform1i GLH_CORE_NAME(glUniform1i)
#define glUniform2i GLH_CORE_NAME(glUniform2i)
#define glUniform3i GLH_CORE_NAME(glUniform3i)
#define glUniform4i GLH_CORE_NAME(glUniform4i)
#define glUniform1fv GLH_CORE_NAME(glUniform1fv)
#define glUniform2fv GLH_CORE_NAME(glUniform2fv)
#define glUniform3fv GLH_CORE_NAME(glUniform3fv)
#define glUniform4fv GLH_CORE_NAME(glUniform4fv)
#define glUniform1iv GLH_CORE_NAME(glUniform1iv)
#define glUniform2iv GLH_CORE_NAME(glUniform2iv)
#define glUniform3iv GLH_CORE_NAME(glUniform3iv)
#define glUniform4iv GLH_CORE_NAME(glUniform4iv)
#define glUniformMatrix2fv GLH_CORE_NAME(glUniformMatrix2fv)
#define glUniformMatrix3fv GLH_CORE_NAME(glUniformMatrix3fv)
#define glUniformMatrix4fv GLH_CORE_NAME(glUniformMatrix4fv)
#define glValidateProgram GLH_CORE_NAME(glValidateProgram)
#define glVertexAttrib1d GLH_CORE_NAME(glVertexAttrib1d)
#define glVertexAttrib1dv GLH_CORE_NAME(glVertexAttrib1dv)
#define glVertexAttrib1f GLH_CORE_NAME(glVertexAttrib1f)
#define glVertexAttrib1fv GLH_CORE_NAME(glVertexAttrib1fv)
#define glVertexAttrib1s GLH_CORE_NAME(glVertexAttrib1s)
#define glVertexAttrib1sv GLH_CORE_NAME(glVertexAttrib1sv)
#define glVertexAttrib2d GLH_CORE_NAME(glVertexAttrib2d)
#define glVertexAttrib2dv GLH_CORE_NAME(glVertexAttrib2dv)
#define glVertexAttrib2f GLH_CORE_NAME(glVertexAttrib2f)
#define glVertexAttrib2fv GLH_CORE_NAME(glVertexAttrib2fv)
#define glVertexAttrib2s GLH_CORE_NAME(glVertexAttrib2s)
#define glVertexAttrib2sv GLH_CORE_NAME(glVertexAttrib2sv)
#define glVertexAttrib3d GLH_CORE_NAME(glVertexAttrib3d)
#define glVertexAttrib3dv GLH_CORE_NAME(glVertexAttrib3dv)
#define glVertexAttrib3f GLH_CORE_NAME(glVertexAttrib3f)
#define glVertexAttrib3fv GLH_CORE_NAME(glVertexAttrib3fv)
#define glVertexAttrib3s GLH_CORE_NAME(glVertexAttrib3s)
#define glVertexAttrib3sv GLH_CORE_NAME(glVertexAttrib3sv)
#define glVertexAttrib4Nbv GLH_CORE_NAME(glVertexAttrib4Nbv)
#define glVertexAttrib4Niv GLH_CORE_NAME(glVertexAttrib4Niv)
#define glVertexAttrib4Nsv GLH_CORE_NAME(glVertexAttrib4Nsv)
#define glVertexAttrib4Nub GLH_CORE_NAME(glVertexAttrib4Nub)
#define glVertexAttrib4Nubv GLH_CORE_NAME(glVertexAttrib4Nubv)
#define glVertexAttrib4Nuiv GLH_CORE_NAME(glVertexAttrib4Nuiv)
#define glVertexAttrib4Nusv GLH_CORE_NAME(glVertexAttrib4Nusv)
#define glVertexAttrib4bv GLH_CORE_NAME(glVertexAttrib4bv)
#define glVertexAttrib4d GLH_CORE_NAME(glVertexAttrib4d)
#define glVertexAttrib4dv GLH_CORE_NAME(glVertexAttrib4dv)
#define glVertexAttrib4f GLH_CORE_NAME(glVertexAttrib4f)
#define glVertexAttrib4fv GLH_CORE_NAME(glVertexAttrib4fv)
#define glVertexAttrib4iv GLH_CORE_NAME(glVertexAttrib4iv)
#define glVertexAttrib4s GLH_CORE_NAME(glVertexAttrib4s)
#define glVertexAttrib4sv GLH_CORE_NAME(glVertexAttrib4sv)
#define glVertexAttrib4ubv GLH_CORE_NAME(glVertexAttrib4ubv)
#define glVertexAttrib4uiv GLH_CORE_NAME(glVertexAttrib4uiv)
#define glVertexAttrib4usv GLH_CORE_NAME(glVertexAttrib4usv)
#define glVertexAttribPointer GLH_CORE_NAME(glVertexAttribPointer)
#endif

#if defined(GL_VERSION_2_1)
    /* These routines are prefixed by the preprocessor constant
       GLH_CORE_PREFIX to avoid colliding with the OpenGL 1.1 namespace. */
#define glUniformMatrix2x3fv GLH_CORE_NAME(glUniformMatrix2x3fv)
#define glUniformMatrix3x2fv GLH_CORE_NAME(glUniformMatrix3x2fv)
#define glUniformMatrix2x4fv GLH_CORE_NAME(glUniformMatrix2x4fv)
#define glUniformMatrix4x2fv GLH_CORE_NAME(glUniformMatrix4x2fv)
#define glUniformMatrix3x4fv GLH_CORE_NAME(glUniformMatrix3x4fv)
#define glUniformMatrix4x3fv GLH_CORE_NAME(glUniformMatrix4x3fv)
#endif

#ifdef GL_ARB_multitexture
#define glActiveTextureARB GLH_EXT_NAME(glActiveTextureARB)
#define glClientActiveTextureARB GLH_EXT_NAME(glClientActiveTextureARB)
#define glMultiTexCoord1dARB GLH_EXT_NAME(glMultiTexCoord1dARB)
#define glMultiTexCoord1dvARB GLH_EXT_NAME(glMultiTexCoord1dvARB)
#define glMultiTexCoord1fARB GLH_EXT_NAME(glMultiTexCoord1fARB)
#define glMultiTexCoord1fvARB GLH_EXT_NAME(glMultiTexCoord1fvARB)
#define glMultiTexCoord1iARB GLH_EXT_NAME(glMultiTexCoord1iARB)
#define glMultiTexCoord1ivARB GLH_EXT_NAME(glMultiTexCoord1ivARB)
#define glMultiTexCoord1sARB GLH_EXT_NAME(glMultiTexCoord1sARB)
#define glMultiTexCoord1svARB GLH_EXT_NAME(glMultiTexCoord1svARB)
#define glMultiTexCoord2dARB GLH_EXT_NAME(glMultiTexCoord2dARB)
#define glMultiTexCoord2dvARB GLH_EXT_NAME(glMultiTexCoord2dvARB)
#define glMultiTexCoord2fARB GLH_EXT_NAME(glMultiTexCoord2fARB)
#define glMultiTexCoord2fvARB GLH_EXT_NAME(glMultiTexCoord2fvARB)
#define glMultiTexCoord2iARB GLH_EXT_NAME(glMultiTexCoord2iARB)
#define glMultiTexCoord2ivARB GLH_EXT_NAME(glMultiTexCoord2ivARB)
#define glMultiTexCoord2sARB GLH_EXT_NAME(glMultiTexCoord2sARB)
#define glMultiTexCoord2svARB GLH_EXT_NAME(glMultiTexCoord2svARB)
#define glMultiTexCoord3dARB GLH_EXT_NAME(glMultiTexCoord3dARB)
#define glMultiTexCoord3dvARB GLH_EXT_NAME(glMultiTexCoord3dvARB)
#define glMultiTexCoord3fARB GLH_EXT_NAME(glMultiTexCoord3fARB)
#define glMultiTexCoord3fvARB GLH_EXT_NAME(glMultiTexCoord3fvARB)
#define glMultiTexCoord3iARB GLH_EXT_NAME(glMultiTexCoord3iARB)
#define glMultiTexCoord3ivARB GLH_EXT_NAME(glMultiTexCoord3ivARB)
#define glMultiTexCoord3sARB GLH_EXT_NAME(glMultiTexCoord3sARB)
#define glMultiTexCoord3svARB GLH_EXT_NAME(glMultiTexCoord3svARB)
#define glMultiTexCoord4dARB GLH_EXT_NAME(glMultiTexCoord4dARB)
#define glMultiTexCoord4dvARB GLH_EXT_NAME(glMultiTexCoord4dvARB)
#define glMultiTexCoord4fARB GLH_EXT_NAME(glMultiTexCoord4fARB)
#define glMultiTexCoord4fvARB GLH_EXT_NAME(glMultiTexCoord4fvARB)
#define glMultiTexCoord4iARB GLH_EXT_NAME(glMultiTexCoord4iARB)
#define glMultiTexCoord4ivARB GLH_EXT_NAME(glMultiTexCoord4ivARB)
#define glMultiTexCoord4sARB GLH_EXT_NAME(glMultiTexCoord4sARB)
#define glMultiTexCoord4svARB GLH_EXT_NAME(glMultiTexCoord4svARB)
#endif

#ifdef GL_ARB_transpose_matrix
#define glLoadTransposeMatrixfARB GLH_EXT_NAME(glLoadTransposeMatrixfARB)
#define glLoadTransposeMatrixdARB GLH_EXT_NAME(glLoadTransposeMatrixdARB)
#define glMultTransposeMatrixfARB GLH_EXT_NAME(glMultTransposeMatrixfARB)
#define glMultTransposeMatrixdARB GLH_EXT_NAME(glMultTransposeMatrixdARB)
#endif

#ifdef GL_ARB_multisample
#define glSampleCoverageARB GLH_EXT_NAME(glSampleCoverageARB)
#endif

#ifdef GL_ARB_texture_env_add
#endif

#ifdef GL_ARB_texture_cube_map
#endif

#ifdef GL_ARB_texture_compression
#define glCompressedTexImage3DARB GLH_EXT_NAME(glCompressedTexImage3DARB)
#define glCompressedTexImage2DARB GLH_EXT_NAME(glCompressedTexImage2DARB)
#define glCompressedTexImage1DARB GLH_EXT_NAME(glCompressedTexImage1DARB)
#define glCompressedTexSubImage3DARB GLH_EXT_NAME(glCompressedTexSubImage3DARB)
#define glCompressedTexSubImage2DARB GLH_EXT_NAME(glCompressedTexSubImage2DARB)
#define glCompressedTexSubImage1DARB GLH_EXT_NAME(glCompressedTexSubImage1DARB)
#define glGetCompressedTexImageARB GLH_EXT_NAME(glGetCompressedTexImageARB)
#endif

#ifdef GL_ARB_texture_border_clamp
#endif

#ifdef GL_ARB_point_parameters
#define glPointParameterfARB GLH_EXT_NAME(glPointParameterfARB)
#define glPointParameterfvARB GLH_EXT_NAME(glPointParameterfvARB)
#endif

#ifdef GL_ARB_vertex_blend
#define glWeightbvARB GLH_EXT_NAME(glWeightbvARB)
#define glWeightsvARB GLH_EXT_NAME(glWeightsvARB)
#define glWeightivARB GLH_EXT_NAME(glWeightivARB)
#define glWeightfvARB GLH_EXT_NAME(glWeightfvARB)
#define glWeightdvARB GLH_EXT_NAME(glWeightdvARB)
#define glWeightubvARB GLH_EXT_NAME(glWeightubvARB)
#define glWeightusvARB GLH_EXT_NAME(glWeightusvARB)
#define glWeightuivARB GLH_EXT_NAME(glWeightuivARB)
#define glWeightPointerARB GLH_EXT_NAME(glWeightPointerARB)
#define glVertexBlendARB GLH_EXT_NAME(glVertexBlendARB)
#endif

#ifdef GL_ARB_matrix_palette
#define glCurrentPaletteMatrixARB GLH_EXT_NAME(glCurrentPaletteMatrixARB)
#define glMatrixIndexubvARB GLH_EXT_NAME(glMatrixIndexubvARB)
#define glMatrixIndexusvARB GLH_EXT_NAME(glMatrixIndexusvARB)
#define glMatrixIndexuivARB GLH_EXT_NAME(glMatrixIndexuivARB)
#define glMatrixIndexPointerARB GLH_EXT_NAME(glMatrixIndexPointerARB)
#endif

#ifdef GL_ARB_texture_env_combine
#endif

#ifdef GL_ARB_texture_env_crossbar
#endif

#ifdef GL_ARB_texture_env_dot3
#endif

#ifdef GL_ARB_texture_mirrored_repeat
#endif

#ifdef GL_ARB_depth_texture
#endif

#ifdef GL_ARB_shadow
#endif

#ifdef GL_ARB_shadow_ambient
#endif

#ifdef GL_ARB_window_pos
#define glWindowPos2dARB GLH_EXT_NAME(glWindowPos2dARB)
#define glWindowPos2dvARB GLH_EXT_NAME(glWindowPos2dvARB)
#define glWindowPos2fARB GLH_EXT_NAME(glWindowPos2fARB)
#define glWindowPos2fvARB GLH_EXT_NAME(glWindowPos2fvARB)
#define glWindowPos2iARB GLH_EXT_NAME(glWindowPos2iARB)
#define glWindowPos2ivARB GLH_EXT_NAME(glWindowPos2ivARB)
#define glWindowPos2sARB GLH_EXT_NAME(glWindowPos2sARB)
#define glWindowPos2svARB GLH_EXT_NAME(glWindowPos2svARB)
#define glWindowPos3dARB GLH_EXT_NAME(glWindowPos3dARB)
#define glWindowPos3dvARB GLH_EXT_NAME(glWindowPos3dvARB)
#define glWindowPos3fARB GLH_EXT_NAME(glWindowPos3fARB)
#define glWindowPos3fvARB GLH_EXT_NAME(glWindowPos3fvARB)
#define glWindowPos3iARB GLH_EXT_NAME(glWindowPos3iARB)
#define glWindowPos3ivARB GLH_EXT_NAME(glWindowPos3ivARB)
#define glWindowPos3sARB GLH_EXT_NAME(glWindowPos3sARB)
#define glWindowPos3svARB GLH_EXT_NAME(glWindowPos3svARB)
#endif

#ifdef GL_ARB_vertex_program
#define glVertexAttrib1dARB GLH_EXT_NAME(glVertexAttrib1dARB)
#define glVertexAttrib1dvARB GLH_EXT_NAME(glVertexAttrib1dvARB)
#define glVertexAttrib1fARB GLH_EXT_NAME(glVertexAttrib1fARB)
#define glVertexAttrib1fvARB GLH_EXT_NAME(glVertexAttrib1fvARB)
#define glVertexAttrib1sARB GLH_EXT_NAME(glVertexAttrib1sARB)
#define glVertexAttrib1svARB GLH_EXT_NAME(glVertexAttrib1svARB)
#define glVertexAttrib2dARB GLH_EXT_NAME(glVertexAttrib2dARB)
#define glVertexAttrib2dvARB GLH_EXT_NAME(glVertexAttrib2dvARB)
#define glVertexAttrib2fARB GLH_EXT_NAME(glVertexAttrib2fARB)
#define glVertexAttrib2fvARB GLH_EXT_NAME(glVertexAttrib2fvARB)
#define glVertexAttrib2sARB GLH_EXT_NAME(glVertexAttrib2sARB)
#define glVertexAttrib2svARB GLH_EXT_NAME(glVertexAttrib2svARB)
#define glVertexAttrib3dARB GLH_EXT_NAME(glVertexAttrib3dARB)
#define glVertexAttrib3dvARB GLH_EXT_NAME(glVertexAttrib3dvARB)
#define glVertexAttrib3fARB GLH_EXT_NAME(glVertexAttrib3fARB)
#define glVertexAttrib3fvARB GLH_EXT_NAME(glVertexAttrib3fvARB)
#define glVertexAttrib3sARB GLH_EXT_NAME(glVertexAttrib3sARB)
#define glVertexAttrib3svARB GLH_EXT_NAME(glVertexAttrib3svARB)
#define glVertexAttrib4NbvARB GLH_EXT_NAME(glVertexAttrib4NbvARB)
#define glVertexAttrib4NivARB GLH_EXT_NAME(glVertexAttrib4NivARB)
#define glVertexAttrib4NsvARB GLH_EXT_NAME(glVertexAttrib4NsvARB)
#define glVertexAttrib4NubARB GLH_EXT_NAME(glVertexAttrib4NubARB)
#define glVertexAttrib4NubvARB GLH_EXT_NAME(glVertexAttrib4NubvARB)
#define glVertexAttrib4NuivARB GLH_EXT_NAME(glVertexAttrib4NuivARB)
#define glVertexAttrib4NusvARB GLH_EXT_NAME(glVertexAttrib4NusvARB)
#define glVertexAttrib4bvARB GLH_EXT_NAME(glVertexAttrib4bvARB)
#define glVertexAttrib4dARB GLH_EXT_NAME(glVertexAttrib4dARB)
#define glVertexAttrib4dvARB GLH_EXT_NAME(glVertexAttrib4dvARB)
#define glVertexAttrib4fARB GLH_EXT_NAME(glVertexAttrib4fARB)
#define glVertexAttrib4fvARB GLH_EXT_NAME(glVertexAttrib4fvARB)
#define glVertexAttrib4ivARB GLH_EXT_NAME(glVertexAttrib4ivARB)
#define glVertexAttrib4sARB GLH_EXT_NAME(glVertexAttrib4sARB)
#define glVertexAttrib4svARB GLH_EXT_NAME(glVertexAttrib4svARB)
#define glVertexAttrib4ubvARB GLH_EXT_NAME(glVertexAttrib4ubvARB)
#define glVertexAttrib4uivARB GLH_EXT_NAME(glVertexAttrib4uivARB)
#define glVertexAttrib4usvARB GLH_EXT_NAME(glVertexAttrib4usvARB)
#define glVertexAttribPointerARB GLH_EXT_NAME(glVertexAttribPointerARB)
#define glEnableVertexAttribArrayARB GLH_EXT_NAME(glEnableVertexAttribArrayARB)
#define glDisableVertexAttribArrayARB GLH_EXT_NAME(glDisableVertexAttribArrayARB)
#define glProgramStringARB GLH_EXT_NAME(glProgramStringARB)
#define glBindProgramARB GLH_EXT_NAME(glBindProgramARB)
#define glDeleteProgramsARB GLH_EXT_NAME(glDeleteProgramsARB)
#define glGenProgramsARB GLH_EXT_NAME(glGenProgramsARB)
#define glProgramEnvParameter4dARB GLH_EXT_NAME(glProgramEnvParameter4dARB)
#define glProgramEnvParameter4dvARB GLH_EXT_NAME(glProgramEnvParameter4dvARB)
#define glProgramEnvParameter4fARB GLH_EXT_NAME(glProgramEnvParameter4fARB)
#define glProgramEnvParameter4fvARB GLH_EXT_NAME(glProgramEnvParameter4fvARB)
#define glProgramLocalParameter4dARB GLH_EXT_NAME(glProgramLocalParameter4dARB)
#define glProgramLocalParameter4dvARB GLH_EXT_NAME(glProgramLocalParameter4dvARB)
#define glProgramLocalParameter4fARB GLH_EXT_NAME(glProgramLocalParameter4fARB)
#define glProgramLocalParameter4fvARB GLH_EXT_NAME(glProgramLocalParameter4fvARB)
#define glGetProgramEnvParameterdvARB GLH_EXT_NAME(glGetProgramEnvParameterdvARB)
#define glGetProgramEnvParameterfvARB GLH_EXT_NAME(glGetProgramEnvParameterfvARB)
#define glGetProgramLocalParameterdvARB GLH_EXT_NAME(glGetProgramLocalParameterdvARB)
#define glGetProgramLocalParameterfvARB GLH_EXT_NAME(glGetProgramLocalParameterfvARB)
#define glGetProgramivARB GLH_EXT_NAME(glGetProgramivARB)
#define glGetProgramStringARB GLH_EXT_NAME(glGetProgramStringARB)
#define glGetVertexAttribdvARB GLH_EXT_NAME(glGetVertexAttribdvARB)
#define glGetVertexAttribfvARB GLH_EXT_NAME(glGetVertexAttribfvARB)
#define glGetVertexAttribivARB GLH_EXT_NAME(glGetVertexAttribivARB)
#define glGetVertexAttribPointervARB GLH_EXT_NAME(glGetVertexAttribPointervARB)
#define glIsProgramARB GLH_EXT_NAME(glIsProgramARB)
#endif

#ifdef GL_ARB_fragment_program
#endif

#ifdef GL_ARB_vertex_buffer_object
#define glBindBufferARB GLH_EXT_NAME(glBindBufferARB)
#define glDeleteBuffersARB GLH_EXT_NAME(glDeleteBuffersARB)
#define glGenBuffersARB GLH_EXT_NAME(glGenBuffersARB)
#define glIsBufferARB GLH_EXT_NAME(glIsBufferARB)
#define glBufferDataARB GLH_EXT_NAME(glBufferDataARB)
#define glBufferSubDataARB GLH_EXT_NAME(glBufferSubDataARB)
#define glGetBufferSubDataARB GLH_EXT_NAME(glGetBufferSubDataARB)
#define glMapBufferARB GLH_EXT_NAME(glMapBufferARB)
#define glUnmapBufferARB GLH_EXT_NAME(glUnmapBufferARB)
#define glGetBufferParameterivARB GLH_EXT_NAME(glGetBufferParameterivARB)
#define glGetBufferPointervARB GLH_EXT_NAME(glGetBufferPointervARB)
#endif

#ifdef GL_ARB_occlusion_query
#define glGenQueriesARB GLH_EXT_NAME(glGenQueriesARB)
#define glDeleteQueriesARB GLH_EXT_NAME(glDeleteQueriesARB)
#define glIsQueryARB GLH_EXT_NAME(glIsQueryARB)
#define glBeginQueryARB GLH_EXT_NAME(glBeginQueryARB)
#define glEndQueryARB GLH_EXT_NAME(glEndQueryARB)
#define glGetQueryivARB GLH_EXT_NAME(glGetQueryivARB)
#define glGetQueryObjectivARB GLH_EXT_NAME(glGetQueryObjectivARB)
#define glGetQueryObjectuivARB GLH_EXT_NAME(glGetQueryObjectuivARB)
#endif

#ifdef GL_ARB_shader_objects
#define glDeleteObjectARB GLH_EXT_NAME(glDeleteObjectARB)
#define glGetHandleARB GLH_EXT_NAME(glGetHandleARB)
#define glDetachObjectARB GLH_EXT_NAME(glDetachObjectARB)
#define glCreateShaderObjectARB GLH_EXT_NAME(glCreateShaderObjectARB)
#define glShaderSourceARB GLH_EXT_NAME(glShaderSourceARB)
#define glCompileShaderARB GLH_EXT_NAME(glCompileShaderARB)
#define glCreateProgramObjectARB GLH_EXT_NAME(glCreateProgramObjectARB)
#define glAttachObjectARB GLH_EXT_NAME(glAttachObjectARB)
#define glLinkProgramARB GLH_EXT_NAME(glLinkProgramARB)
#define glUseProgramObjectARB GLH_EXT_NAME(glUseProgramObjectARB)
#define glValidateProgramARB GLH_EXT_NAME(glValidateProgramARB)
#define glUniform1fARB GLH_EXT_NAME(glUniform1fARB)
#define glUniform2fARB GLH_EXT_NAME(glUniform2fARB)
#define glUniform3fARB GLH_EXT_NAME(glUniform3fARB)
#define glUniform4fARB GLH_EXT_NAME(glUniform4fARB)
#define glUniform1iARB GLH_EXT_NAME(glUniform1iARB)
#define glUniform2iARB GLH_EXT_NAME(glUniform2iARB)
#define glUniform3iARB GLH_EXT_NAME(glUniform3iARB)
#define glUniform4iARB GLH_EXT_NAME(glUniform4iARB)
#define glUniform1fvARB GLH_EXT_NAME(glUniform1fvARB)
#define glUniform2fvARB GLH_EXT_NAME(glUniform2fvARB)
#define glUniform3fvARB GLH_EXT_NAME(glUniform3fvARB)
#define glUniform4fvARB GLH_EXT_NAME(glUniform4fvARB)
#define glUniform1ivARB GLH_EXT_NAME(glUniform1ivARB)
#define glUniform2ivARB GLH_EXT_NAME(glUniform2ivARB)
#define glUniform3ivARB GLH_EXT_NAME(glUniform3ivARB)
#define glUniform4ivARB GLH_EXT_NAME(glUniform4ivARB)
#define glUniformMatrix2fvARB GLH_EXT_NAME(glUniformMatrix2fvARB)
#define glUniformMatrix3fvARB GLH_EXT_NAME(glUniformMatrix3fvARB)
#define glUniformMatrix4fvARB GLH_EXT_NAME(glUniformMatrix4fvARB)
#define glGetObjectParameterfvARB GLH_EXT_NAME(glGetObjectParameterfvARB)
#define glGetObjectParameterivARB GLH_EXT_NAME(glGetObjectParameterivARB)
#define glGetInfoLogARB GLH_EXT_NAME(glGetInfoLogARB)
#define glGetAttachedObjectsARB GLH_EXT_NAME(glGetAttachedObjectsARB)
#define glGetUniformLocationARB GLH_EXT_NAME(glGetUniformLocationARB)
#define glGetActiveUniformARB GLH_EXT_NAME(glGetActiveUniformARB)
#define glGetUniformfvARB GLH_EXT_NAME(glGetUniformfvARB)
#define glGetUniformivARB GLH_EXT_NAME(glGetUniformivARB)
#define glGetShaderSourceARB GLH_EXT_NAME(glGetShaderSourceARB)
#endif

#ifdef GL_ARB_vertex_shader
#define glBindAttribLocationARB GLH_EXT_NAME(glBindAttribLocationARB)
#define glGetActiveAttribARB GLH_EXT_NAME(glGetActiveAttribARB)
#define glGetAttribLocationARB GLH_EXT_NAME(glGetAttribLocationARB)
#endif

#ifdef GL_ARB_fragment_shader
#endif

#ifdef GL_ARB_shading_language_100
#endif

#ifdef GL_ARB_texture_non_power_of_two
#endif

#ifdef GL_ARB_point_sprite
#endif

#ifdef GL_ARB_fragment_program_shadow
#endif

#ifdef GL_ARB_draw_buffers
#define glDrawBuffersARB GLH_EXT_NAME(glDrawBuffersARB)
#endif

#ifdef GL_ARB_texture_rectangle
#endif

#ifdef GL_ARB_color_buffer_float
#define glClampColorARB GLH_EXT_NAME(glClampColorARB)
#endif

#ifdef GL_ARB_half_float_pixel
#endif

#ifdef GL_ARB_texture_float
#endif

#ifdef GL_ARB_pixel_buffer_object
#endif

#ifdef GL_EXT_abgr
#endif

#ifdef GL_EXT_blend_color
#define glBlendColorEXT GLH_EXT_NAME(glBlendColorEXT)
#endif

#ifdef GL_EXT_polygon_offset
#define glPolygonOffsetEXT GLH_EXT_NAME(glPolygonOffsetEXT)
#endif

#ifdef GL_EXT_texture
#endif

#ifdef GL_EXT_texture3D
#define glTexImage3DEXT GLH_EXT_NAME(glTexImage3DEXT)
#define glTexSubImage3DEXT GLH_EXT_NAME(glTexSubImage3DEXT)
#endif

#ifdef GL_SGIS_texture_filter4
#define glGetTexFilterFuncSGIS GLH_EXT_NAME(glGetTexFilterFuncSGIS)
#define glTexFilterFuncSGIS GLH_EXT_NAME(glTexFilterFuncSGIS)
#endif

#ifdef GL_EXT_subtexture
#define glTexSubImage1DEXT GLH_EXT_NAME(glTexSubImage1DEXT)
#define glTexSubImage2DEXT GLH_EXT_NAME(glTexSubImage2DEXT)
#endif

#ifdef GL_EXT_copy_texture
#define glCopyTexImage1DEXT GLH_EXT_NAME(glCopyTexImage1DEXT)
#define glCopyTexImage2DEXT GLH_EXT_NAME(glCopyTexImage2DEXT)
#define glCopyTexSubImage1DEXT GLH_EXT_NAME(glCopyTexSubImage1DEXT)
#define glCopyTexSubImage2DEXT GLH_EXT_NAME(glCopyTexSubImage2DEXT)
#define glCopyTexSubImage3DEXT GLH_EXT_NAME(glCopyTexSubImage3DEXT)
#endif

#ifdef GL_EXT_histogram
#define glGetHistogramEXT GLH_EXT_NAME(glGetHistogramEXT)
#define glGetHistogramParameterfvEXT GLH_EXT_NAME(glGetHistogramParameterfvEXT)
#define glGetHistogramParameterivEXT GLH_EXT_NAME(glGetHistogramParameterivEXT)
#define glGetMinmaxEXT GLH_EXT_NAME(glGetMinmaxEXT)
#define glGetMinmaxParameterfvEXT GLH_EXT_NAME(glGetMinmaxParameterfvEXT)
#define glGetMinmaxParameterivEXT GLH_EXT_NAME(glGetMinmaxParameterivEXT)
#define glHistogramEXT GLH_EXT_NAME(glHistogramEXT)
#define glMinmaxEXT GLH_EXT_NAME(glMinmaxEXT)
#define glResetHistogramEXT GLH_EXT_NAME(glResetHistogramEXT)
#define glResetMinmaxEXT GLH_EXT_NAME(glResetMinmaxEXT)
#endif

#ifdef GL_EXT_convolution
#define glConvolutionFilter1DEXT GLH_EXT_NAME(glConvolutionFilter1DEXT)
#define glConvolutionFilter2DEXT GLH_EXT_NAME(glConvolutionFilter2DEXT)
#define glConvolutionParameterfEXT GLH_EXT_NAME(glConvolutionParameterfEXT)
#define glConvolutionParameterfvEXT GLH_EXT_NAME(glConvolutionParameterfvEXT)
#define glConvolutionParameteriEXT GLH_EXT_NAME(glConvolutionParameteriEXT)
#define glConvolutionParameterivEXT GLH_EXT_NAME(glConvolutionParameterivEXT)
#define glCopyConvolutionFilter1DEXT GLH_EXT_NAME(glCopyConvolutionFilter1DEXT)
#define glCopyConvolutionFilter2DEXT GLH_EXT_NAME(glCopyConvolutionFilter2DEXT)
#define glGetConvolutionFilterEXT GLH_EXT_NAME(glGetConvolutionFilterEXT)
#define glGetConvolutionParameterfvEXT GLH_EXT_NAME(glGetConvolutionParameterfvEXT)
#define glGetConvolutionParameterivEXT GLH_EXT_NAME(glGetConvolutionParameterivEXT)
#define glGetSeparableFilterEXT GLH_EXT_NAME(glGetSeparableFilterEXT)
#define glSeparableFilter2DEXT GLH_EXT_NAME(glSeparableFilter2DEXT)
#endif

#ifdef GL_EXT_color_matrix
#endif

#ifdef GL_SGI_color_table
#define glColorTableSGI GLH_EXT_NAME(glColorTableSGI)
#define glColorTableParameterfvSGI GLH_EXT_NAME(glColorTableParameterfvSGI)
#define glColorTableParameterivSGI GLH_EXT_NAME(glColorTableParameterivSGI)
#define glCopyColorTableSGI GLH_EXT_NAME(glCopyColorTableSGI)
#define glGetColorTableSGI GLH_EXT_NAME(glGetColorTableSGI)
#define glGetColorTableParameterfvSGI GLH_EXT_NAME(glGetColorTableParameterfvSGI)
#define glGetColorTableParameterivSGI GLH_EXT_NAME(glGetColorTableParameterivSGI)
#endif

#ifdef GL_SGIX_pixel_texture
#define glPixelTexGenSGIX GLH_EXT_NAME(glPixelTexGenSGIX)
#endif

#ifdef GL_SGIS_pixel_texture
#define glPixelTexGenParameteriSGIS GLH_EXT_NAME(glPixelTexGenParameteriSGIS)
#define glPixelTexGenParameterivSGIS GLH_EXT_NAME(glPixelTexGenParameterivSGIS)
#define glPixelTexGenParameterfSGIS GLH_EXT_NAME(glPixelTexGenParameterfSGIS)
#define glPixelTexGenParameterfvSGIS GLH_EXT_NAME(glPixelTexGenParameterfvSGIS)
#define glGetPixelTexGenParameterivSGIS GLH_EXT_NAME(glGetPixelTexGenParameterivSGIS)
#define glGetPixelTexGenParameterfvSGIS GLH_EXT_NAME(glGetPixelTexGenParameterfvSGIS)
#endif

#ifdef GL_SGIS_texture4D
#define glTexImage4DSGIS GLH_EXT_NAME(glTexImage4DSGIS)
#define glTexSubImage4DSGIS GLH_EXT_NAME(glTexSubImage4DSGIS)
#endif

#ifdef GL_SGI_texture_color_table
#endif

#ifdef GL_EXT_cmyka
#endif

#ifdef GL_EXT_texture_object
#define glAreTexturesResidentEXT GLH_EXT_NAME(glAreTexturesResidentEXT)
#define glBindTextureEXT GLH_EXT_NAME(glBindTextureEXT)
#define glDeleteTexturesEXT GLH_EXT_NAME(glDeleteTexturesEXT)
#define glGenTexturesEXT GLH_EXT_NAME(glGenTexturesEXT)
#define glIsTextureEXT GLH_EXT_NAME(glIsTextureEXT)
#define glPrioritizeTexturesEXT GLH_EXT_NAME(glPrioritizeTexturesEXT)
#endif

#ifdef GL_SGIS_detail_texture
#define glDetailTexFuncSGIS GLH_EXT_NAME(glDetailTexFuncSGIS)
#define glGetDetailTexFuncSGIS GLH_EXT_NAME(glGetDetailTexFuncSGIS)
#endif

#ifdef GL_SGIS_sharpen_texture
#define glSharpenTexFuncSGIS GLH_EXT_NAME(glSharpenTexFuncSGIS)
#define glGetSharpenTexFuncSGIS GLH_EXT_NAME(glGetSharpenTexFuncSGIS)
#endif

#ifdef GL_EXT_packed_pixels
#endif

#ifdef GL_SGIS_texture_lod
#endif

#ifdef GL_SGIS_multisample
#define glSampleMaskSGIS GLH_EXT_NAME(glSampleMaskSGIS)
#define glSamplePatternSGIS GLH_EXT_NAME(glSamplePatternSGIS)
#endif

#ifdef GL_EXT_rescale_normal
#endif

#ifdef GL_EXT_vertex_array
#define glArrayElementEXT GLH_EXT_NAME(glArrayElementEXT)
#define glColorPointerEXT GLH_EXT_NAME(glColorPointerEXT)
#define glDrawArraysEXT GLH_EXT_NAME(glDrawArraysEXT)
#define glEdgeFlagPointerEXT GLH_EXT_NAME(glEdgeFlagPointerEXT)
#define glGetPointervEXT GLH_EXT_NAME(glGetPointervEXT)
#define glIndexPointerEXT GLH_EXT_NAME(glIndexPointerEXT)
#define glNormalPointerEXT GLH_EXT_NAME(glNormalPointerEXT)
#define glTexCoordPointerEXT GLH_EXT_NAME(glTexCoordPointerEXT)
#define glVertexPointerEXT GLH_EXT_NAME(glVertexPointerEXT)
#endif

#ifdef GL_EXT_misc_attribute
#endif

#ifdef GL_SGIS_generate_mipmap
#endif

#ifdef GL_SGIX_clipmap
#endif

#ifdef GL_SGIX_shadow
#endif

#ifdef GL_SGIS_texture_edge_clamp
#endif

#ifdef GL_SGIS_texture_border_clamp
#endif

#ifdef GL_EXT_blend_minmax
#define glBlendEquationEXT GLH_EXT_NAME(glBlendEquationEXT)
#endif

#ifdef GL_EXT_blend_subtract
#endif

#ifdef GL_EXT_blend_logic_op
#endif

#ifdef GL_SGIX_interlace
#endif

#ifdef GL_SGIX_pixel_tiles
#endif

#ifdef GL_SGIX_texture_select
#endif

#ifdef GL_SGIX_sprite
#define glSpriteParameterfSGIX GLH_EXT_NAME(glSpriteParameterfSGIX)
#define glSpriteParameterfvSGIX GLH_EXT_NAME(glSpriteParameterfvSGIX)
#define glSpriteParameteriSGIX GLH_EXT_NAME(glSpriteParameteriSGIX)
#define glSpriteParameterivSGIX GLH_EXT_NAME(glSpriteParameterivSGIX)
#endif

#ifdef GL_SGIX_texture_multi_buffer
#endif

#ifdef GL_EXT_point_parameters
#define glPointParameterfEXT GLH_EXT_NAME(glPointParameterfEXT)
#define glPointParameterfvEXT GLH_EXT_NAME(glPointParameterfvEXT)
#endif

#ifdef GL_SGIS_point_parameters
#define glPointParameterfSGIS GLH_EXT_NAME(glPointParameterfSGIS)
#define glPointParameterfvSGIS GLH_EXT_NAME(glPointParameterfvSGIS)
#endif

#ifdef GL_SGIX_instruments
#define glGetInstrumentsSGIX GLH_EXT_NAME(glGetInstrumentsSGIX)
#define glInstrumentsBufferSGIX GLH_EXT_NAME(glInstrumentsBufferSGIX)
#define glPollInstrumentsSGIX GLH_EXT_NAME(glPollInstrumentsSGIX)
#define glReadInstrumentsSGIX GLH_EXT_NAME(glReadInstrumentsSGIX)
#define glStartInstrumentsSGIX GLH_EXT_NAME(glStartInstrumentsSGIX)
#define glStopInstrumentsSGIX GLH_EXT_NAME(glStopInstrumentsSGIX)
#endif

#ifdef GL_SGIX_texture_scale_bias
#endif

#ifdef GL_SGIX_framezoom
#define glFrameZoomSGIX GLH_EXT_NAME(glFrameZoomSGIX)
#endif

#ifdef GL_SGIX_tag_sample_buffer
#define glTagSampleBufferSGIX GLH_EXT_NAME(glTagSampleBufferSGIX)
#endif

#ifdef GL_SGIX_polynomial_ffd
#define glDeformationMap3dSGIX GLH_EXT_NAME(glDeformationMap3dSGIX)
#define glDeformationMap3fSGIX GLH_EXT_NAME(glDeformationMap3fSGIX)
#define glDeformSGIX GLH_EXT_NAME(glDeformSGIX)
#define glLoadIdentityDeformationMapSGIX GLH_EXT_NAME(glLoadIdentityDeformationMapSGIX)
#endif

#ifdef GL_SGIX_reference_plane
#define glReferencePlaneSGIX GLH_EXT_NAME(glReferencePlaneSGIX)
#endif

#ifdef GL_SGIX_flush_raster
#define glFlushRasterSGIX GLH_EXT_NAME(glFlushRasterSGIX)
#endif

#ifdef GL_SGIX_depth_texture
#endif

#ifdef GL_SGIS_fog_function
#define glFogFuncSGIS GLH_EXT_NAME(glFogFuncSGIS)
#define glGetFogFuncSGIS GLH_EXT_NAME(glGetFogFuncSGIS)
#endif

#ifdef GL_SGIX_fog_offset
#endif

#ifdef GL_HP_image_transform
#define glImageTransformParameteriHP GLH_EXT_NAME(glImageTransformParameteriHP)
#define glImageTransformParameterfHP GLH_EXT_NAME(glImageTransformParameterfHP)
#define glImageTransformParameterivHP GLH_EXT_NAME(glImageTransformParameterivHP)
#define glImageTransformParameterfvHP GLH_EXT_NAME(glImageTransformParameterfvHP)
#define glGetImageTransformParameterivHP GLH_EXT_NAME(glGetImageTransformParameterivHP)
#define glGetImageTransformParameterfvHP GLH_EXT_NAME(glGetImageTransformParameterfvHP)
#endif

#ifdef GL_HP_convolution_border_modes
#endif

#ifdef GL_SGIX_texture_add_env
#endif

#ifdef GL_EXT_color_subtable
#define glColorSubTableEXT GLH_EXT_NAME(glColorSubTableEXT)
#define glCopyColorSubTableEXT GLH_EXT_NAME(glCopyColorSubTableEXT)
#endif

#ifdef GL_PGI_vertex_hints
#endif

#ifdef GL_PGI_misc_hints
#define glHintPGI GLH_EXT_NAME(glHintPGI)
#endif

#ifdef GL_EXT_paletted_texture
#define glColorTableEXT GLH_EXT_NAME(glColorTableEXT)
#define glGetColorTableEXT GLH_EXT_NAME(glGetColorTableEXT)
#define glGetColorTableParameterivEXT GLH_EXT_NAME(glGetColorTableParameterivEXT)
#define glGetColorTableParameterfvEXT GLH_EXT_NAME(glGetColorTableParameterfvEXT)
#endif

#ifdef GL_EXT_clip_volume_hint
#endif

#ifdef GL_SGIX_list_priority
#define glGetListParameterfvSGIX GLH_EXT_NAME(glGetListParameterfvSGIX)
#define glGetListParameterivSGIX GLH_EXT_NAME(glGetListParameterivSGIX)
#define glListParameterfSGIX GLH_EXT_NAME(glListParameterfSGIX)
#define glListParameterfvSGIX GLH_EXT_NAME(glListParameterfvSGIX)
#define glListParameteriSGIX GLH_EXT_NAME(glListParameteriSGIX)
#define glListParameterivSGIX GLH_EXT_NAME(glListParameterivSGIX)
#endif

#ifdef GL_SGIX_ir_instrument1
#endif

#ifdef GL_SGIX_calligraphic_fragment
#endif

#ifdef GL_SGIX_texture_lod_bias
#endif

#ifdef GL_SGIX_shadow_ambient
#endif

#ifdef GL_EXT_index_texture
#endif

#ifdef GL_EXT_index_material
#define glIndexMaterialEXT GLH_EXT_NAME(glIndexMaterialEXT)
#endif

#ifdef GL_EXT_index_func
#define glIndexFuncEXT GLH_EXT_NAME(glIndexFuncEXT)
#endif

#ifdef GL_EXT_index_array_formats
#endif

#ifdef GL_EXT_compiled_vertex_array
#define glLockArraysEXT GLH_EXT_NAME(glLockArraysEXT)
#define glUnlockArraysEXT GLH_EXT_NAME(glUnlockArraysEXT)
#endif

#ifdef GL_EXT_cull_vertex
#define glCullParameterdvEXT GLH_EXT_NAME(glCullParameterdvEXT)
#define glCullParameterfvEXT GLH_EXT_NAME(glCullParameterfvEXT)
#endif

#ifdef GL_SGIX_ycrcb
#endif

#ifdef GL_SGIX_fragment_lighting
#define glFragmentColorMaterialSGIX GLH_EXT_NAME(glFragmentColorMaterialSGIX)
#define glFragmentLightfSGIX GLH_EXT_NAME(glFragmentLightfSGIX)
#define glFragmentLightfvSGIX GLH_EXT_NAME(glFragmentLightfvSGIX)
#define glFragmentLightiSGIX GLH_EXT_NAME(glFragmentLightiSGIX)
#define glFragmentLightivSGIX GLH_EXT_NAME(glFragmentLightivSGIX)
#define glFragmentLightModelfSGIX GLH_EXT_NAME(glFragmentLightModelfSGIX)
#define glFragmentLightModelfvSGIX GLH_EXT_NAME(glFragmentLightModelfvSGIX)
#define glFragmentLightModeliSGIX GLH_EXT_NAME(glFragmentLightModeliSGIX)
#define glFragmentLightModelivSGIX GLH_EXT_NAME(glFragmentLightModelivSGIX)
#define glFragmentMaterialfSGIX GLH_EXT_NAME(glFragmentMaterialfSGIX)
#define glFragmentMaterialfvSGIX GLH_EXT_NAME(glFragmentMaterialfvSGIX)
#define glFragmentMaterialiSGIX GLH_EXT_NAME(glFragmentMaterialiSGIX)
#define glFragmentMaterialivSGIX GLH_EXT_NAME(glFragmentMaterialivSGIX)
#define glGetFragmentLightfvSGIX GLH_EXT_NAME(glGetFragmentLightfvSGIX)
#define glGetFragmentLightivSGIX GLH_EXT_NAME(glGetFragmentLightivSGIX)
#define glGetFragmentMaterialfvSGIX GLH_EXT_NAME(glGetFragmentMaterialfvSGIX)
#define glGetFragmentMaterialivSGIX GLH_EXT_NAME(glGetFragmentMaterialivSGIX)
#define glLightEnviSGIX GLH_EXT_NAME(glLightEnviSGIX)
#endif

#ifdef GL_IBM_rasterpos_clip
#endif

#ifdef GL_HP_texture_lighting
#endif

#ifdef GL_EXT_draw_range_elements
#define glDrawRangeElementsEXT GLH_EXT_NAME(glDrawRangeElementsEXT)
#endif

#ifdef GL_WIN_phong_shading
#endif

#ifdef GL_WIN_specular_fog
#endif

#ifdef GL_EXT_light_texture
#define glApplyTextureEXT GLH_EXT_NAME(glApplyTextureEXT)
#define glTextureLightEXT GLH_EXT_NAME(glTextureLightEXT)
#define glTextureMaterialEXT GLH_EXT_NAME(glTextureMaterialEXT)
#endif

#ifdef GL_SGIX_blend_alpha_minmax
#endif

#ifdef GL_EXT_bgra
#endif

#ifdef GL_SGIX_async
#define glAsyncMarkerSGIX GLH_EXT_NAME(glAsyncMarkerSGIX)
#define glFinishAsyncSGIX GLH_EXT_NAME(glFinishAsyncSGIX)
#define glPollAsyncSGIX GLH_EXT_NAME(glPollAsyncSGIX)
#define glGenAsyncMarkersSGIX GLH_EXT_NAME(glGenAsyncMarkersSGIX)
#define glDeleteAsyncMarkersSGIX GLH_EXT_NAME(glDeleteAsyncMarkersSGIX)
#define glIsAsyncMarkerSGIX GLH_EXT_NAME(glIsAsyncMarkerSGIX)
#endif

#ifdef GL_SGIX_async_pixel
#endif

#ifdef GL_SGIX_async_histogram
#endif

#ifdef GL_INTEL_parallel_arrays
#define glVertexPointervINTEL GLH_EXT_NAME(glVertexPointervINTEL)
#define glNormalPointervINTEL GLH_EXT_NAME(glNormalPointervINTEL)
#define glColorPointervINTEL GLH_EXT_NAME(glColorPointervINTEL)
#define glTexCoordPointervINTEL GLH_EXT_NAME(glTexCoordPointervINTEL)
#endif

#ifdef GL_HP_occlusion_test
#endif

#ifdef GL_EXT_pixel_transform
#define glPixelTransformParameteriEXT GLH_EXT_NAME(glPixelTransformParameteriEXT)
#define glPixelTransformParameterfEXT GLH_EXT_NAME(glPixelTransformParameterfEXT)
#define glPixelTransformParameterivEXT GLH_EXT_NAME(glPixelTransformParameterivEXT)
#define glPixelTransformParameterfvEXT GLH_EXT_NAME(glPixelTransformParameterfvEXT)
#endif

#ifdef GL_EXT_pixel_transform_color_table
#endif

#ifdef GL_EXT_shared_texture_palette
#endif

#ifdef GL_EXT_separate_specular_color
#endif

#ifdef GL_EXT_secondary_color
#define glSecondaryColor3bEXT GLH_EXT_NAME(glSecondaryColor3bEXT)
#define glSecondaryColor3bvEXT GLH_EXT_NAME(glSecondaryColor3bvEXT)
#define glSecondaryColor3dEXT GLH_EXT_NAME(glSecondaryColor3dEXT)
#define glSecondaryColor3dvEXT GLH_EXT_NAME(glSecondaryColor3dvEXT)
#define glSecondaryColor3fEXT GLH_EXT_NAME(glSecondaryColor3fEXT)
#define glSecondaryColor3fvEXT GLH_EXT_NAME(glSecondaryColor3fvEXT)
#define glSecondaryColor3iEXT GLH_EXT_NAME(glSecondaryColor3iEXT)
#define glSecondaryColor3ivEXT GLH_EXT_NAME(glSecondaryColor3ivEXT)
#define glSecondaryColor3sEXT GLH_EXT_NAME(glSecondaryColor3sEXT)
#define glSecondaryColor3svEXT GLH_EXT_NAME(glSecondaryColor3svEXT)
#define glSecondaryColor3ubEXT GLH_EXT_NAME(glSecondaryColor3ubEXT)
#define glSecondaryColor3ubvEXT GLH_EXT_NAME(glSecondaryColor3ubvEXT)
#define glSecondaryColor3uiEXT GLH_EXT_NAME(glSecondaryColor3uiEXT)
#define glSecondaryColor3uivEXT GLH_EXT_NAME(glSecondaryColor3uivEXT)
#define glSecondaryColor3usEXT GLH_EXT_NAME(glSecondaryColor3usEXT)
#define glSecondaryColor3usvEXT GLH_EXT_NAME(glSecondaryColor3usvEXT)
#define glSecondaryColorPointerEXT GLH_EXT_NAME(glSecondaryColorPointerEXT)
#endif

#ifdef GL_EXT_texture_perturb_normal
#define glTextureNormalEXT GLH_EXT_NAME(glTextureNormalEXT)
#endif

#ifdef GL_EXT_multi_draw_arrays
#define glMultiDrawArraysEXT GLH_EXT_NAME(glMultiDrawArraysEXT)
#define glMultiDrawElementsEXT GLH_EXT_NAME(glMultiDrawElementsEXT)
#endif

#ifdef GL_EXT_fog_coord
#define glFogCoordfEXT GLH_EXT_NAME(glFogCoordfEXT)
#define glFogCoordfvEXT GLH_EXT_NAME(glFogCoordfvEXT)
#define glFogCoorddEXT GLH_EXT_NAME(glFogCoorddEXT)
#define glFogCoorddvEXT GLH_EXT_NAME(glFogCoorddvEXT)
#define glFogCoordPointerEXT GLH_EXT_NAME(glFogCoordPointerEXT)
#endif

#ifdef GL_REND_screen_coordinates
#endif

#ifdef GL_EXT_coordinate_frame
#define glTangent3bEXT GLH_EXT_NAME(glTangent3bEXT)
#define glTangent3bvEXT GLH_EXT_NAME(glTangent3bvEXT)
#define glTangent3dEXT GLH_EXT_NAME(glTangent3dEXT)
#define glTangent3dvEXT GLH_EXT_NAME(glTangent3dvEXT)
#define glTangent3fEXT GLH_EXT_NAME(glTangent3fEXT)
#define glTangent3fvEXT GLH_EXT_NAME(glTangent3fvEXT)
#define glTangent3iEXT GLH_EXT_NAME(glTangent3iEXT)
#define glTangent3ivEXT GLH_EXT_NAME(glTangent3ivEXT)
#define glTangent3sEXT GLH_EXT_NAME(glTangent3sEXT)
#define glTangent3svEXT GLH_EXT_NAME(glTangent3svEXT)
#define glBinormal3bEXT GLH_EXT_NAME(glBinormal3bEXT)
#define glBinormal3bvEXT GLH_EXT_NAME(glBinormal3bvEXT)
#define glBinormal3dEXT GLH_EXT_NAME(glBinormal3dEXT)
#define glBinormal3dvEXT GLH_EXT_NAME(glBinormal3dvEXT)
#define glBinormal3fEXT GLH_EXT_NAME(glBinormal3fEXT)
#define glBinormal3fvEXT GLH_EXT_NAME(glBinormal3fvEXT)
#define glBinormal3iEXT GLH_EXT_NAME(glBinormal3iEXT)
#define glBinormal3ivEXT GLH_EXT_NAME(glBinormal3ivEXT)
#define glBinormal3sEXT GLH_EXT_NAME(glBinormal3sEXT)
#define glBinormal3svEXT GLH_EXT_NAME(glBinormal3svEXT)
#define glTangentPointerEXT GLH_EXT_NAME(glTangentPointerEXT)
#define glBinormalPointerEXT GLH_EXT_NAME(glBinormalPointerEXT)
#endif

#ifdef GL_EXT_texture_env_combine
#endif

#ifdef GL_APPLE_specular_vector
#endif

#ifdef GL_APPLE_transform_hint
#endif

#ifdef GL_SGIX_fog_scale
#endif

#ifdef GL_SUNX_constant_data
#define glFinishTextureSUNX GLH_EXT_NAME(glFinishTextureSUNX)
#endif

#ifdef GL_SUN_global_alpha
#define glGlobalAlphaFactorbSUN GLH_EXT_NAME(glGlobalAlphaFactorbSUN)
#define glGlobalAlphaFactorsSUN GLH_EXT_NAME(glGlobalAlphaFactorsSUN)
#define glGlobalAlphaFactoriSUN GLH_EXT_NAME(glGlobalAlphaFactoriSUN)
#define glGlobalAlphaFactorfSUN GLH_EXT_NAME(glGlobalAlphaFactorfSUN)
#define glGlobalAlphaFactordSUN GLH_EXT_NAME(glGlobalAlphaFactordSUN)
#define glGlobalAlphaFactorubSUN GLH_EXT_NAME(glGlobalAlphaFactorubSUN)
#define glGlobalAlphaFactorusSUN GLH_EXT_NAME(glGlobalAlphaFactorusSUN)
#define glGlobalAlphaFactoruiSUN GLH_EXT_NAME(glGlobalAlphaFactoruiSUN)
#endif

#ifdef GL_SUN_triangle_list
#define glReplacementCodeuiSUN GLH_EXT_NAME(glReplacementCodeuiSUN)
#define glReplacementCodeusSUN GLH_EXT_NAME(glReplacementCodeusSUN)
#define glReplacementCodeubSUN GLH_EXT_NAME(glReplacementCodeubSUN)
#define glReplacementCodeuivSUN GLH_EXT_NAME(glReplacementCodeuivSUN)
#define glReplacementCodeusvSUN GLH_EXT_NAME(glReplacementCodeusvSUN)
#define glReplacementCodeubvSUN GLH_EXT_NAME(glReplacementCodeubvSUN)
#define glReplacementCodePointerSUN GLH_EXT_NAME(glReplacementCodePointerSUN)
#endif

#ifdef GL_SUN_vertex
#define glColor4ubVertex2fSUN GLH_EXT_NAME(glColor4ubVertex2fSUN)
#define glColor4ubVertex2fvSUN GLH_EXT_NAME(glColor4ubVertex2fvSUN)
#define glColor4ubVertex3fSUN GLH_EXT_NAME(glColor4ubVertex3fSUN)
#define glColor4ubVertex3fvSUN GLH_EXT_NAME(glColor4ubVertex3fvSUN)
#define glColor3fVertex3fSUN GLH_EXT_NAME(glColor3fVertex3fSUN)
#define glColor3fVertex3fvSUN GLH_EXT_NAME(glColor3fVertex3fvSUN)
#define glNormal3fVertex3fSUN GLH_EXT_NAME(glNormal3fVertex3fSUN)
#define glNormal3fVertex3fvSUN GLH_EXT_NAME(glNormal3fVertex3fvSUN)
#define glColor4fNormal3fVertex3fSUN GLH_EXT_NAME(glColor4fNormal3fVertex3fSUN)
#define glColor4fNormal3fVertex3fvSUN GLH_EXT_NAME(glColor4fNormal3fVertex3fvSUN)
#define glTexCoord2fVertex3fSUN GLH_EXT_NAME(glTexCoord2fVertex3fSUN)
#define glTexCoord2fVertex3fvSUN GLH_EXT_NAME(glTexCoord2fVertex3fvSUN)
#define glTexCoord4fVertex4fSUN GLH_EXT_NAME(glTexCoord4fVertex4fSUN)
#define glTexCoord4fVertex4fvSUN GLH_EXT_NAME(glTexCoord4fVertex4fvSUN)
#define glTexCoord2fColor4ubVertex3fSUN GLH_EXT_NAME(glTexCoord2fColor4ubVertex3fSUN)
#define glTexCoord2fColor4ubVertex3fvSUN GLH_EXT_NAME(glTexCoord2fColor4ubVertex3fvSUN)
#define glTexCoord2fColor3fVertex3fSUN GLH_EXT_NAME(glTexCoord2fColor3fVertex3fSUN)
#define glTexCoord2fColor3fVertex3fvSUN GLH_EXT_NAME(glTexCoord2fColor3fVertex3fvSUN)
#define glTexCoord2fNormal3fVertex3fSUN GLH_EXT_NAME(glTexCoord2fNormal3fVertex3fSUN)
#define glTexCoord2fNormal3fVertex3fvSUN GLH_EXT_NAME(glTexCoord2fNormal3fVertex3fvSUN)
#define glTexCoord2fColor4fNormal3fVertex3fSUN GLH_EXT_NAME(glTexCoord2fColor4fNormal3fVertex3fSUN)
#define glTexCoord2fColor4fNormal3fVertex3fvSUN GLH_EXT_NAME(glTexCoord2fColor4fNormal3fVertex3fvSUN)
#define glTexCoord4fColor4fNormal3fVertex4fSUN GLH_EXT_NAME(glTexCoord4fColor4fNormal3fVertex4fSUN)
#define glTexCoord4fColor4fNormal3fVertex4fvSUN GLH_EXT_NAME(glTexCoord4fColor4fNormal3fVertex4fvSUN)
#define glReplacementCodeuiVertex3fSUN GLH_EXT_NAME(glReplacementCodeuiVertex3fSUN)
#define glReplacementCodeuiVertex3fvSUN GLH_EXT_NAME(glReplacementCodeuiVertex3fvSUN)
#define glReplacementCodeuiColor4ubVertex3fSUN GLH_EXT_NAME(glReplacementCodeuiColor4ubVertex3fSUN)
#define glReplacementCodeuiColor4ubVertex3fvSUN GLH_EXT_NAME(glReplacementCodeuiColor4ubVertex3fvSUN)
#define glReplacementCodeuiColor3fVertex3fSUN GLH_EXT_NAME(glReplacementCodeuiColor3fVertex3fSUN)
#define glReplacementCodeuiColor3fVertex3fvSUN GLH_EXT_NAME(glReplacementCodeuiColor3fVertex3fvSUN)
#define glReplacementCodeuiNormal3fVertex3fSUN GLH_EXT_NAME(glReplacementCodeuiNormal3fVertex3fSUN)
#define glReplacementCodeuiNormal3fVertex3fvSUN GLH_EXT_NAME(glReplacementCodeuiNormal3fVertex3fvSUN)
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN GLH_EXT_NAME(glReplacementCodeuiColor4fNormal3fVertex3fSUN)
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN GLH_EXT_NAME(glReplacementCodeuiColor4fNormal3fVertex3fvSUN)
#define glReplacementCodeuiTexCoord2fVertex3fSUN GLH_EXT_NAME(glReplacementCodeuiTexCoord2fVertex3fSUN)
#define glReplacementCodeuiTexCoord2fVertex3fvSUN GLH_EXT_NAME(glReplacementCodeuiTexCoord2fVertex3fvSUN)
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN GLH_EXT_NAME(glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN GLH_EXT_NAME(glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN GLH_EXT_NAME(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN GLH_EXT_NAME(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)
#endif

#ifdef GL_EXT_blend_func_separate
#define glBlendFuncSeparateEXT GLH_EXT_NAME(glBlendFuncSeparateEXT)
#endif

#ifdef GL_INGR_blend_func_separate
#define glBlendFuncSeparateINGR GLH_EXT_NAME(glBlendFuncSeparateINGR)
#endif

#ifdef GL_INGR_color_clamp
#endif

#ifdef GL_INGR_interlace_read
#endif

#ifdef GL_EXT_stencil_wrap
#endif

#ifdef GL_EXT_422_pixels
#endif

#ifdef GL_NV_texgen_reflection
#endif

#ifdef GL_SUN_convolution_border_modes
#endif

#ifdef GL_EXT_texture_env_add
#endif

#ifdef GL_EXT_texture_lod_bias
#endif

#ifdef GL_EXT_texture_filter_anisotropic
#endif

#ifdef GL_EXT_vertex_weighting
#define glVertexWeightfEXT GLH_EXT_NAME(glVertexWeightfEXT)
#define glVertexWeightfvEXT GLH_EXT_NAME(glVertexWeightfvEXT)
#define glVertexWeightPointerEXT GLH_EXT_NAME(glVertexWeightPointerEXT)
#endif

#ifdef GL_NV_light_max_exponent
#endif

#ifdef GL_NV_vertex_array_range
#define glFlushVertexArrayRangeNV GLH_EXT_NAME(glFlushVertexArrayRangeNV)
#define glVertexArrayRangeNV GLH_EXT_NAME(glVertexArrayRangeNV)
#endif

#ifdef GL_NV_register_combiners
#define glCombinerParameterfvNV GLH_EXT_NAME(glCombinerParameterfvNV)
#define glCombinerParameterfNV GLH_EXT_NAME(glCombinerParameterfNV)
#define glCombinerParameterivNV GLH_EXT_NAME(glCombinerParameterivNV)
#define glCombinerParameteriNV GLH_EXT_NAME(glCombinerParameteriNV)
#define glCombinerInputNV GLH_EXT_NAME(glCombinerInputNV)
#define glCombinerOutputNV GLH_EXT_NAME(glCombinerOutputNV)
#define glFinalCombinerInputNV GLH_EXT_NAME(glFinalCombinerInputNV)
#define glGetCombinerInputParameterfvNV GLH_EXT_NAME(glGetCombinerInputParameterfvNV)
#define glGetCombinerInputParameterivNV GLH_EXT_NAME(glGetCombinerInputParameterivNV)
#define glGetCombinerOutputParameterfvNV GLH_EXT_NAME(glGetCombinerOutputParameterfvNV)
#define glGetCombinerOutputParameterivNV GLH_EXT_NAME(glGetCombinerOutputParameterivNV)
#define glGetFinalCombinerInputParameterfvNV GLH_EXT_NAME(glGetFinalCombinerInputParameterfvNV)
#define glGetFinalCombinerInputParameterivNV GLH_EXT_NAME(glGetFinalCombinerInputParameterivNV)
#endif

#ifdef GL_NV_fog_distance
#endif

#ifdef GL_NV_texgen_emboss
#endif

#ifdef GL_NV_blend_square
#endif

#ifdef GL_NV_texture_env_combine4
#endif

#ifdef GL_MESA_resize_buffers
#define glResizeBuffersMESA GLH_EXT_NAME(glResizeBuffersMESA)
#endif

#ifdef GL_MESA_window_pos
#define glWindowPos2dMESA GLH_EXT_NAME(glWindowPos2dMESA)
#define glWindowPos2dvMESA GLH_EXT_NAME(glWindowPos2dvMESA)
#define glWindowPos2fMESA GLH_EXT_NAME(glWindowPos2fMESA)
#define glWindowPos2fvMESA GLH_EXT_NAME(glWindowPos2fvMESA)
#define glWindowPos2iMESA GLH_EXT_NAME(glWindowPos2iMESA)
#define glWindowPos2ivMESA GLH_EXT_NAME(glWindowPos2ivMESA)
#define glWindowPos2sMESA GLH_EXT_NAME(glWindowPos2sMESA)
#define glWindowPos2svMESA GLH_EXT_NAME(glWindowPos2svMESA)
#define glWindowPos3dMESA GLH_EXT_NAME(glWindowPos3dMESA)
#define glWindowPos3dvMESA GLH_EXT_NAME(glWindowPos3dvMESA)
#define glWindowPos3fMESA GLH_EXT_NAME(glWindowPos3fMESA)
#define glWindowPos3fvMESA GLH_EXT_NAME(glWindowPos3fvMESA)
#define glWindowPos3iMESA GLH_EXT_NAME(glWindowPos3iMESA)
#define glWindowPos3ivMESA GLH_EXT_NAME(glWindowPos3ivMESA)
#define glWindowPos3sMESA GLH_EXT_NAME(glWindowPos3sMESA)
#define glWindowPos3svMESA GLH_EXT_NAME(glWindowPos3svMESA)
#define glWindowPos4dMESA GLH_EXT_NAME(glWindowPos4dMESA)
#define glWindowPos4dvMESA GLH_EXT_NAME(glWindowPos4dvMESA)
#define glWindowPos4fMESA GLH_EXT_NAME(glWindowPos4fMESA)
#define glWindowPos4fvMESA GLH_EXT_NAME(glWindowPos4fvMESA)
#define glWindowPos4iMESA GLH_EXT_NAME(glWindowPos4iMESA)
#define glWindowPos4ivMESA GLH_EXT_NAME(glWindowPos4ivMESA)
#define glWindowPos4sMESA GLH_EXT_NAME(glWindowPos4sMESA)
#define glWindowPos4svMESA GLH_EXT_NAME(glWindowPos4svMESA)
#endif

#ifdef GL_EXT_texture_compression_s3tc
#endif

#ifdef GL_IBM_cull_vertex
#endif

#ifdef GL_IBM_multimode_draw_arrays
#define glMultiModeDrawArraysIBM GLH_EXT_NAME(glMultiModeDrawArraysIBM)
#define glMultiModeDrawElementsIBM GLH_EXT_NAME(glMultiModeDrawElementsIBM)
#endif

#ifdef GL_IBM_vertex_array_lists
#define glColorPointerListIBM GLH_EXT_NAME(glColorPointerListIBM)
#define glSecondaryColorPointerListIBM GLH_EXT_NAME(glSecondaryColorPointerListIBM)
#define glEdgeFlagPointerListIBM GLH_EXT_NAME(glEdgeFlagPointerListIBM)
#define glFogCoordPointerListIBM GLH_EXT_NAME(glFogCoordPointerListIBM)
#define glIndexPointerListIBM GLH_EXT_NAME(glIndexPointerListIBM)
#define glNormalPointerListIBM GLH_EXT_NAME(glNormalPointerListIBM)
#define glTexCoordPointerListIBM GLH_EXT_NAME(glTexCoordPointerListIBM)
#define glVertexPointerListIBM GLH_EXT_NAME(glVertexPointerListIBM)
#endif

#ifdef GL_SGIX_subsample
#endif

#ifdef GL_SGIX_ycrcba
#endif

#ifdef GL_SGIX_ycrcb_subsample
#endif

#ifdef GL_SGIX_depth_pass_instrument
#endif

#ifdef GL_3DFX_texture_compression_FXT1
#endif

#ifdef GL_3DFX_multisample
#endif

#ifdef GL_3DFX_tbuffer
#define glTbufferMask3DFX GLH_EXT_NAME(glTbufferMask3DFX)
#endif

#ifdef GL_EXT_multisample
#define glSampleMaskEXT GLH_EXT_NAME(glSampleMaskEXT)
#define glSamplePatternEXT GLH_EXT_NAME(glSamplePatternEXT)
#endif

#ifdef GL_SGIX_vertex_preclip
#endif

#ifdef GL_SGIX_convolution_accuracy
#endif

#ifdef GL_SGIX_resample
#endif

#ifdef GL_SGIS_point_line_texgen
#endif

#ifdef GL_SGIS_texture_color_mask
#define glTextureColorMaskSGIS GLH_EXT_NAME(glTextureColorMaskSGIS)
#endif

#ifdef GL_SGIX_igloo_interface
#define glIglooInterfaceSGIX GLH_EXT_NAME(glIglooInterfaceSGIX)
#endif

#ifdef GL_EXT_texture_env_dot3
#endif

#ifdef GL_ATI_texture_mirror_once
#endif

#ifdef GL_NV_fence
#define glDeleteFencesNV GLH_EXT_NAME(glDeleteFencesNV)
#define glGenFencesNV GLH_EXT_NAME(glGenFencesNV)
#define glIsFenceNV GLH_EXT_NAME(glIsFenceNV)
#define glTestFenceNV GLH_EXT_NAME(glTestFenceNV)
#define glGetFenceivNV GLH_EXT_NAME(glGetFenceivNV)
#define glFinishFenceNV GLH_EXT_NAME(glFinishFenceNV)
#define glSetFenceNV GLH_EXT_NAME(glSetFenceNV)
#endif

#ifdef GL_NV_evaluators
#define glMapControlPointsNV GLH_EXT_NAME(glMapControlPointsNV)
#define glMapParameterivNV GLH_EXT_NAME(glMapParameterivNV)
#define glMapParameterfvNV GLH_EXT_NAME(glMapParameterfvNV)
#define glGetMapControlPointsNV GLH_EXT_NAME(glGetMapControlPointsNV)
#define glGetMapParameterivNV GLH_EXT_NAME(glGetMapParameterivNV)
#define glGetMapParameterfvNV GLH_EXT_NAME(glGetMapParameterfvNV)
#define glGetMapAttribParameterivNV GLH_EXT_NAME(glGetMapAttribParameterivNV)
#define glGetMapAttribParameterfvNV GLH_EXT_NAME(glGetMapAttribParameterfvNV)
#define glEvalMapsNV GLH_EXT_NAME(glEvalMapsNV)
#endif

#ifdef GL_NV_packed_depth_stencil
#endif

#ifdef GL_NV_register_combiners2
#define glCombinerStageParameterfvNV GLH_EXT_NAME(glCombinerStageParameterfvNV)
#define glGetCombinerStageParameterfvNV GLH_EXT_NAME(glGetCombinerStageParameterfvNV)
#endif

#ifdef GL_NV_texture_compression_vtc
#endif

#ifdef GL_NV_texture_rectangle
#endif

#ifdef GL_NV_texture_shader
#endif

#ifdef GL_NV_texture_shader2
#endif

#ifdef GL_NV_vertex_array_range2
#endif

#ifdef GL_NV_vertex_program
#define glAreProgramsResidentNV GLH_EXT_NAME(glAreProgramsResidentNV)
#define glBindProgramNV GLH_EXT_NAME(glBindProgramNV)
#define glDeleteProgramsNV GLH_EXT_NAME(glDeleteProgramsNV)
#define glExecuteProgramNV GLH_EXT_NAME(glExecuteProgramNV)
#define glGenProgramsNV GLH_EXT_NAME(glGenProgramsNV)
#define glGetProgramParameterdvNV GLH_EXT_NAME(glGetProgramParameterdvNV)
#define glGetProgramParameterfvNV GLH_EXT_NAME(glGetProgramParameterfvNV)
#define glGetProgramivNV GLH_EXT_NAME(glGetProgramivNV)
#define glGetProgramStringNV GLH_EXT_NAME(glGetProgramStringNV)
#define glGetTrackMatrixivNV GLH_EXT_NAME(glGetTrackMatrixivNV)
#define glGetVertexAttribdvNV GLH_EXT_NAME(glGetVertexAttribdvNV)
#define glGetVertexAttribfvNV GLH_EXT_NAME(glGetVertexAttribfvNV)
#define glGetVertexAttribivNV GLH_EXT_NAME(glGetVertexAttribivNV)
#define glGetVertexAttribPointervNV GLH_EXT_NAME(glGetVertexAttribPointervNV)
#define glIsProgramNV GLH_EXT_NAME(glIsProgramNV)
#define glLoadProgramNV GLH_EXT_NAME(glLoadProgramNV)
#define glProgramParameter4dNV GLH_EXT_NAME(glProgramParameter4dNV)
#define glProgramParameter4dvNV GLH_EXT_NAME(glProgramParameter4dvNV)
#define glProgramParameter4fNV GLH_EXT_NAME(glProgramParameter4fNV)
#define glProgramParameter4fvNV GLH_EXT_NAME(glProgramParameter4fvNV)
#define glProgramParameters4dvNV GLH_EXT_NAME(glProgramParameters4dvNV)
#define glProgramParameters4fvNV GLH_EXT_NAME(glProgramParameters4fvNV)
#define glRequestResidentProgramsNV GLH_EXT_NAME(glRequestResidentProgramsNV)
#define glTrackMatrixNV GLH_EXT_NAME(glTrackMatrixNV)
#define glVertexAttribPointerNV GLH_EXT_NAME(glVertexAttribPointerNV)
#define glVertexAttrib1dNV GLH_EXT_NAME(glVertexAttrib1dNV)
#define glVertexAttrib1dvNV GLH_EXT_NAME(glVertexAttrib1dvNV)
#define glVertexAttrib1fNV GLH_EXT_NAME(glVertexAttrib1fNV)
#define glVertexAttrib1fvNV GLH_EXT_NAME(glVertexAttrib1fvNV)
#define glVertexAttrib1sNV GLH_EXT_NAME(glVertexAttrib1sNV)
#define glVertexAttrib1svNV GLH_EXT_NAME(glVertexAttrib1svNV)
#define glVertexAttrib2dNV GLH_EXT_NAME(glVertexAttrib2dNV)
#define glVertexAttrib2dvNV GLH_EXT_NAME(glVertexAttrib2dvNV)
#define glVertexAttrib2fNV GLH_EXT_NAME(glVertexAttrib2fNV)
#define glVertexAttrib2fvNV GLH_EXT_NAME(glVertexAttrib2fvNV)
#define glVertexAttrib2sNV GLH_EXT_NAME(glVertexAttrib2sNV)
#define glVertexAttrib2svNV GLH_EXT_NAME(glVertexAttrib2svNV)
#define glVertexAttrib3dNV GLH_EXT_NAME(glVertexAttrib3dNV)
#define glVertexAttrib3dvNV GLH_EXT_NAME(glVertexAttrib3dvNV)
#define glVertexAttrib3fNV GLH_EXT_NAME(glVertexAttrib3fNV)
#define glVertexAttrib3fvNV GLH_EXT_NAME(glVertexAttrib3fvNV)
#define glVertexAttrib3sNV GLH_EXT_NAME(glVertexAttrib3sNV)
#define glVertexAttrib3svNV GLH_EXT_NAME(glVertexAttrib3svNV)
#define glVertexAttrib4dNV GLH_EXT_NAME(glVertexAttrib4dNV)
#define glVertexAttrib4dvNV GLH_EXT_NAME(glVertexAttrib4dvNV)
#define glVertexAttrib4fNV GLH_EXT_NAME(glVertexAttrib4fNV)
#define glVertexAttrib4fvNV GLH_EXT_NAME(glVertexAttrib4fvNV)
#define glVertexAttrib4sNV GLH_EXT_NAME(glVertexAttrib4sNV)
#define glVertexAttrib4svNV GLH_EXT_NAME(glVertexAttrib4svNV)
#define glVertexAttrib4ubNV GLH_EXT_NAME(glVertexAttrib4ubNV)
#define glVertexAttrib4ubvNV GLH_EXT_NAME(glVertexAttrib4ubvNV)
#define glVertexAttribs1dvNV GLH_EXT_NAME(glVertexAttribs1dvNV)
#define glVertexAttribs1fvNV GLH_EXT_NAME(glVertexAttribs1fvNV)
#define glVertexAttribs1svNV GLH_EXT_NAME(glVertexAttribs1svNV)
#define glVertexAttribs2dvNV GLH_EXT_NAME(glVertexAttribs2dvNV)
#define glVertexAttribs2fvNV GLH_EXT_NAME(glVertexAttribs2fvNV)
#define glVertexAttribs2svNV GLH_EXT_NAME(glVertexAttribs2svNV)
#define glVertexAttribs3dvNV GLH_EXT_NAME(glVertexAttribs3dvNV)
#define glVertexAttribs3fvNV GLH_EXT_NAME(glVertexAttribs3fvNV)
#define glVertexAttribs3svNV GLH_EXT_NAME(glVertexAttribs3svNV)
#define glVertexAttribs4dvNV GLH_EXT_NAME(glVertexAttribs4dvNV)
#define glVertexAttribs4fvNV GLH_EXT_NAME(glVertexAttribs4fvNV)
#define glVertexAttribs4svNV GLH_EXT_NAME(glVertexAttribs4svNV)
#define glVertexAttribs4ubvNV GLH_EXT_NAME(glVertexAttribs4ubvNV)
#endif

#ifdef GL_SGIX_texture_coordinate_clamp
#endif

#ifdef GL_SGIX_scalebias_hint
#endif

#ifdef GL_OML_interlace
#endif

#ifdef GL_OML_subsample
#endif

#ifdef GL_OML_resample
#endif

#ifdef GL_NV_copy_depth_to_color
#endif

#ifdef GL_ATI_envmap_bumpmap
#define glTexBumpParameterivATI GLH_EXT_NAME(glTexBumpParameterivATI)
#define glTexBumpParameterfvATI GLH_EXT_NAME(glTexBumpParameterfvATI)
#define glGetTexBumpParameterivATI GLH_EXT_NAME(glGetTexBumpParameterivATI)
#define glGetTexBumpParameterfvATI GLH_EXT_NAME(glGetTexBumpParameterfvATI)
#endif

#ifdef GL_ATI_fragment_shader
#define glGenFragmentShadersATI GLH_EXT_NAME(glGenFragmentShadersATI)
#define glBindFragmentShaderATI GLH_EXT_NAME(glBindFragmentShaderATI)
#define glDeleteFragmentShaderATI GLH_EXT_NAME(glDeleteFragmentShaderATI)
#define glBeginFragmentShaderATI GLH_EXT_NAME(glBeginFragmentShaderATI)
#define glEndFragmentShaderATI GLH_EXT_NAME(glEndFragmentShaderATI)
#define glPassTexCoordATI GLH_EXT_NAME(glPassTexCoordATI)
#define glSampleMapATI GLH_EXT_NAME(glSampleMapATI)
#define glColorFragmentOp1ATI GLH_EXT_NAME(glColorFragmentOp1ATI)
#define glColorFragmentOp2ATI GLH_EXT_NAME(glColorFragmentOp2ATI)
#define glColorFragmentOp3ATI GLH_EXT_NAME(glColorFragmentOp3ATI)
#define glAlphaFragmentOp1ATI GLH_EXT_NAME(glAlphaFragmentOp1ATI)
#define glAlphaFragmentOp2ATI GLH_EXT_NAME(glAlphaFragmentOp2ATI)
#define glAlphaFragmentOp3ATI GLH_EXT_NAME(glAlphaFragmentOp3ATI)
#define glSetFragmentShaderConstantATI GLH_EXT_NAME(glSetFragmentShaderConstantATI)
#endif

#ifdef GL_ATI_pn_triangles
#define glPNTrianglesiATI GLH_EXT_NAME(glPNTrianglesiATI)
#define glPNTrianglesfATI GLH_EXT_NAME(glPNTrianglesfATI)
#endif

#ifdef GL_ATI_vertex_array_object
#define glNewObjectBufferATI GLH_EXT_NAME(glNewObjectBufferATI)
#define glIsObjectBufferATI GLH_EXT_NAME(glIsObjectBufferATI)
#define glUpdateObjectBufferATI GLH_EXT_NAME(glUpdateObjectBufferATI)
#define glGetObjectBufferfvATI GLH_EXT_NAME(glGetObjectBufferfvATI)
#define glGetObjectBufferivATI GLH_EXT_NAME(glGetObjectBufferivATI)
#define glFreeObjectBufferATI GLH_EXT_NAME(glFreeObjectBufferATI)
#define glArrayObjectATI GLH_EXT_NAME(glArrayObjectATI)
#define glGetArrayObjectfvATI GLH_EXT_NAME(glGetArrayObjectfvATI)
#define glGetArrayObjectivATI GLH_EXT_NAME(glGetArrayObjectivATI)
#define glVariantArrayObjectATI GLH_EXT_NAME(glVariantArrayObjectATI)
#define glGetVariantArrayObjectfvATI GLH_EXT_NAME(glGetVariantArrayObjectfvATI)
#define glGetVariantArrayObjectivATI GLH_EXT_NAME(glGetVariantArrayObjectivATI)
#endif

#ifdef GL_EXT_vertex_shader
#define glBeginVertexShaderEXT GLH_EXT_NAME(glBeginVertexShaderEXT)
#define glEndVertexShaderEXT GLH_EXT_NAME(glEndVertexShaderEXT)
#define glBindVertexShaderEXT GLH_EXT_NAME(glBindVertexShaderEXT)
#define glGenVertexShadersEXT GLH_EXT_NAME(glGenVertexShadersEXT)
#define glDeleteVertexShaderEXT GLH_EXT_NAME(glDeleteVertexShaderEXT)
#define glShaderOp1EXT GLH_EXT_NAME(glShaderOp1EXT)
#define glShaderOp2EXT GLH_EXT_NAME(glShaderOp2EXT)
#define glShaderOp3EXT GLH_EXT_NAME(glShaderOp3EXT)
#define glSwizzleEXT GLH_EXT_NAME(glSwizzleEXT)
#define glWriteMaskEXT GLH_EXT_NAME(glWriteMaskEXT)
#define glInsertComponentEXT GLH_EXT_NAME(glInsertComponentEXT)
#define glExtractComponentEXT GLH_EXT_NAME(glExtractComponentEXT)
#define glGenSymbolsEXT GLH_EXT_NAME(glGenSymbolsEXT)
#define glSetInvariantEXT GLH_EXT_NAME(glSetInvariantEXT)
#define glSetLocalConstantEXT GLH_EXT_NAME(glSetLocalConstantEXT)
#define glVariantbvEXT GLH_EXT_NAME(glVariantbvEXT)
#define glVariantsvEXT GLH_EXT_NAME(glVariantsvEXT)
#define glVariantivEXT GLH_EXT_NAME(glVariantivEXT)
#define glVariantfvEXT GLH_EXT_NAME(glVariantfvEXT)
#define glVariantdvEXT GLH_EXT_NAME(glVariantdvEXT)
#define glVariantubvEXT GLH_EXT_NAME(glVariantubvEXT)
#define glVariantusvEXT GLH_EXT_NAME(glVariantusvEXT)
#define glVariantuivEXT GLH_EXT_NAME(glVariantuivEXT)
#define glVariantPointerEXT GLH_EXT_NAME(glVariantPointerEXT)
#define glEnableVariantClientStateEXT GLH_EXT_NAME(glEnableVariantClientStateEXT)
#define glDisableVariantClientStateEXT GLH_EXT_NAME(glDisableVariantClientStateEXT)
#define glBindLightParameterEXT GLH_EXT_NAME(glBindLightParameterEXT)
#define glBindMaterialParameterEXT GLH_EXT_NAME(glBindMaterialParameterEXT)
#define glBindTexGenParameterEXT GLH_EXT_NAME(glBindTexGenParameterEXT)
#define glBindTextureUnitParameterEXT GLH_EXT_NAME(glBindTextureUnitParameterEXT)
#define glBindParameterEXT GLH_EXT_NAME(glBindParameterEXT)
#define glIsVariantEnabledEXT GLH_EXT_NAME(glIsVariantEnabledEXT)
#define glGetVariantBooleanvEXT GLH_EXT_NAME(glGetVariantBooleanvEXT)
#define glGetVariantIntegervEXT GLH_EXT_NAME(glGetVariantIntegervEXT)
#define glGetVariantFloatvEXT GLH_EXT_NAME(glGetVariantFloatvEXT)
#define glGetVariantPointervEXT GLH_EXT_NAME(glGetVariantPointervEXT)
#define glGetInvariantBooleanvEXT GLH_EXT_NAME(glGetInvariantBooleanvEXT)
#define glGetInvariantIntegervEXT GLH_EXT_NAME(glGetInvariantIntegervEXT)
#define glGetInvariantFloatvEXT GLH_EXT_NAME(glGetInvariantFloatvEXT)
#define glGetLocalConstantBooleanvEXT GLH_EXT_NAME(glGetLocalConstantBooleanvEXT)
#define glGetLocalConstantIntegervEXT GLH_EXT_NAME(glGetLocalConstantIntegervEXT)
#define glGetLocalConstantFloatvEXT GLH_EXT_NAME(glGetLocalConstantFloatvEXT)
#endif

#ifdef GL_ATI_vertex_streams
#define glVertexStream1sATI GLH_EXT_NAME(glVertexStream1sATI)
#define glVertexStream1svATI GLH_EXT_NAME(glVertexStream1svATI)
#define glVertexStream1iATI GLH_EXT_NAME(glVertexStream1iATI)
#define glVertexStream1ivATI GLH_EXT_NAME(glVertexStream1ivATI)
#define glVertexStream1fATI GLH_EXT_NAME(glVertexStream1fATI)
#define glVertexStream1fvATI GLH_EXT_NAME(glVertexStream1fvATI)
#define glVertexStream1dATI GLH_EXT_NAME(glVertexStream1dATI)
#define glVertexStream1dvATI GLH_EXT_NAME(glVertexStream1dvATI)
#define glVertexStream2sATI GLH_EXT_NAME(glVertexStream2sATI)
#define glVertexStream2svATI GLH_EXT_NAME(glVertexStream2svATI)
#define glVertexStream2iATI GLH_EXT_NAME(glVertexStream2iATI)
#define glVertexStream2ivATI GLH_EXT_NAME(glVertexStream2ivATI)
#define glVertexStream2fATI GLH_EXT_NAME(glVertexStream2fATI)
#define glVertexStream2fvATI GLH_EXT_NAME(glVertexStream2fvATI)
#define glVertexStream2dATI GLH_EXT_NAME(glVertexStream2dATI)
#define glVertexStream2dvATI GLH_EXT_NAME(glVertexStream2dvATI)
#define glVertexStream3sATI GLH_EXT_NAME(glVertexStream3sATI)
#define glVertexStream3svATI GLH_EXT_NAME(glVertexStream3svATI)
#define glVertexStream3iATI GLH_EXT_NAME(glVertexStream3iATI)
#define glVertexStream3ivATI GLH_EXT_NAME(glVertexStream3ivATI)
#define glVertexStream3fATI GLH_EXT_NAME(glVertexStream3fATI)
#define glVertexStream3fvATI GLH_EXT_NAME(glVertexStream3fvATI)
#define glVertexStream3dATI GLH_EXT_NAME(glVertexStream3dATI)
#define glVertexStream3dvATI GLH_EXT_NAME(glVertexStream3dvATI)
#define glVertexStream4sATI GLH_EXT_NAME(glVertexStream4sATI)
#define glVertexStream4svATI GLH_EXT_NAME(glVertexStream4svATI)
#define glVertexStream4iATI GLH_EXT_NAME(glVertexStream4iATI)
#define glVertexStream4ivATI GLH_EXT_NAME(glVertexStream4ivATI)
#define glVertexStream4fATI GLH_EXT_NAME(glVertexStream4fATI)
#define glVertexStream4fvATI GLH_EXT_NAME(glVertexStream4fvATI)
#define glVertexStream4dATI GLH_EXT_NAME(glVertexStream4dATI)
#define glVertexStream4dvATI GLH_EXT_NAME(glVertexStream4dvATI)
#define glNormalStream3bATI GLH_EXT_NAME(glNormalStream3bATI)
#define glNormalStream3bvATI GLH_EXT_NAME(glNormalStream3bvATI)
#define glNormalStream3sATI GLH_EXT_NAME(glNormalStream3sATI)
#define glNormalStream3svATI GLH_EXT_NAME(glNormalStream3svATI)
#define glNormalStream3iATI GLH_EXT_NAME(glNormalStream3iATI)
#define glNormalStream3ivATI GLH_EXT_NAME(glNormalStream3ivATI)
#define glNormalStream3fATI GLH_EXT_NAME(glNormalStream3fATI)
#define glNormalStream3fvATI GLH_EXT_NAME(glNormalStream3fvATI)
#define glNormalStream3dATI GLH_EXT_NAME(glNormalStream3dATI)
#define glNormalStream3dvATI GLH_EXT_NAME(glNormalStream3dvATI)
#define glClientActiveVertexStreamATI GLH_EXT_NAME(glClientActiveVertexStreamATI)
#define glVertexBlendEnviATI GLH_EXT_NAME(glVertexBlendEnviATI)
#define glVertexBlendEnvfATI GLH_EXT_NAME(glVertexBlendEnvfATI)
#endif

#ifdef GL_ATI_element_array
#define glElementPointerATI GLH_EXT_NAME(glElementPointerATI)
#define glDrawElementArrayATI GLH_EXT_NAME(glDrawElementArrayATI)
#define glDrawRangeElementArrayATI GLH_EXT_NAME(glDrawRangeElementArrayATI)
#endif

#ifdef GL_SUN_mesh_array
#define glDrawMeshArraysSUN GLH_EXT_NAME(glDrawMeshArraysSUN)
#endif

#ifdef GL_SUN_slice_accum
#endif

#ifdef GL_NV_multisample_filter_hint
#endif

#ifdef GL_NV_depth_clamp
#endif

#ifdef GL_NV_occlusion_query
#define glGenOcclusionQueriesNV GLH_EXT_NAME(glGenOcclusionQueriesNV)
#define glDeleteOcclusionQueriesNV GLH_EXT_NAME(glDeleteOcclusionQueriesNV)
#define glIsOcclusionQueryNV GLH_EXT_NAME(glIsOcclusionQueryNV)
#define glBeginOcclusionQueryNV GLH_EXT_NAME(glBeginOcclusionQueryNV)
#define glEndOcclusionQueryNV GLH_EXT_NAME(glEndOcclusionQueryNV)
#define glGetOcclusionQueryivNV GLH_EXT_NAME(glGetOcclusionQueryivNV)
#define glGetOcclusionQueryuivNV GLH_EXT_NAME(glGetOcclusionQueryuivNV)
#endif

#ifdef GL_NV_point_sprite
#define glPointParameteriNV GLH_EXT_NAME(glPointParameteriNV)
#define glPointParameterivNV GLH_EXT_NAME(glPointParameterivNV)
#endif

#ifdef GL_NV_texture_shader3
#endif

#ifdef GL_NV_vertex_program1_1
#endif

#ifdef GL_EXT_shadow_funcs
#endif

#ifdef GL_EXT_stencil_two_side
#define glActiveStencilFaceEXT GLH_EXT_NAME(glActiveStencilFaceEXT)
#endif

#ifdef GL_ATI_text_fragment_shader
#endif

#ifdef GL_APPLE_client_storage
#endif

#ifdef GL_APPLE_element_array
#define glElementPointerAPPLE GLH_EXT_NAME(glElementPointerAPPLE)
#define glDrawElementArrayAPPLE GLH_EXT_NAME(glDrawElementArrayAPPLE)
#define glDrawRangeElementArrayAPPLE GLH_EXT_NAME(glDrawRangeElementArrayAPPLE)
#define glMultiDrawElementArrayAPPLE GLH_EXT_NAME(glMultiDrawElementArrayAPPLE)
#define glMultiDrawRangeElementArrayAPPLE GLH_EXT_NAME(glMultiDrawRangeElementArrayAPPLE)
#endif

#ifdef GL_APPLE_fence
#define glGenFencesAPPLE GLH_EXT_NAME(glGenFencesAPPLE)
#define glDeleteFencesAPPLE GLH_EXT_NAME(glDeleteFencesAPPLE)
#define glSetFenceAPPLE GLH_EXT_NAME(glSetFenceAPPLE)
#define glIsFenceAPPLE GLH_EXT_NAME(glIsFenceAPPLE)
#define glTestFenceAPPLE GLH_EXT_NAME(glTestFenceAPPLE)
#define glFinishFenceAPPLE GLH_EXT_NAME(glFinishFenceAPPLE)
#define glTestObjectAPPLE GLH_EXT_NAME(glTestObjectAPPLE)
#define glFinishObjectAPPLE GLH_EXT_NAME(glFinishObjectAPPLE)
#endif

#ifdef GL_APPLE_vertex_array_object
#define glBindVertexArrayAPPLE GLH_EXT_NAME(glBindVertexArrayAPPLE)
#define glDeleteVertexArraysAPPLE GLH_EXT_NAME(glDeleteVertexArraysAPPLE)
#define glGenVertexArraysAPPLE GLH_EXT_NAME(glGenVertexArraysAPPLE)
#define glIsVertexArrayAPPLE GLH_EXT_NAME(glIsVertexArrayAPPLE)
#endif

#ifdef GL_APPLE_vertex_array_range
#define glVertexArrayRangeAPPLE GLH_EXT_NAME(glVertexArrayRangeAPPLE)
#define glFlushVertexArrayRangeAPPLE GLH_EXT_NAME(glFlushVertexArrayRangeAPPLE)
#define glVertexArrayParameteriAPPLE GLH_EXT_NAME(glVertexArrayParameteriAPPLE)
#endif

#ifdef GL_APPLE_ycbcr_422
#endif

#ifdef GL_S3_s3tc
#endif

#ifdef GL_ATI_draw_buffers
#define glDrawBuffersATI GLH_EXT_NAME(glDrawBuffersATI)
#endif

#ifdef GL_ATI_pixel_format_float
#endif

#ifdef GL_ATI_texture_env_combine3
#endif

#ifdef GL_ATI_texture_float
#endif

#ifdef GL_NV_float_buffer
#endif

#ifdef GL_NV_fragment_program
#define glProgramNamedParameter4fNV GLH_EXT_NAME(glProgramNamedParameter4fNV)
#define glProgramNamedParameter4dNV GLH_EXT_NAME(glProgramNamedParameter4dNV)
#define glProgramNamedParameter4fvNV GLH_EXT_NAME(glProgramNamedParameter4fvNV)
#define glProgramNamedParameter4dvNV GLH_EXT_NAME(glProgramNamedParameter4dvNV)
#define glGetProgramNamedParameterfvNV GLH_EXT_NAME(glGetProgramNamedParameterfvNV)
#define glGetProgramNamedParameterdvNV GLH_EXT_NAME(glGetProgramNamedParameterdvNV)
#endif

#ifdef GL_NV_half_float
#define glVertex2hNV GLH_EXT_NAME(glVertex2hNV)
#define glVertex2hvNV GLH_EXT_NAME(glVertex2hvNV)
#define glVertex3hNV GLH_EXT_NAME(glVertex3hNV)
#define glVertex3hvNV GLH_EXT_NAME(glVertex3hvNV)
#define glVertex4hNV GLH_EXT_NAME(glVertex4hNV)
#define glVertex4hvNV GLH_EXT_NAME(glVertex4hvNV)
#define glNormal3hNV GLH_EXT_NAME(glNormal3hNV)
#define glNormal3hvNV GLH_EXT_NAME(glNormal3hvNV)
#define glColor3hNV GLH_EXT_NAME(glColor3hNV)
#define glColor3hvNV GLH_EXT_NAME(glColor3hvNV)
#define glColor4hNV GLH_EXT_NAME(glColor4hNV)
#define glColor4hvNV GLH_EXT_NAME(glColor4hvNV)
#define glTexCoord1hNV GLH_EXT_NAME(glTexCoord1hNV)
#define glTexCoord1hvNV GLH_EXT_NAME(glTexCoord1hvNV)
#define glTexCoord2hNV GLH_EXT_NAME(glTexCoord2hNV)
#define glTexCoord2hvNV GLH_EXT_NAME(glTexCoord2hvNV)
#define glTexCoord3hNV GLH_EXT_NAME(glTexCoord3hNV)
#define glTexCoord3hvNV GLH_EXT_NAME(glTexCoord3hvNV)
#define glTexCoord4hNV GLH_EXT_NAME(glTexCoord4hNV)
#define glTexCoord4hvNV GLH_EXT_NAME(glTexCoord4hvNV)
#define glMultiTexCoord1hNV GLH_EXT_NAME(glMultiTexCoord1hNV)
#define glMultiTexCoord1hvNV GLH_EXT_NAME(glMultiTexCoord1hvNV)
#define glMultiTexCoord2hNV GLH_EXT_NAME(glMultiTexCoord2hNV)
#define glMultiTexCoord2hvNV GLH_EXT_NAME(glMultiTexCoord2hvNV)
#define glMultiTexCoord3hNV GLH_EXT_NAME(glMultiTexCoord3hNV)
#define glMultiTexCoord3hvNV GLH_EXT_NAME(glMultiTexCoord3hvNV)
#define glMultiTexCoord4hNV GLH_EXT_NAME(glMultiTexCoord4hNV)
#define glMultiTexCoord4hvNV GLH_EXT_NAME(glMultiTexCoord4hvNV)
#define glFogCoordhNV GLH_EXT_NAME(glFogCoordhNV)
#define glFogCoordhvNV GLH_EXT_NAME(glFogCoordhvNV)
#define glSecondaryColor3hNV GLH_EXT_NAME(glSecondaryColor3hNV)
#define glSecondaryColor3hvNV GLH_EXT_NAME(glSecondaryColor3hvNV)
#define glVertexWeighthNV GLH_EXT_NAME(glVertexWeighthNV)
#define glVertexWeighthvNV GLH_EXT_NAME(glVertexWeighthvNV)
#define glVertexAttrib1hNV GLH_EXT_NAME(glVertexAttrib1hNV)
#define glVertexAttrib1hvNV GLH_EXT_NAME(glVertexAttrib1hvNV)
#define glVertexAttrib2hNV GLH_EXT_NAME(glVertexAttrib2hNV)
#define glVertexAttrib2hvNV GLH_EXT_NAME(glVertexAttrib2hvNV)
#define glVertexAttrib3hNV GLH_EXT_NAME(glVertexAttrib3hNV)
#define glVertexAttrib3hvNV GLH_EXT_NAME(glVertexAttrib3hvNV)
#define glVertexAttrib4hNV GLH_EXT_NAME(glVertexAttrib4hNV)
#define glVertexAttrib4hvNV GLH_EXT_NAME(glVertexAttrib4hvNV)
#define glVertexAttribs1hvNV GLH_EXT_NAME(glVertexAttribs1hvNV)
#define glVertexAttribs2hvNV GLH_EXT_NAME(glVertexAttribs2hvNV)
#define glVertexAttribs3hvNV GLH_EXT_NAME(glVertexAttribs3hvNV)
#define glVertexAttribs4hvNV GLH_EXT_NAME(glVertexAttribs4hvNV)
#endif

#ifdef GL_NV_pixel_data_range
#define glPixelDataRangeNV GLH_EXT_NAME(glPixelDataRangeNV)
#define glFlushPixelDataRangeNV GLH_EXT_NAME(glFlushPixelDataRangeNV)
#endif

#ifdef GL_NV_primitive_restart
#define glPrimitiveRestartNV GLH_EXT_NAME(glPrimitiveRestartNV)
#define glPrimitiveRestartIndexNV GLH_EXT_NAME(glPrimitiveRestartIndexNV)
#endif

#ifdef GL_NV_texture_expand_normal
#endif

#ifdef GL_NV_vertex_program2
#endif

#ifdef GL_ATI_map_object_buffer
#define glMapObjectBufferATI GLH_EXT_NAME(glMapObjectBufferATI)
#define glUnmapObjectBufferATI GLH_EXT_NAME(glUnmapObjectBufferATI)
#endif

#ifdef GL_ATI_separate_stencil
#define glStencilOpSeparateATI GLH_EXT_NAME(glStencilOpSeparateATI)
#define glStencilFuncSeparateATI GLH_EXT_NAME(glStencilFuncSeparateATI)
#endif

#ifdef GL_ATI_vertex_attrib_array_object
#define glVertexAttribArrayObjectATI GLH_EXT_NAME(glVertexAttribArrayObjectATI)
#define glGetVertexAttribArrayObjectfvATI GLH_EXT_NAME(glGetVertexAttribArrayObjectfvATI)
#define glGetVertexAttribArrayObjectivATI GLH_EXT_NAME(glGetVertexAttribArrayObjectivATI)
#endif

#ifdef GL_OES_read_format
#endif

#ifdef GL_EXT_depth_bounds_test
#define glDepthBoundsEXT GLH_EXT_NAME(glDepthBoundsEXT)
#endif

#ifdef GL_EXT_texture_mirror_clamp
#endif

#ifdef GL_EXT_blend_equation_separate
#define glBlendEquationSeparateEXT GLH_EXT_NAME(glBlendEquationSeparateEXT)
#endif

#ifdef GL_MESA_pack_invert
#endif

#ifdef GL_MESA_ycbcr_texture
#endif

#ifdef GL_EXT_pixel_buffer_object
#endif

#ifdef GL_NV_fragment_program_option
#endif

#ifdef GL_NV_fragment_program2
#endif

#ifdef GL_NV_vertex_program2_option
#endif

#ifdef GL_NV_vertex_program3
#endif

#ifdef GL_EXT_framebuffer_object
#define glIsRenderbufferEXT GLH_EXT_NAME(glIsRenderbufferEXT)
#define glBindRenderbufferEXT GLH_EXT_NAME(glBindRenderbufferEXT)
#define glDeleteRenderbuffersEXT GLH_EXT_NAME(glDeleteRenderbuffersEXT)
#define glGenRenderbuffersEXT GLH_EXT_NAME(glGenRenderbuffersEXT)
#define glRenderbufferStorageEXT GLH_EXT_NAME(glRenderbufferStorageEXT)
#define glGetRenderbufferParameterivEXT GLH_EXT_NAME(glGetRenderbufferParameterivEXT)
#define glIsFramebufferEXT GLH_EXT_NAME(glIsFramebufferEXT)
#define glBindFramebufferEXT GLH_EXT_NAME(glBindFramebufferEXT)
#define glDeleteFramebuffersEXT GLH_EXT_NAME(glDeleteFramebuffersEXT)
#define glGenFramebuffersEXT GLH_EXT_NAME(glGenFramebuffersEXT)
#define glCheckFramebufferStatusEXT GLH_EXT_NAME(glCheckFramebufferStatusEXT)
#define glFramebufferTexture1DEXT GLH_EXT_NAME(glFramebufferTexture1DEXT)
#define glFramebufferTexture2DEXT GLH_EXT_NAME(glFramebufferTexture2DEXT)
#define glFramebufferTexture3DEXT GLH_EXT_NAME(glFramebufferTexture3DEXT)
#define glFramebufferRenderbufferEXT GLH_EXT_NAME(glFramebufferRenderbufferEXT)
#define glGetFramebufferAttachmentParameterivEXT GLH_EXT_NAME(glGetFramebufferAttachmentParameterivEXT)
#define glGenerateMipmapEXT GLH_EXT_NAME(glGenerateMipmapEXT)
#endif

#ifdef GL_GREMEDY_string_marker
#define glStringMarkerGREMEDY GLH_EXT_NAME(glStringMarkerGREMEDY)
#endif

#ifdef GL_EXT_Cg_shader
#endif

#ifdef GL_EXT_timer_query
#define glGetQueryObjecti64vEXT GLH_EXT_NAME(glGetQueryObjecti64vEXT)
#define glGetQueryObjectui64vEXT GLH_EXT_NAME(glGetQueryObjectui64vEXT)
#endif

#ifdef GL_EXT_texture_buffer_object
#define glTexBufferEXT GLH_EXT_NAME(glTexBufferEXT)
#endif

#ifdef GL_NV_transform_feedback
#define glBeginTransformFeedbackNV GLH_EXT_NAME(glBeginTransformFeedbackNV)
#define glEndTransformFeedbackNV GLH_EXT_NAME(glEndTransformFeedbackNV)
#define glTransformFeedbackAttribsNV GLH_EXT_NAME(glTransformFeedbackAttribsNV)
#define glBindBufferRangeNV GLH_EXT_NAME(glBindBufferRangeNV)
#define glBindBufferOffsetNV GLH_EXT_NAME(glBindBufferOffsetNV)
#define glBindBufferBaseNV GLH_EXT_NAME(glBindBufferBaseNV)
#define glTransformFeedbackVaryingsNV GLH_EXT_NAME(glTransformFeedbackVaryingsNV)
#define glActiveVaryingNV GLH_EXT_NAME(glActiveVaryingNV)
#define glGetVaryingLocationNV GLH_EXT_NAME(glGetVaryingLocationNV)
#define glGetActiveVaryingNV GLH_EXT_NAME(glGetActiveVaryingNV)
#define glGetTransformFeedbackVaryingNV GLH_EXT_NAME(glGetTransformFeedbackVaryingNV)
#endif

#ifdef GL_NV_depth_buffer_float
#define glDepthRangedNV GLH_EXT_NAME(glDepthRangedNV)
#define glClearDepthdNV GLH_EXT_NAME(glClearDepthdNV)
#define glDepthBoundsdNV GLH_EXT_NAME(glDepthBoundsdNV)
#endif

#ifdef GL_EXT_texture_compression_latc
#endif

#ifdef GL_EXT_framebuffer_sRGB
#endif

#ifdef GL_EXT_texture_shared_exponent
#endif

#ifdef GL_EXT_packed_float
#endif

#ifdef GL_EXT_texture_array
#endif

#ifdef GL_EXT_draw_buffers2
#define glColorMaskIndexedEXT GLH_EXT_NAME(glColorMaskIndexedEXT)
#define glGetBooleanIndexedvEXT GLH_EXT_NAME(glGetBooleanIndexedvEXT)
#define glGetIntegerIndexedvEXT GLH_EXT_NAME(glGetIntegerIndexedvEXT)
#define glEnableIndexedEXT GLH_EXT_NAME(glEnableIndexedEXT)
#define glDisableIndexedEXT GLH_EXT_NAME(glDisableIndexedEXT)
#define glIsEnabledIndexedEXT GLH_EXT_NAME(glIsEnabledIndexedEXT)
#endif

#ifdef GL_EXT_texture_integer
#define glTexParameterIivEXT GLH_EXT_NAME(glTexParameterIivEXT)
#define glTexParameterIuivEXT GLH_EXT_NAME(glTexParameterIuivEXT)
#define glGetTexParameterIivEXT GLH_EXT_NAME(glGetTexParameterIivEXT)
#define glGetTexParameterIuivEXT GLH_EXT_NAME(glGetTexParameterIuivEXT)
#define glClearColorIiEXT GLH_EXT_NAME(glClearColorIiEXT)
#define glClearColorIuiEXT GLH_EXT_NAME(glClearColorIuiEXT)
#endif

#ifdef GL_EXT_bindable_uniform
#define glUniformBufferEXT GLH_EXT_NAME(glUniformBufferEXT)
#define glGetUniformBufferSizeEXT GLH_EXT_NAME(glGetUniformBufferSizeEXT)
#define glGetUniformOffsetEXT GLH_EXT_NAME(glGetUniformOffsetEXT)
#endif

#ifdef GL_EXT_gpu_shader4
#define glGetUniformuivEXT GLH_EXT_NAME(glGetUniformuivEXT)
#define glBindFragDataLocationEXT GLH_EXT_NAME(glBindFragDataLocationEXT)
#define glGetFragDataLocationEXT GLH_EXT_NAME(glGetFragDataLocationEXT)
#define glUniform1uiEXT GLH_EXT_NAME(glUniform1uiEXT)
#define glUniform2uiEXT GLH_EXT_NAME(glUniform2uiEXT)
#define glUniform3uiEXT GLH_EXT_NAME(glUniform3uiEXT)
#define glUniform4uiEXT GLH_EXT_NAME(glUniform4uiEXT)
#define glUniform1uivEXT GLH_EXT_NAME(glUniform1uivEXT)
#define glUniform2uivEXT GLH_EXT_NAME(glUniform2uivEXT)
#define glUniform3uivEXT GLH_EXT_NAME(glUniform3uivEXT)
#define glUniform4uivEXT GLH_EXT_NAME(glUniform4uivEXT)
#define glVertexAttribI1iEXT GLH_EXT_NAME(glVertexAttribI1iEXT)
#define glVertexAttribI2iEXT GLH_EXT_NAME(glVertexAttribI2iEXT)
#define glVertexAttribI3iEXT GLH_EXT_NAME(glVertexAttribI3iEXT)
#define glVertexAttribI4iEXT GLH_EXT_NAME(glVertexAttribI4iEXT)
#define glVertexAttribI1uiEXT GLH_EXT_NAME(glVertexAttribI1uiEXT)
#define glVertexAttribI2uiEXT GLH_EXT_NAME(glVertexAttribI2uiEXT)
#define glVertexAttribI3uiEXT GLH_EXT_NAME(glVertexAttribI3uiEXT)
#define glVertexAttribI4uiEXT GLH_EXT_NAME(glVertexAttribI4uiEXT)
#define glVertexAttribI1ivEXT GLH_EXT_NAME(glVertexAttribI1ivEXT)
#define glVertexAttribI2ivEXT GLH_EXT_NAME(glVertexAttribI2ivEXT)
#define glVertexAttribI3ivEXT GLH_EXT_NAME(glVertexAttribI3ivEXT)
#define glVertexAttribI4ivEXT GLH_EXT_NAME(glVertexAttribI4ivEXT)
#define glVertexAttribI1uivEXT GLH_EXT_NAME(glVertexAttribI1uivEXT)
#define glVertexAttribI2uivEXT GLH_EXT_NAME(glVertexAttribI2uivEXT)
#define glVertexAttribI3uivEXT GLH_EXT_NAME(glVertexAttribI3uivEXT)
#define glVertexAttribI4uivEXT GLH_EXT_NAME(glVertexAttribI4uivEXT)
#define glVertexAttribI4bvEXT GLH_EXT_NAME(glVertexAttribI4bvEXT)
#define glVertexAttribI4svEXT GLH_EXT_NAME(glVertexAttribI4svEXT)
#define glVertexAttribI4ubvEXT GLH_EXT_NAME(glVertexAttribI4ubvEXT)
#define glVertexAttribI4usvEXT GLH_EXT_NAME(glVertexAttribI4usvEXT)
#define glVertexAttribIPointerEXT GLH_EXT_NAME(glVertexAttribIPointerEXT)
#define glGetVertexAttribIivEXT GLH_EXT_NAME(glGetVertexAttribIivEXT)
#define glGetVertexAttribIuivEXT GLH_EXT_NAME(glGetVertexAttribIuivEXT)
#endif

#ifdef GL_EXT_geometry_shader4
#define glProgramParameteriEXT GLH_EXT_NAME(glProgramParameteriEXT)
#define glFramebufferTextureEXT GLH_EXT_NAME(glFramebufferTextureEXT)
#define glFramebufferTextureLayerEXT GLH_EXT_NAME(glFramebufferTextureLayerEXT)
#define glFramebufferTextureFaceEXT GLH_EXT_NAME(glFramebufferTextureFaceEXT)
#endif

#ifdef GL_NV_geometry_program4
#define glProgramVertexLimitNV GLH_EXT_NAME(glProgramVertexLimitNV)
#endif

#ifdef GL_NV_gpu_program4
#define glProgramLocalParameterI4iNV GLH_EXT_NAME(glProgramLocalParameterI4iNV)
#define glProgramLocalParameterI4ivNV GLH_EXT_NAME(glProgramLocalParameterI4ivNV)
#define glProgramLocalParametersI4ivNV GLH_EXT_NAME(glProgramLocalParametersI4ivNV)
#define glProgramLocalParameterI4uiNV GLH_EXT_NAME(glProgramLocalParameterI4uiNV)
#define glProgramLocalParameterI4uivNV GLH_EXT_NAME(glProgramLocalParameterI4uivNV)
#define glProgramLocalParametersI4uivNV GLH_EXT_NAME(glProgramLocalParametersI4uivNV)
#define glProgramEnvParameterI4iNV GLH_EXT_NAME(glProgramEnvParameterI4iNV)
#define glProgramEnvParameterI4ivNV GLH_EXT_NAME(glProgramEnvParameterI4ivNV)
#define glProgramEnvParametersI4ivNV GLH_EXT_NAME(glProgramEnvParametersI4ivNV)
#define glProgramEnvParameterI4uiNV GLH_EXT_NAME(glProgramEnvParameterI4uiNV)
#define glProgramEnvParameterI4uivNV GLH_EXT_NAME(glProgramEnvParameterI4uivNV)
#define glProgramEnvParametersI4uivNV GLH_EXT_NAME(glProgramEnvParametersI4uivNV)
#define glGetProgramLocalParameterIivNV GLH_EXT_NAME(glGetProgramLocalParameterIivNV)
#define glGetProgramLocalParameterIuivNV GLH_EXT_NAME(glGetProgramLocalParameterIuivNV)
#define glGetProgramEnvParameterIivNV GLH_EXT_NAME(glGetProgramEnvParameterIivNV)
#define glGetProgramEnvParameterIuivNV GLH_EXT_NAME(glGetProgramEnvParameterIuivNV)
#endif

#ifdef GL_NV_parameter_buffer_object
#define glProgramBufferParametersfvNV GLH_EXT_NAME(glProgramBufferParametersfvNV)
#define glProgramBufferParametersIivNV GLH_EXT_NAME(glProgramBufferParametersIivNV)
#define glProgramBufferParametersIuivNV GLH_EXT_NAME(glProgramBufferParametersIuivNV)
#endif

#ifdef GL_EXT_framebuffer_multisample
#define glRenderbufferStorageMultisampleEXT GLH_EXT_NAME(glRenderbufferStorageMultisampleEXT)
#endif

#ifdef GL_NV_framebuffer_multisample_coverage
#define glRenderbufferStorageMultisampleCoverageNV GLH_EXT_NAME(glRenderbufferStorageMultisampleCoverageNV)
#endif

#ifdef GL_EXT_framebuffer_blit
#define glBlitFramebufferEXT GLH_EXT_NAME(glBlitFramebufferEXT)
#endif

#ifdef GL_EXT_draw_instanced
#define glDrawArraysInstancedEXT GLH_EXT_NAME(glDrawArraysInstancedEXT)
#define glDrawElementsInstancedEXT GLH_EXT_NAME(glDrawElementsInstancedEXT)
#endif

#ifdef GL_EXT_texture_compression_rgtc
#endif


#endif
