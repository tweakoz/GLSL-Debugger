import os, glob, string
import ork.build.utils as obu
import ork.build.common as cmn
import ork.build.slnprj as sln

# set scons options ######################

SetOption('implicit_cache',1)
Decider('MD5-timestamp')
VariantDir( 'obj', 'src',duplicate=0 )
SetOption('num_jobs', obu.num_cores) 
sln.optset.add("ork.upp")
BasicEnv = Environment( ENV=os.environ )

#obu.install_files("src/*.h","include/unittest++")
#obu.install_files("src/Posix/*.h","include/unittest++/Posix")
#obu.install_headers("inc/*")

# basics #################################

class compiler:
 def __init__(self):
  ARGS = cmn.BuildArgs
  suffix = sln.BuildSuffix(ARGS)
  ##########################################
  SRC_FOLDERS  =  " glslang/DebugCodeGen glslang/GenericCodeGen glslang/MachineIndependent "
  SRC_FOLDERS  += " glslang/MachineIndependent/preprocessor "
  SRC_FOLDERS  += " glslang/OSDependent/Linux "
  LIBS = ''
  ##########################################
  prj_lib = sln.Project(ARGS,BasicEnv,"glsl.compiler")
  prj_lib.SetSrcBase( "src" )
  prj_lib.AddFolders( SRC_FOLDERS, "*.cpp" )
  prj_lib.AddLibs( LIBS )
  prj_lib.AddIncludePaths("inc")
  prj_lib.AddIncludePaths("src/glslang")
  prj_lib.AddIncludePaths("src/glslang/OSDependent/Linux")
  prj_lib.AddIncludePaths("../glsldb/utils")
  prj_lib.AddIncludePaths("../glsldb") # ick, code referencing dbgprint.h and utils/dbgprint.h (we will make more consistent later)
  prj_lib.AddIncludePaths("compiler")
  prj_lib.AddDefines( "GLSLDB_LINUX", "ix")
  prj_lib.Configure()
  self.lib = prj_lib.SharedLibrary( )
  ##########################################
  #prj_test = sln.Project(ARGS,BasicEnv,"ork.core.test")
  #prj_test.SetSrcBase( "src" )
  #prj_test.AddFolders( "test", "*.cpp" )
  #prj_test.AddLibs( LIBS )
  #prj_test.AddLibs( "ork.unittestpp.%s"%suffix )
  #prj_test.AddProjectDep( prj_lib )
  #prj_test.AddIncludePaths("../ork.core/inc")
  #prj_test.Configure()
  #self.test_prg = prj_test.Program( )
  #prj_test.AddProjectDep( prj_lib )
  #Depends(self.test_prg,self.lib)
  #prj_test.AddProjectDep( upp_lib )
  #self.test = prj_test.Program()


a = compiler()
ret = list()
ret += a.lib
Return("ret")

